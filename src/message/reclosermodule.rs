// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `reclosermodule/reclosermodule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserControlFSCC {
    // message fields
    logicalNodeForControl: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForControl>,
    switchControlScheduleFSCH: ::protobuf::SingularPtrField<super::commonmodule::SwitchControlScheduleFSCH>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserControlFSCC {
    fn default() -> &'a RecloserControlFSCC {
        <RecloserControlFSCC as ::protobuf::Message>::default_instance()
    }
}

impl RecloserControlFSCC {
    pub fn new() -> RecloserControlFSCC {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1;


    pub fn get_logicalNodeForControl(&self) -> &super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForControl(&mut self) {
        self.logicalNodeForControl.clear();
    }

    pub fn has_logicalNodeForControl(&self) -> bool {
        self.logicalNodeForControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForControl(&mut self, v: super::commonmodule::LogicalNodeForControl) {
        self.logicalNodeForControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForControl(&mut self) -> &mut super::commonmodule::LogicalNodeForControl {
        if self.logicalNodeForControl.is_none() {
            self.logicalNodeForControl.set_default();
        }
        self.logicalNodeForControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForControl(&mut self) -> super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForControl::new())
    }

    // .commonmodule.SwitchControlScheduleFSCH switchControlScheduleFSCH = 2;


    pub fn get_switchControlScheduleFSCH(&self) -> &super::commonmodule::SwitchControlScheduleFSCH {
        self.switchControlScheduleFSCH.as_ref().unwrap_or_else(|| <super::commonmodule::SwitchControlScheduleFSCH as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchControlScheduleFSCH(&mut self) {
        self.switchControlScheduleFSCH.clear();
    }

    pub fn has_switchControlScheduleFSCH(&self) -> bool {
        self.switchControlScheduleFSCH.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchControlScheduleFSCH(&mut self, v: super::commonmodule::SwitchControlScheduleFSCH) {
        self.switchControlScheduleFSCH = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchControlScheduleFSCH(&mut self) -> &mut super::commonmodule::SwitchControlScheduleFSCH {
        if self.switchControlScheduleFSCH.is_none() {
            self.switchControlScheduleFSCH.set_default();
        }
        self.switchControlScheduleFSCH.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchControlScheduleFSCH(&mut self) -> super::commonmodule::SwitchControlScheduleFSCH {
        self.switchControlScheduleFSCH.take().unwrap_or_else(|| super::commonmodule::SwitchControlScheduleFSCH::new())
    }
}

impl ::protobuf::Message for RecloserControlFSCC {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchControlScheduleFSCH {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForControl)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchControlScheduleFSCH)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchControlScheduleFSCH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchControlScheduleFSCH.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserControlFSCC {
        RecloserControlFSCC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForControl>>(
                "logicalNodeForControl",
                |m: &RecloserControlFSCC| { &m.logicalNodeForControl },
                |m: &mut RecloserControlFSCC| { &mut m.logicalNodeForControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::SwitchControlScheduleFSCH>>(
                "switchControlScheduleFSCH",
                |m: &RecloserControlFSCC| { &m.switchControlScheduleFSCH },
                |m: &mut RecloserControlFSCC| { &mut m.switchControlScheduleFSCH },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserControlFSCC>(
                "RecloserControlFSCC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserControlFSCC {
        static instance: ::protobuf::rt::LazyV2<RecloserControlFSCC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserControlFSCC::new)
    }
}

impl ::protobuf::Clear for RecloserControlFSCC {
    fn clear(&mut self) {
        self.logicalNodeForControl.clear();
        self.switchControlScheduleFSCH.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserControlFSCC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserControlFSCC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserControl {
    // message fields
    controlValue: ::protobuf::SingularPtrField<super::commonmodule::ControlValue>,
    check: ::protobuf::SingularPtrField<super::commonmodule::CheckConditions>,
    recloserControlFSCC: ::protobuf::SingularPtrField<RecloserControlFSCC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserControl {
    fn default() -> &'a RecloserControl {
        <RecloserControl as ::protobuf::Message>::default_instance()
    }
}

impl RecloserControl {
    pub fn new() -> RecloserControl {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlValue controlValue = 1;


    pub fn get_controlValue(&self) -> &super::commonmodule::ControlValue {
        self.controlValue.as_ref().unwrap_or_else(|| <super::commonmodule::ControlValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlValue(&mut self) {
        self.controlValue.clear();
    }

    pub fn has_controlValue(&self) -> bool {
        self.controlValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlValue(&mut self, v: super::commonmodule::ControlValue) {
        self.controlValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlValue(&mut self) -> &mut super::commonmodule::ControlValue {
        if self.controlValue.is_none() {
            self.controlValue.set_default();
        }
        self.controlValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlValue(&mut self) -> super::commonmodule::ControlValue {
        self.controlValue.take().unwrap_or_else(|| super::commonmodule::ControlValue::new())
    }

    // .commonmodule.CheckConditions check = 2;


    pub fn get_check(&self) -> &super::commonmodule::CheckConditions {
        self.check.as_ref().unwrap_or_else(|| <super::commonmodule::CheckConditions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check(&mut self) {
        self.check.clear();
    }

    pub fn has_check(&self) -> bool {
        self.check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check(&mut self, v: super::commonmodule::CheckConditions) {
        self.check = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check(&mut self) -> &mut super::commonmodule::CheckConditions {
        if self.check.is_none() {
            self.check.set_default();
        }
        self.check.as_mut().unwrap()
    }

    // Take field
    pub fn take_check(&mut self) -> super::commonmodule::CheckConditions {
        self.check.take().unwrap_or_else(|| super::commonmodule::CheckConditions::new())
    }

    // .reclosermodule.RecloserControlFSCC recloserControlFSCC = 3;


    pub fn get_recloserControlFSCC(&self) -> &RecloserControlFSCC {
        self.recloserControlFSCC.as_ref().unwrap_or_else(|| <RecloserControlFSCC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloserControlFSCC(&mut self) {
        self.recloserControlFSCC.clear();
    }

    pub fn has_recloserControlFSCC(&self) -> bool {
        self.recloserControlFSCC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloserControlFSCC(&mut self, v: RecloserControlFSCC) {
        self.recloserControlFSCC = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloserControlFSCC(&mut self) -> &mut RecloserControlFSCC {
        if self.recloserControlFSCC.is_none() {
            self.recloserControlFSCC.set_default();
        }
        self.recloserControlFSCC.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloserControlFSCC(&mut self) -> RecloserControlFSCC {
        self.recloserControlFSCC.take().unwrap_or_else(|| RecloserControlFSCC::new())
    }
}

impl ::protobuf::Message for RecloserControl {
    fn is_initialized(&self) -> bool {
        for v in &self.controlValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserControlFSCC {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloserControlFSCC)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloserControlFSCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.check.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloserControlFSCC.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserControl {
        RecloserControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlValue>>(
                "controlValue",
                |m: &RecloserControl| { &m.controlValue },
                |m: &mut RecloserControl| { &mut m.controlValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::CheckConditions>>(
                "check",
                |m: &RecloserControl| { &m.check },
                |m: &mut RecloserControl| { &mut m.check },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserControlFSCC>>(
                "recloserControlFSCC",
                |m: &RecloserControl| { &m.recloserControlFSCC },
                |m: &mut RecloserControl| { &mut m.recloserControlFSCC },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserControl>(
                "RecloserControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserControl {
        static instance: ::protobuf::rt::LazyV2<RecloserControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserControl::new)
    }
}

impl ::protobuf::Clear for RecloserControl {
    fn clear(&mut self) {
        self.controlValue.clear();
        self.check.clear();
        self.recloserControlFSCC.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Recloser {
    // message fields
    conductingEquipment: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipment>,
    normalOpen: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Recloser {
    fn default() -> &'a Recloser {
        <Recloser as ::protobuf::Message>::default_instance()
    }
}

impl Recloser {
    pub fn new() -> Recloser {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipment conductingEquipment = 1;


    pub fn get_conductingEquipment(&self) -> &super::commonmodule::ConductingEquipment {
        self.conductingEquipment.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipment(&mut self) {
        self.conductingEquipment.clear();
    }

    pub fn has_conductingEquipment(&self) -> bool {
        self.conductingEquipment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipment(&mut self, v: super::commonmodule::ConductingEquipment) {
        self.conductingEquipment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipment(&mut self) -> &mut super::commonmodule::ConductingEquipment {
        if self.conductingEquipment.is_none() {
            self.conductingEquipment.set_default();
        }
        self.conductingEquipment.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipment(&mut self) -> super::commonmodule::ConductingEquipment {
        self.conductingEquipment.take().unwrap_or_else(|| super::commonmodule::ConductingEquipment::new())
    }

    // .google.protobuf.BoolValue normalOpen = 2;


    pub fn get_normalOpen(&self) -> &::protobuf::well_known_types::BoolValue {
        self.normalOpen.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_normalOpen(&mut self) {
        self.normalOpen.clear();
    }

    pub fn has_normalOpen(&self) -> bool {
        self.normalOpen.is_some()
    }

    // Param is passed by value, moved
    pub fn set_normalOpen(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.normalOpen = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_normalOpen(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.normalOpen.is_none() {
            self.normalOpen.set_default();
        }
        self.normalOpen.as_mut().unwrap()
    }

    // Take field
    pub fn take_normalOpen(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.normalOpen.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for Recloser {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipment {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.normalOpen {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipment)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.normalOpen)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.normalOpen.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.normalOpen.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Recloser {
        Recloser::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipment>>(
                "conductingEquipment",
                |m: &Recloser| { &m.conductingEquipment },
                |m: &mut Recloser| { &mut m.conductingEquipment },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "normalOpen",
                |m: &Recloser| { &m.normalOpen },
                |m: &mut Recloser| { &mut m.normalOpen },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Recloser>(
                "Recloser",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Recloser {
        static instance: ::protobuf::rt::LazyV2<Recloser> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Recloser::new)
    }
}

impl ::protobuf::Clear for Recloser {
    fn clear(&mut self) {
        self.conductingEquipment.clear();
        self.normalOpen.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Recloser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Recloser {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserControlProfile {
    // message fields
    controlMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ControlMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    recloser: ::protobuf::SingularPtrField<Recloser>,
    recloserControl: ::protobuf::SingularPtrField<RecloserControl>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserControlProfile {
    fn default() -> &'a RecloserControlProfile {
        <RecloserControlProfile as ::protobuf::Message>::default_instance()
    }
}

impl RecloserControlProfile {
    pub fn new() -> RecloserControlProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlMessageInfo controlMessageInfo = 1;


    pub fn get_controlMessageInfo(&self) -> &super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ControlMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlMessageInfo(&mut self) {
        self.controlMessageInfo.clear();
    }

    pub fn has_controlMessageInfo(&self) -> bool {
        self.controlMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlMessageInfo(&mut self, v: super::commonmodule::ControlMessageInfo) {
        self.controlMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlMessageInfo(&mut self) -> &mut super::commonmodule::ControlMessageInfo {
        if self.controlMessageInfo.is_none() {
            self.controlMessageInfo.set_default();
        }
        self.controlMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlMessageInfo(&mut self) -> super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.take().unwrap_or_else(|| super::commonmodule::ControlMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .reclosermodule.Recloser recloser = 3;


    pub fn get_recloser(&self) -> &Recloser {
        self.recloser.as_ref().unwrap_or_else(|| <Recloser as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloser(&mut self) {
        self.recloser.clear();
    }

    pub fn has_recloser(&self) -> bool {
        self.recloser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloser(&mut self, v: Recloser) {
        self.recloser = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloser(&mut self) -> &mut Recloser {
        if self.recloser.is_none() {
            self.recloser.set_default();
        }
        self.recloser.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloser(&mut self) -> Recloser {
        self.recloser.take().unwrap_or_else(|| Recloser::new())
    }

    // .reclosermodule.RecloserControl recloserControl = 4;


    pub fn get_recloserControl(&self) -> &RecloserControl {
        self.recloserControl.as_ref().unwrap_or_else(|| <RecloserControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloserControl(&mut self) {
        self.recloserControl.clear();
    }

    pub fn has_recloserControl(&self) -> bool {
        self.recloserControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloserControl(&mut self, v: RecloserControl) {
        self.recloserControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloserControl(&mut self) -> &mut RecloserControl {
        if self.recloserControl.is_none() {
            self.recloserControl.set_default();
        }
        self.recloserControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloserControl(&mut self) -> RecloserControl {
        self.recloserControl.take().unwrap_or_else(|| RecloserControl::new())
    }
}

impl ::protobuf::Message for RecloserControlProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.controlMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloser {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserControl {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloser)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloserControl)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloserControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloserControl.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserControlProfile {
        RecloserControlProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlMessageInfo>>(
                "controlMessageInfo",
                |m: &RecloserControlProfile| { &m.controlMessageInfo },
                |m: &mut RecloserControlProfile| { &mut m.controlMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RecloserControlProfile| { &m.ied },
                |m: &mut RecloserControlProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Recloser>>(
                "recloser",
                |m: &RecloserControlProfile| { &m.recloser },
                |m: &mut RecloserControlProfile| { &mut m.recloser },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserControl>>(
                "recloserControl",
                |m: &RecloserControlProfile| { &m.recloserControl },
                |m: &mut RecloserControlProfile| { &mut m.recloserControl },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserControlProfile>(
                "RecloserControlProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserControlProfile {
        static instance: ::protobuf::rt::LazyV2<RecloserControlProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserControlProfile::new)
    }
}

impl ::protobuf::Clear for RecloserControlProfile {
    fn clear(&mut self) {
        self.controlMessageInfo.clear();
        self.ied.clear();
        self.recloser.clear();
        self.recloserControl.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserControlProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserControlProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserDiscreteControlXCBR {
    // message fields
    logicalNodeForControl: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForControl>,
    Pos: ::protobuf::SingularPtrField<super::commonmodule::ControlDPC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserDiscreteControlXCBR {
    fn default() -> &'a RecloserDiscreteControlXCBR {
        <RecloserDiscreteControlXCBR as ::protobuf::Message>::default_instance()
    }
}

impl RecloserDiscreteControlXCBR {
    pub fn new() -> RecloserDiscreteControlXCBR {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1;


    pub fn get_logicalNodeForControl(&self) -> &super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForControl(&mut self) {
        self.logicalNodeForControl.clear();
    }

    pub fn has_logicalNodeForControl(&self) -> bool {
        self.logicalNodeForControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForControl(&mut self, v: super::commonmodule::LogicalNodeForControl) {
        self.logicalNodeForControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForControl(&mut self) -> &mut super::commonmodule::LogicalNodeForControl {
        if self.logicalNodeForControl.is_none() {
            self.logicalNodeForControl.set_default();
        }
        self.logicalNodeForControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForControl(&mut self) -> super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForControl::new())
    }

    // .commonmodule.ControlDPC Pos = 2;


    pub fn get_Pos(&self) -> &super::commonmodule::ControlDPC {
        self.Pos.as_ref().unwrap_or_else(|| <super::commonmodule::ControlDPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Pos(&mut self) {
        self.Pos.clear();
    }

    pub fn has_Pos(&self) -> bool {
        self.Pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Pos(&mut self, v: super::commonmodule::ControlDPC) {
        self.Pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Pos(&mut self) -> &mut super::commonmodule::ControlDPC {
        if self.Pos.is_none() {
            self.Pos.set_default();
        }
        self.Pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_Pos(&mut self) -> super::commonmodule::ControlDPC {
        self.Pos.take().unwrap_or_else(|| super::commonmodule::ControlDPC::new())
    }
}

impl ::protobuf::Message for RecloserDiscreteControlXCBR {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForControl)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserDiscreteControlXCBR {
        RecloserDiscreteControlXCBR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForControl>>(
                "logicalNodeForControl",
                |m: &RecloserDiscreteControlXCBR| { &m.logicalNodeForControl },
                |m: &mut RecloserDiscreteControlXCBR| { &mut m.logicalNodeForControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlDPC>>(
                "Pos",
                |m: &RecloserDiscreteControlXCBR| { &m.Pos },
                |m: &mut RecloserDiscreteControlXCBR| { &mut m.Pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserDiscreteControlXCBR>(
                "RecloserDiscreteControlXCBR",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserDiscreteControlXCBR {
        static instance: ::protobuf::rt::LazyV2<RecloserDiscreteControlXCBR> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserDiscreteControlXCBR::new)
    }
}

impl ::protobuf::Clear for RecloserDiscreteControlXCBR {
    fn clear(&mut self) {
        self.logicalNodeForControl.clear();
        self.Pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserDiscreteControlXCBR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserDiscreteControlXCBR {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserDiscreteControl {
    // message fields
    controlValue: ::protobuf::SingularPtrField<super::commonmodule::ControlValue>,
    check: ::protobuf::SingularPtrField<super::commonmodule::CheckConditions>,
    recloserDiscreteControlXCBR: ::protobuf::SingularPtrField<RecloserDiscreteControlXCBR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserDiscreteControl {
    fn default() -> &'a RecloserDiscreteControl {
        <RecloserDiscreteControl as ::protobuf::Message>::default_instance()
    }
}

impl RecloserDiscreteControl {
    pub fn new() -> RecloserDiscreteControl {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlValue controlValue = 1;


    pub fn get_controlValue(&self) -> &super::commonmodule::ControlValue {
        self.controlValue.as_ref().unwrap_or_else(|| <super::commonmodule::ControlValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlValue(&mut self) {
        self.controlValue.clear();
    }

    pub fn has_controlValue(&self) -> bool {
        self.controlValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlValue(&mut self, v: super::commonmodule::ControlValue) {
        self.controlValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlValue(&mut self) -> &mut super::commonmodule::ControlValue {
        if self.controlValue.is_none() {
            self.controlValue.set_default();
        }
        self.controlValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlValue(&mut self) -> super::commonmodule::ControlValue {
        self.controlValue.take().unwrap_or_else(|| super::commonmodule::ControlValue::new())
    }

    // .commonmodule.CheckConditions check = 2;


    pub fn get_check(&self) -> &super::commonmodule::CheckConditions {
        self.check.as_ref().unwrap_or_else(|| <super::commonmodule::CheckConditions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check(&mut self) {
        self.check.clear();
    }

    pub fn has_check(&self) -> bool {
        self.check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check(&mut self, v: super::commonmodule::CheckConditions) {
        self.check = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check(&mut self) -> &mut super::commonmodule::CheckConditions {
        if self.check.is_none() {
            self.check.set_default();
        }
        self.check.as_mut().unwrap()
    }

    // Take field
    pub fn take_check(&mut self) -> super::commonmodule::CheckConditions {
        self.check.take().unwrap_or_else(|| super::commonmodule::CheckConditions::new())
    }

    // .reclosermodule.RecloserDiscreteControlXCBR recloserDiscreteControlXCBR = 3;


    pub fn get_recloserDiscreteControlXCBR(&self) -> &RecloserDiscreteControlXCBR {
        self.recloserDiscreteControlXCBR.as_ref().unwrap_or_else(|| <RecloserDiscreteControlXCBR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloserDiscreteControlXCBR(&mut self) {
        self.recloserDiscreteControlXCBR.clear();
    }

    pub fn has_recloserDiscreteControlXCBR(&self) -> bool {
        self.recloserDiscreteControlXCBR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloserDiscreteControlXCBR(&mut self, v: RecloserDiscreteControlXCBR) {
        self.recloserDiscreteControlXCBR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloserDiscreteControlXCBR(&mut self) -> &mut RecloserDiscreteControlXCBR {
        if self.recloserDiscreteControlXCBR.is_none() {
            self.recloserDiscreteControlXCBR.set_default();
        }
        self.recloserDiscreteControlXCBR.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloserDiscreteControlXCBR(&mut self) -> RecloserDiscreteControlXCBR {
        self.recloserDiscreteControlXCBR.take().unwrap_or_else(|| RecloserDiscreteControlXCBR::new())
    }
}

impl ::protobuf::Message for RecloserDiscreteControl {
    fn is_initialized(&self) -> bool {
        for v in &self.controlValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserDiscreteControlXCBR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloserDiscreteControlXCBR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloserDiscreteControlXCBR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.check.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloserDiscreteControlXCBR.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserDiscreteControl {
        RecloserDiscreteControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlValue>>(
                "controlValue",
                |m: &RecloserDiscreteControl| { &m.controlValue },
                |m: &mut RecloserDiscreteControl| { &mut m.controlValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::CheckConditions>>(
                "check",
                |m: &RecloserDiscreteControl| { &m.check },
                |m: &mut RecloserDiscreteControl| { &mut m.check },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserDiscreteControlXCBR>>(
                "recloserDiscreteControlXCBR",
                |m: &RecloserDiscreteControl| { &m.recloserDiscreteControlXCBR },
                |m: &mut RecloserDiscreteControl| { &mut m.recloserDiscreteControlXCBR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserDiscreteControl>(
                "RecloserDiscreteControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserDiscreteControl {
        static instance: ::protobuf::rt::LazyV2<RecloserDiscreteControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserDiscreteControl::new)
    }
}

impl ::protobuf::Clear for RecloserDiscreteControl {
    fn clear(&mut self) {
        self.controlValue.clear();
        self.check.clear();
        self.recloserDiscreteControlXCBR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserDiscreteControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserDiscreteControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserDiscreteControlProfile {
    // message fields
    controlMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ControlMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    recloser: ::protobuf::SingularPtrField<Recloser>,
    recloserDiscreteControl: ::protobuf::SingularPtrField<RecloserDiscreteControl>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserDiscreteControlProfile {
    fn default() -> &'a RecloserDiscreteControlProfile {
        <RecloserDiscreteControlProfile as ::protobuf::Message>::default_instance()
    }
}

impl RecloserDiscreteControlProfile {
    pub fn new() -> RecloserDiscreteControlProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlMessageInfo controlMessageInfo = 1;


    pub fn get_controlMessageInfo(&self) -> &super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ControlMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlMessageInfo(&mut self) {
        self.controlMessageInfo.clear();
    }

    pub fn has_controlMessageInfo(&self) -> bool {
        self.controlMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlMessageInfo(&mut self, v: super::commonmodule::ControlMessageInfo) {
        self.controlMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlMessageInfo(&mut self) -> &mut super::commonmodule::ControlMessageInfo {
        if self.controlMessageInfo.is_none() {
            self.controlMessageInfo.set_default();
        }
        self.controlMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlMessageInfo(&mut self) -> super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.take().unwrap_or_else(|| super::commonmodule::ControlMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .reclosermodule.Recloser recloser = 3;


    pub fn get_recloser(&self) -> &Recloser {
        self.recloser.as_ref().unwrap_or_else(|| <Recloser as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloser(&mut self) {
        self.recloser.clear();
    }

    pub fn has_recloser(&self) -> bool {
        self.recloser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloser(&mut self, v: Recloser) {
        self.recloser = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloser(&mut self) -> &mut Recloser {
        if self.recloser.is_none() {
            self.recloser.set_default();
        }
        self.recloser.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloser(&mut self) -> Recloser {
        self.recloser.take().unwrap_or_else(|| Recloser::new())
    }

    // .reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 4;


    pub fn get_recloserDiscreteControl(&self) -> &RecloserDiscreteControl {
        self.recloserDiscreteControl.as_ref().unwrap_or_else(|| <RecloserDiscreteControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloserDiscreteControl(&mut self) {
        self.recloserDiscreteControl.clear();
    }

    pub fn has_recloserDiscreteControl(&self) -> bool {
        self.recloserDiscreteControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloserDiscreteControl(&mut self, v: RecloserDiscreteControl) {
        self.recloserDiscreteControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloserDiscreteControl(&mut self) -> &mut RecloserDiscreteControl {
        if self.recloserDiscreteControl.is_none() {
            self.recloserDiscreteControl.set_default();
        }
        self.recloserDiscreteControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloserDiscreteControl(&mut self) -> RecloserDiscreteControl {
        self.recloserDiscreteControl.take().unwrap_or_else(|| RecloserDiscreteControl::new())
    }
}

impl ::protobuf::Message for RecloserDiscreteControlProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.controlMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloser {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserDiscreteControl {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloser)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloserDiscreteControl)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloserDiscreteControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloserDiscreteControl.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserDiscreteControlProfile {
        RecloserDiscreteControlProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlMessageInfo>>(
                "controlMessageInfo",
                |m: &RecloserDiscreteControlProfile| { &m.controlMessageInfo },
                |m: &mut RecloserDiscreteControlProfile| { &mut m.controlMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RecloserDiscreteControlProfile| { &m.ied },
                |m: &mut RecloserDiscreteControlProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Recloser>>(
                "recloser",
                |m: &RecloserDiscreteControlProfile| { &m.recloser },
                |m: &mut RecloserDiscreteControlProfile| { &mut m.recloser },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserDiscreteControl>>(
                "recloserDiscreteControl",
                |m: &RecloserDiscreteControlProfile| { &m.recloserDiscreteControl },
                |m: &mut RecloserDiscreteControlProfile| { &mut m.recloserDiscreteControl },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserDiscreteControlProfile>(
                "RecloserDiscreteControlProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserDiscreteControlProfile {
        static instance: ::protobuf::rt::LazyV2<RecloserDiscreteControlProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserDiscreteControlProfile::new)
    }
}

impl ::protobuf::Clear for RecloserDiscreteControlProfile {
    fn clear(&mut self) {
        self.controlMessageInfo.clear();
        self.ied.clear();
        self.recloser.clear();
        self.recloserDiscreteControl.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserDiscreteControlProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserDiscreteControlProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserEvent {
    // message fields
    eventValue: ::protobuf::SingularPtrField<super::commonmodule::EventValue>,
    statusAndEventXCBR: ::protobuf::SingularPtrField<super::commonmodule::StatusAndEventXCBR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserEvent {
    fn default() -> &'a RecloserEvent {
        <RecloserEvent as ::protobuf::Message>::default_instance()
    }
}

impl RecloserEvent {
    pub fn new() -> RecloserEvent {
        ::std::default::Default::default()
    }

    // .commonmodule.EventValue eventValue = 1;


    pub fn get_eventValue(&self) -> &super::commonmodule::EventValue {
        self.eventValue.as_ref().unwrap_or_else(|| <super::commonmodule::EventValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventValue(&mut self) {
        self.eventValue.clear();
    }

    pub fn has_eventValue(&self) -> bool {
        self.eventValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventValue(&mut self, v: super::commonmodule::EventValue) {
        self.eventValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventValue(&mut self) -> &mut super::commonmodule::EventValue {
        if self.eventValue.is_none() {
            self.eventValue.set_default();
        }
        self.eventValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventValue(&mut self) -> super::commonmodule::EventValue {
        self.eventValue.take().unwrap_or_else(|| super::commonmodule::EventValue::new())
    }

    // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;


    pub fn get_statusAndEventXCBR(&self) -> &super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.as_ref().unwrap_or_else(|| <super::commonmodule::StatusAndEventXCBR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusAndEventXCBR(&mut self) {
        self.statusAndEventXCBR.clear();
    }

    pub fn has_statusAndEventXCBR(&self) -> bool {
        self.statusAndEventXCBR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusAndEventXCBR(&mut self, v: super::commonmodule::StatusAndEventXCBR) {
        self.statusAndEventXCBR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusAndEventXCBR(&mut self) -> &mut super::commonmodule::StatusAndEventXCBR {
        if self.statusAndEventXCBR.is_none() {
            self.statusAndEventXCBR.set_default();
        }
        self.statusAndEventXCBR.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusAndEventXCBR(&mut self) -> super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.take().unwrap_or_else(|| super::commonmodule::StatusAndEventXCBR::new())
    }
}

impl ::protobuf::Message for RecloserEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.eventValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.statusAndEventXCBR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusAndEventXCBR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserEvent {
        RecloserEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventValue>>(
                "eventValue",
                |m: &RecloserEvent| { &m.eventValue },
                |m: &mut RecloserEvent| { &mut m.eventValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusAndEventXCBR>>(
                "statusAndEventXCBR",
                |m: &RecloserEvent| { &m.statusAndEventXCBR },
                |m: &mut RecloserEvent| { &mut m.statusAndEventXCBR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserEvent>(
                "RecloserEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserEvent {
        static instance: ::protobuf::rt::LazyV2<RecloserEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserEvent::new)
    }
}

impl ::protobuf::Clear for RecloserEvent {
    fn clear(&mut self) {
        self.eventValue.clear();
        self.statusAndEventXCBR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserEventProfile {
    // message fields
    eventMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::EventMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    recloser: ::protobuf::SingularPtrField<Recloser>,
    recloserEvent: ::protobuf::SingularPtrField<RecloserEvent>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserEventProfile {
    fn default() -> &'a RecloserEventProfile {
        <RecloserEventProfile as ::protobuf::Message>::default_instance()
    }
}

impl RecloserEventProfile {
    pub fn new() -> RecloserEventProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.EventMessageInfo eventMessageInfo = 1;


    pub fn get_eventMessageInfo(&self) -> &super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::EventMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventMessageInfo(&mut self) {
        self.eventMessageInfo.clear();
    }

    pub fn has_eventMessageInfo(&self) -> bool {
        self.eventMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventMessageInfo(&mut self, v: super::commonmodule::EventMessageInfo) {
        self.eventMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventMessageInfo(&mut self) -> &mut super::commonmodule::EventMessageInfo {
        if self.eventMessageInfo.is_none() {
            self.eventMessageInfo.set_default();
        }
        self.eventMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventMessageInfo(&mut self) -> super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.take().unwrap_or_else(|| super::commonmodule::EventMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .reclosermodule.Recloser recloser = 3;


    pub fn get_recloser(&self) -> &Recloser {
        self.recloser.as_ref().unwrap_or_else(|| <Recloser as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloser(&mut self) {
        self.recloser.clear();
    }

    pub fn has_recloser(&self) -> bool {
        self.recloser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloser(&mut self, v: Recloser) {
        self.recloser = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloser(&mut self) -> &mut Recloser {
        if self.recloser.is_none() {
            self.recloser.set_default();
        }
        self.recloser.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloser(&mut self) -> Recloser {
        self.recloser.take().unwrap_or_else(|| Recloser::new())
    }

    // .reclosermodule.RecloserEvent recloserEvent = 4;


    pub fn get_recloserEvent(&self) -> &RecloserEvent {
        self.recloserEvent.as_ref().unwrap_or_else(|| <RecloserEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloserEvent(&mut self) {
        self.recloserEvent.clear();
    }

    pub fn has_recloserEvent(&self) -> bool {
        self.recloserEvent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloserEvent(&mut self, v: RecloserEvent) {
        self.recloserEvent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloserEvent(&mut self) -> &mut RecloserEvent {
        if self.recloserEvent.is_none() {
            self.recloserEvent.set_default();
        }
        self.recloserEvent.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloserEvent(&mut self) -> RecloserEvent {
        self.recloserEvent.take().unwrap_or_else(|| RecloserEvent::new())
    }
}

impl ::protobuf::Message for RecloserEventProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.eventMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloser {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserEvent {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloser)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloserEvent)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloserEvent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloserEvent.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserEventProfile {
        RecloserEventProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventMessageInfo>>(
                "eventMessageInfo",
                |m: &RecloserEventProfile| { &m.eventMessageInfo },
                |m: &mut RecloserEventProfile| { &mut m.eventMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RecloserEventProfile| { &m.ied },
                |m: &mut RecloserEventProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Recloser>>(
                "recloser",
                |m: &RecloserEventProfile| { &m.recloser },
                |m: &mut RecloserEventProfile| { &mut m.recloser },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserEvent>>(
                "recloserEvent",
                |m: &RecloserEventProfile| { &m.recloserEvent },
                |m: &mut RecloserEventProfile| { &mut m.recloserEvent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserEventProfile>(
                "RecloserEventProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserEventProfile {
        static instance: ::protobuf::rt::LazyV2<RecloserEventProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserEventProfile::new)
    }
}

impl ::protobuf::Clear for RecloserEventProfile {
    fn clear(&mut self) {
        self.eventMessageInfo.clear();
        self.ied.clear();
        self.recloser.clear();
        self.recloserEvent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserEventProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserEventProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserReading {
    // message fields
    conductingEquipmentTerminalReading: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipmentTerminalReading>,
    diffReadingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    phaseMMTN: ::protobuf::SingularPtrField<super::commonmodule::PhaseMMTN>,
    readingMMTR: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMTR>,
    readingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserReading {
    fn default() -> &'a RecloserReading {
        <RecloserReading as ::protobuf::Message>::default_instance()
    }
}

impl RecloserReading {
    pub fn new() -> RecloserReading {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1;


    pub fn get_conductingEquipmentTerminalReading(&self) -> &super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipmentTerminalReading as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipmentTerminalReading(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
    }

    pub fn has_conductingEquipmentTerminalReading(&self) -> bool {
        self.conductingEquipmentTerminalReading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipmentTerminalReading(&mut self, v: super::commonmodule::ConductingEquipmentTerminalReading) {
        self.conductingEquipmentTerminalReading = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipmentTerminalReading(&mut self) -> &mut super::commonmodule::ConductingEquipmentTerminalReading {
        if self.conductingEquipmentTerminalReading.is_none() {
            self.conductingEquipmentTerminalReading.set_default();
        }
        self.conductingEquipmentTerminalReading.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipmentTerminalReading(&mut self) -> super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.take().unwrap_or_else(|| super::commonmodule::ConductingEquipmentTerminalReading::new())
    }

    // .commonmodule.ReadingMMXU diffReadingMMXU = 2;


    pub fn get_diffReadingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.diffReadingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_diffReadingMMXU(&mut self) {
        self.diffReadingMMXU.clear();
    }

    pub fn has_diffReadingMMXU(&self) -> bool {
        self.diffReadingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_diffReadingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.diffReadingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diffReadingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.diffReadingMMXU.is_none() {
            self.diffReadingMMXU.set_default();
        }
        self.diffReadingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_diffReadingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.diffReadingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }

    // .commonmodule.PhaseMMTN phaseMMTN = 3;


    pub fn get_phaseMMTN(&self) -> &super::commonmodule::PhaseMMTN {
        self.phaseMMTN.as_ref().unwrap_or_else(|| <super::commonmodule::PhaseMMTN as ::protobuf::Message>::default_instance())
    }
    pub fn clear_phaseMMTN(&mut self) {
        self.phaseMMTN.clear();
    }

    pub fn has_phaseMMTN(&self) -> bool {
        self.phaseMMTN.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phaseMMTN(&mut self, v: super::commonmodule::PhaseMMTN) {
        self.phaseMMTN = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phaseMMTN(&mut self) -> &mut super::commonmodule::PhaseMMTN {
        if self.phaseMMTN.is_none() {
            self.phaseMMTN.set_default();
        }
        self.phaseMMTN.as_mut().unwrap()
    }

    // Take field
    pub fn take_phaseMMTN(&mut self) -> super::commonmodule::PhaseMMTN {
        self.phaseMMTN.take().unwrap_or_else(|| super::commonmodule::PhaseMMTN::new())
    }

    // .commonmodule.ReadingMMTR readingMMTR = 4;


    pub fn get_readingMMTR(&self) -> &super::commonmodule::ReadingMMTR {
        self.readingMMTR.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMTR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMTR(&mut self) {
        self.readingMMTR.clear();
    }

    pub fn has_readingMMTR(&self) -> bool {
        self.readingMMTR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMTR(&mut self, v: super::commonmodule::ReadingMMTR) {
        self.readingMMTR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMTR(&mut self) -> &mut super::commonmodule::ReadingMMTR {
        if self.readingMMTR.is_none() {
            self.readingMMTR.set_default();
        }
        self.readingMMTR.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMTR(&mut self) -> super::commonmodule::ReadingMMTR {
        self.readingMMTR.take().unwrap_or_else(|| super::commonmodule::ReadingMMTR::new())
    }

    // .commonmodule.ReadingMMXU readingMMXU = 5;


    pub fn get_readingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.readingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMXU(&mut self) {
        self.readingMMXU.clear();
    }

    pub fn has_readingMMXU(&self) -> bool {
        self.readingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.readingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.readingMMXU.is_none() {
            self.readingMMXU.set_default();
        }
        self.readingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.readingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }
}

impl ::protobuf::Message for RecloserReading {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipmentTerminalReading {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.diffReadingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.phaseMMTN {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMTR {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipmentTerminalReading)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.diffReadingMMXU)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.phaseMMTN)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMTR)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMXU)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.diffReadingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.diffReadingMMXU.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserReading {
        RecloserReading::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipmentTerminalReading>>(
                "conductingEquipmentTerminalReading",
                |m: &RecloserReading| { &m.conductingEquipmentTerminalReading },
                |m: &mut RecloserReading| { &mut m.conductingEquipmentTerminalReading },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "diffReadingMMXU",
                |m: &RecloserReading| { &m.diffReadingMMXU },
                |m: &mut RecloserReading| { &mut m.diffReadingMMXU },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::PhaseMMTN>>(
                "phaseMMTN",
                |m: &RecloserReading| { &m.phaseMMTN },
                |m: &mut RecloserReading| { &mut m.phaseMMTN },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMTR>>(
                "readingMMTR",
                |m: &RecloserReading| { &m.readingMMTR },
                |m: &mut RecloserReading| { &mut m.readingMMTR },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "readingMMXU",
                |m: &RecloserReading| { &m.readingMMXU },
                |m: &mut RecloserReading| { &mut m.readingMMXU },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserReading>(
                "RecloserReading",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserReading {
        static instance: ::protobuf::rt::LazyV2<RecloserReading> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserReading::new)
    }
}

impl ::protobuf::Clear for RecloserReading {
    fn clear(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
        self.diffReadingMMXU.clear();
        self.phaseMMTN.clear();
        self.readingMMTR.clear();
        self.readingMMXU.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserReading {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserReading {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserReadingProfile {
    // message fields
    readingMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ReadingMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    recloser: ::protobuf::SingularPtrField<Recloser>,
    recloserReading: ::protobuf::RepeatedField<RecloserReading>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserReadingProfile {
    fn default() -> &'a RecloserReadingProfile {
        <RecloserReadingProfile as ::protobuf::Message>::default_instance()
    }
}

impl RecloserReadingProfile {
    pub fn new() -> RecloserReadingProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1;


    pub fn get_readingMessageInfo(&self) -> &super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMessageInfo(&mut self) {
        self.readingMessageInfo.clear();
    }

    pub fn has_readingMessageInfo(&self) -> bool {
        self.readingMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMessageInfo(&mut self, v: super::commonmodule::ReadingMessageInfo) {
        self.readingMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMessageInfo(&mut self) -> &mut super::commonmodule::ReadingMessageInfo {
        if self.readingMessageInfo.is_none() {
            self.readingMessageInfo.set_default();
        }
        self.readingMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMessageInfo(&mut self) -> super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.take().unwrap_or_else(|| super::commonmodule::ReadingMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .reclosermodule.Recloser recloser = 3;


    pub fn get_recloser(&self) -> &Recloser {
        self.recloser.as_ref().unwrap_or_else(|| <Recloser as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloser(&mut self) {
        self.recloser.clear();
    }

    pub fn has_recloser(&self) -> bool {
        self.recloser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloser(&mut self, v: Recloser) {
        self.recloser = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloser(&mut self) -> &mut Recloser {
        if self.recloser.is_none() {
            self.recloser.set_default();
        }
        self.recloser.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloser(&mut self) -> Recloser {
        self.recloser.take().unwrap_or_else(|| Recloser::new())
    }

    // repeated .reclosermodule.RecloserReading recloserReading = 4;


    pub fn get_recloserReading(&self) -> &[RecloserReading] {
        &self.recloserReading
    }
    pub fn clear_recloserReading(&mut self) {
        self.recloserReading.clear();
    }

    // Param is passed by value, moved
    pub fn set_recloserReading(&mut self, v: ::protobuf::RepeatedField<RecloserReading>) {
        self.recloserReading = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recloserReading(&mut self) -> &mut ::protobuf::RepeatedField<RecloserReading> {
        &mut self.recloserReading
    }

    // Take field
    pub fn take_recloserReading(&mut self) -> ::protobuf::RepeatedField<RecloserReading> {
        ::std::mem::replace(&mut self.recloserReading, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RecloserReadingProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.readingMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloser {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserReading {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloser)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.recloserReading)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.recloserReading {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.recloserReading {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserReadingProfile {
        RecloserReadingProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMessageInfo>>(
                "readingMessageInfo",
                |m: &RecloserReadingProfile| { &m.readingMessageInfo },
                |m: &mut RecloserReadingProfile| { &mut m.readingMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RecloserReadingProfile| { &m.ied },
                |m: &mut RecloserReadingProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Recloser>>(
                "recloser",
                |m: &RecloserReadingProfile| { &m.recloser },
                |m: &mut RecloserReadingProfile| { &mut m.recloser },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserReading>>(
                "recloserReading",
                |m: &RecloserReadingProfile| { &m.recloserReading },
                |m: &mut RecloserReadingProfile| { &mut m.recloserReading },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserReadingProfile>(
                "RecloserReadingProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserReadingProfile {
        static instance: ::protobuf::rt::LazyV2<RecloserReadingProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserReadingProfile::new)
    }
}

impl ::protobuf::Clear for RecloserReadingProfile {
    fn clear(&mut self) {
        self.readingMessageInfo.clear();
        self.ied.clear();
        self.recloser.clear();
        self.recloserReading.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserReadingProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserReadingProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserStatus {
    // message fields
    statusValue: ::protobuf::SingularPtrField<super::commonmodule::StatusValue>,
    statusAndEventXCBR: ::protobuf::SingularPtrField<super::commonmodule::StatusAndEventXCBR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserStatus {
    fn default() -> &'a RecloserStatus {
        <RecloserStatus as ::protobuf::Message>::default_instance()
    }
}

impl RecloserStatus {
    pub fn new() -> RecloserStatus {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusValue statusValue = 1;


    pub fn get_statusValue(&self) -> &super::commonmodule::StatusValue {
        self.statusValue.as_ref().unwrap_or_else(|| <super::commonmodule::StatusValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusValue(&mut self) {
        self.statusValue.clear();
    }

    pub fn has_statusValue(&self) -> bool {
        self.statusValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusValue(&mut self, v: super::commonmodule::StatusValue) {
        self.statusValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusValue(&mut self) -> &mut super::commonmodule::StatusValue {
        if self.statusValue.is_none() {
            self.statusValue.set_default();
        }
        self.statusValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusValue(&mut self) -> super::commonmodule::StatusValue {
        self.statusValue.take().unwrap_or_else(|| super::commonmodule::StatusValue::new())
    }

    // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;


    pub fn get_statusAndEventXCBR(&self) -> &super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.as_ref().unwrap_or_else(|| <super::commonmodule::StatusAndEventXCBR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusAndEventXCBR(&mut self) {
        self.statusAndEventXCBR.clear();
    }

    pub fn has_statusAndEventXCBR(&self) -> bool {
        self.statusAndEventXCBR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusAndEventXCBR(&mut self, v: super::commonmodule::StatusAndEventXCBR) {
        self.statusAndEventXCBR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusAndEventXCBR(&mut self) -> &mut super::commonmodule::StatusAndEventXCBR {
        if self.statusAndEventXCBR.is_none() {
            self.statusAndEventXCBR.set_default();
        }
        self.statusAndEventXCBR.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusAndEventXCBR(&mut self) -> super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.take().unwrap_or_else(|| super::commonmodule::StatusAndEventXCBR::new())
    }
}

impl ::protobuf::Message for RecloserStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.statusValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.statusAndEventXCBR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusAndEventXCBR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserStatus {
        RecloserStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusValue>>(
                "statusValue",
                |m: &RecloserStatus| { &m.statusValue },
                |m: &mut RecloserStatus| { &mut m.statusValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusAndEventXCBR>>(
                "statusAndEventXCBR",
                |m: &RecloserStatus| { &m.statusAndEventXCBR },
                |m: &mut RecloserStatus| { &mut m.statusAndEventXCBR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserStatus>(
                "RecloserStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserStatus {
        static instance: ::protobuf::rt::LazyV2<RecloserStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserStatus::new)
    }
}

impl ::protobuf::Clear for RecloserStatus {
    fn clear(&mut self) {
        self.statusValue.clear();
        self.statusAndEventXCBR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RecloserStatusProfile {
    // message fields
    statusMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::StatusMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    recloser: ::protobuf::SingularPtrField<Recloser>,
    recloserStatus: ::protobuf::SingularPtrField<RecloserStatus>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecloserStatusProfile {
    fn default() -> &'a RecloserStatusProfile {
        <RecloserStatusProfile as ::protobuf::Message>::default_instance()
    }
}

impl RecloserStatusProfile {
    pub fn new() -> RecloserStatusProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusMessageInfo statusMessageInfo = 1;


    pub fn get_statusMessageInfo(&self) -> &super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::StatusMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusMessageInfo(&mut self) {
        self.statusMessageInfo.clear();
    }

    pub fn has_statusMessageInfo(&self) -> bool {
        self.statusMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusMessageInfo(&mut self, v: super::commonmodule::StatusMessageInfo) {
        self.statusMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusMessageInfo(&mut self) -> &mut super::commonmodule::StatusMessageInfo {
        if self.statusMessageInfo.is_none() {
            self.statusMessageInfo.set_default();
        }
        self.statusMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusMessageInfo(&mut self) -> super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.take().unwrap_or_else(|| super::commonmodule::StatusMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .reclosermodule.Recloser recloser = 3;


    pub fn get_recloser(&self) -> &Recloser {
        self.recloser.as_ref().unwrap_or_else(|| <Recloser as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloser(&mut self) {
        self.recloser.clear();
    }

    pub fn has_recloser(&self) -> bool {
        self.recloser.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloser(&mut self, v: Recloser) {
        self.recloser = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloser(&mut self) -> &mut Recloser {
        if self.recloser.is_none() {
            self.recloser.set_default();
        }
        self.recloser.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloser(&mut self) -> Recloser {
        self.recloser.take().unwrap_or_else(|| Recloser::new())
    }

    // .reclosermodule.RecloserStatus recloserStatus = 4;


    pub fn get_recloserStatus(&self) -> &RecloserStatus {
        self.recloserStatus.as_ref().unwrap_or_else(|| <RecloserStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recloserStatus(&mut self) {
        self.recloserStatus.clear();
    }

    pub fn has_recloserStatus(&self) -> bool {
        self.recloserStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recloserStatus(&mut self, v: RecloserStatus) {
        self.recloserStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recloserStatus(&mut self) -> &mut RecloserStatus {
        if self.recloserStatus.is_none() {
            self.recloserStatus.set_default();
        }
        self.recloserStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_recloserStatus(&mut self) -> RecloserStatus {
        self.recloserStatus.take().unwrap_or_else(|| RecloserStatus::new())
    }
}

impl ::protobuf::Message for RecloserStatusProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.statusMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloser {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recloserStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloser)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recloserStatus)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recloserStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloser.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recloserStatus.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecloserStatusProfile {
        RecloserStatusProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusMessageInfo>>(
                "statusMessageInfo",
                |m: &RecloserStatusProfile| { &m.statusMessageInfo },
                |m: &mut RecloserStatusProfile| { &mut m.statusMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RecloserStatusProfile| { &m.ied },
                |m: &mut RecloserStatusProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Recloser>>(
                "recloser",
                |m: &RecloserStatusProfile| { &m.recloser },
                |m: &mut RecloserStatusProfile| { &mut m.recloser },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RecloserStatus>>(
                "recloserStatus",
                |m: &RecloserStatusProfile| { &m.recloserStatus },
                |m: &mut RecloserStatusProfile| { &mut m.recloserStatus },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecloserStatusProfile>(
                "RecloserStatusProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecloserStatusProfile {
        static instance: ::protobuf::rt::LazyV2<RecloserStatusProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecloserStatusProfile::new)
    }
}

impl ::protobuf::Clear for RecloserStatusProfile {
    fn clear(&mut self) {
        self.statusMessageInfo.clear();
        self.ied.clear();
        self.recloser.clear();
        self.recloserStatus.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecloserStatusProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecloserStatusProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#reclosermodule/reclosermodule.proto\x12\x0ereclosermodule\"\xe1\x01\n\
    \x13RecloserControlFSCC\x12_\n\x15logicalNodeForControl\x18\x01\x20\x01(\
    \x0b2#.commonmodule.LogicalNodeForControlR\x15logicalNodeForControlB\x04\
    \x80\xb5\x18\x01\x12g\n\x19switchControlScheduleFSCH\x18\x02\x20\x01(\
    \x0b2'.commonmodule.SwitchControlScheduleFSCHR\x19switchControlScheduleF\
    SCHB\0:\0\"\xf1\x01\n\x0fRecloserControl\x12D\n\x0ccontrolValue\x18\x01\
    \x20\x01(\x0b2\x1a.commonmodule.ControlValueR\x0ccontrolValueB\x04\x80\
    \xb5\x18\x01\x125\n\x05check\x18\x02\x20\x01(\x0b2\x1d.commonmodule.Chec\
    kConditionsR\x05checkB\0\x12_\n\x13recloserControlFSCC\x18\x03\x20\x01(\
    \x0b2#.reclosermodule.RecloserControlFSCCR\x13recloserControlFSCCB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\xa5\x01\n\x08Recloser\x12Y\n\x13co\
    nductingEquipment\x18\x01\x20\x01(\x0b2!.commonmodule.ConductingEquipmen\
    tR\x13conductingEquipmentB\x04\x80\xb5\x18\x01\x12<\n\nnormalOpen\x18\
    \x02\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\nnormalOpenB\0:\0\"\
    \xba\x02\n\x16RecloserControlProfile\x12V\n\x12controlMessageInfo\x18\
    \x01\x20\x01(\x0b2\x20.commonmodule.ControlMessageInfoR\x12controlMessag\
    eInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commo\
    nmodule.IEDR\x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12>\n\x08reclo\
    ser\x18\x03\x20\x01(\x0b2\x18.reclosermodule.RecloserR\x08recloserB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01\x12S\n\x0frecloserControl\x18\x04\x20\
    \x01(\x0b2\x1f.reclosermodule.RecloserControlR\x0frecloserControlB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\xae\x01\n\x1bRec\
    loserDiscreteControlXCBR\x12_\n\x15logicalNodeForControl\x18\x01\x20\x01\
    (\x0b2#.commonmodule.LogicalNodeForControlR\x15logicalNodeForControlB\
    \x04\x80\xb5\x18\x01\x12,\n\x03Pos\x18\x02\x20\x01(\x0b2\x18.commonmodul\
    e.ControlDPCR\x03PosB\0:\0\"\x91\x02\n\x17RecloserDiscreteControl\x12D\n\
    \x0ccontrolValue\x18\x01\x20\x01(\x0b2\x1a.commonmodule.ControlValueR\
    \x0ccontrolValueB\x04\x80\xb5\x18\x01\x125\n\x05check\x18\x02\x20\x01(\
    \x0b2\x1d.commonmodule.CheckConditionsR\x05checkB\0\x12w\n\x1brecloserDi\
    screteControlXCBR\x18\x03\x20\x01(\x0b2+.reclosermodule.RecloserDiscrete\
    ControlXCBRR\x1brecloserDiscreteControlXCBRB\x08\x90\xb5\x18\x01\x88\xb5\
    \x18\x01:\0\"\xda\x02\n\x1eRecloserDiscreteControlProfile\x12V\n\x12cont\
    rolMessageInfo\x18\x01\x20\x01(\x0b2\x20.commonmodule.ControlMessageInfo\
    R\x12controlMessageInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\
    \x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\
    \x01\x12>\n\x08recloser\x18\x03\x20\x01(\x0b2\x18.reclosermodule.Reclose\
    rR\x08recloserB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12k\n\x17recloserDi\
    screteControl\x18\x04\x20\x01(\x0b2'.reclosermodule.RecloserDiscreteCont\
    rolR\x17recloserDiscreteControlB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\
    \x04\xc0\xf3\x18\x01\"\xad\x01\n\rRecloserEvent\x12>\n\neventValue\x18\
    \x01\x20\x01(\x0b2\x18.commonmodule.EventValueR\neventValueB\x04\x80\xb5\
    \x18\x01\x12Z\n\x12statusAndEventXCBR\x18\x02\x20\x01(\x0b2\x20.commonmo\
    dule.StatusAndEventXCBRR\x12statusAndEventXCBRB\x08\x90\xb5\x18\x01\x88\
    \xb5\x18\x01:\0\"\xac\x02\n\x14RecloserEventProfile\x12P\n\x10eventMessa\
    geInfo\x18\x01\x20\x01(\x0b2\x1e.commonmodule.EventMessageInfoR\x10event\
    MessageInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11\
    .commonmodule.IEDR\x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12>\n\
    \x08recloser\x18\x03\x20\x01(\x0b2\x18.reclosermodule.RecloserR\x08reclo\
    serB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12M\n\rrecloserEvent\x18\x04\
    \x20\x01(\x0b2\x1d.reclosermodule.RecloserEventR\rrecloserEventB\x08\x88\
    \xb5\x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\x9a\x03\n\x0fReclose\
    rReading\x12\x86\x01\n\"conductingEquipmentTerminalReading\x18\x01\x20\
    \x01(\x0b20.commonmodule.ConductingEquipmentTerminalReadingR\"conducting\
    EquipmentTerminalReadingB\x04\x80\xb5\x18\x01\x12E\n\x0fdiffReadingMMXU\
    \x18\x02\x20\x01(\x0b2\x19.commonmodule.ReadingMMXUR\x0fdiffReadingMMXUB\
    \0\x127\n\tphaseMMTN\x18\x03\x20\x01(\x0b2\x17.commonmodule.PhaseMMTNR\t\
    phaseMMTNB\0\x12=\n\x0breadingMMTR\x18\x04\x20\x01(\x0b2\x19.commonmodul\
    e.ReadingMMTRR\x0breadingMMTRB\0\x12=\n\x0breadingMMXU\x18\x05\x20\x01(\
    \x0b2\x19.commonmodule.ReadingMMXUR\x0breadingMMXUB\0:\0\"\xbe\x02\n\x16\
    RecloserReadingProfile\x12V\n\x12readingMessageInfo\x18\x01\x20\x01(\x0b\
    2\x20.commonmodule.ReadingMessageInfoR\x12readingMessageInfoB\x04\x80\
    \xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\
    \x03iedB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12>\n\x08recloser\x18\x03\
    \x20\x01(\x0b2\x18.reclosermodule.RecloserR\x08recloserB\x08\x90\xb5\x18\
    \x01\x88\xb5\x18\x01\x12W\n\x0frecloserReading\x18\x04\x20\x03(\x0b2\x1f\
    .reclosermodule.RecloserReadingR\x0frecloserReadingB\x0c\x88\xb5\x18\x01\
    \x90\xb5\x18\x01\x98\xb5\x18\x02:\x04\xc0\xf3\x18\x01\"\xb1\x01\n\x0eRec\
    loserStatus\x12A\n\x0bstatusValue\x18\x01\x20\x01(\x0b2\x19.commonmodule\
    .StatusValueR\x0bstatusValueB\x04\x80\xb5\x18\x01\x12Z\n\x12statusAndEve\
    ntXCBR\x18\x02\x20\x01(\x0b2\x20.commonmodule.StatusAndEventXCBRR\x12sta\
    tusAndEventXCBRB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\xb3\x02\n\x15R\
    ecloserStatusProfile\x12S\n\x11statusMessageInfo\x18\x01\x20\x01(\x0b2\
    \x1f.commonmodule.StatusMessageInfoR\x11statusMessageInfoB\x04\x80\xb5\
    \x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03ie\
    dB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12>\n\x08recloser\x18\x03\x20\
    \x01(\x0b2\x18.reclosermodule.RecloserR\x08recloserB\x08\x88\xb5\x18\x01\
    \x90\xb5\x18\x01\x12P\n\x0erecloserStatus\x18\x04\x20\x01(\x0b2\x1e.recl\
    osermodule.RecloserStatusR\x0erecloserStatusB\x08\x88\xb5\x18\x01\x90\
    \xb5\x18\x01:\x04\xc0\xf3\x18\x01B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
