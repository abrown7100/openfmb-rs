// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `switchmodule/switchmodule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchDiscreteControlXSWI {
    // message fields
    logicalNodeForControl: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForControl>,
    Pos: ::protobuf::SingularPtrField<super::commonmodule::ControlDPC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchDiscreteControlXSWI {
    fn default() -> &'a SwitchDiscreteControlXSWI {
        <SwitchDiscreteControlXSWI as ::protobuf::Message>::default_instance()
    }
}

impl SwitchDiscreteControlXSWI {
    pub fn new() -> SwitchDiscreteControlXSWI {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1;


    pub fn get_logicalNodeForControl(&self) -> &super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForControl(&mut self) {
        self.logicalNodeForControl.clear();
    }

    pub fn has_logicalNodeForControl(&self) -> bool {
        self.logicalNodeForControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForControl(&mut self, v: super::commonmodule::LogicalNodeForControl) {
        self.logicalNodeForControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForControl(&mut self) -> &mut super::commonmodule::LogicalNodeForControl {
        if self.logicalNodeForControl.is_none() {
            self.logicalNodeForControl.set_default();
        }
        self.logicalNodeForControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForControl(&mut self) -> super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForControl::new())
    }

    // .commonmodule.ControlDPC Pos = 2;


    pub fn get_Pos(&self) -> &super::commonmodule::ControlDPC {
        self.Pos.as_ref().unwrap_or_else(|| <super::commonmodule::ControlDPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Pos(&mut self) {
        self.Pos.clear();
    }

    pub fn has_Pos(&self) -> bool {
        self.Pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Pos(&mut self, v: super::commonmodule::ControlDPC) {
        self.Pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Pos(&mut self) -> &mut super::commonmodule::ControlDPC {
        if self.Pos.is_none() {
            self.Pos.set_default();
        }
        self.Pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_Pos(&mut self) -> super::commonmodule::ControlDPC {
        self.Pos.take().unwrap_or_else(|| super::commonmodule::ControlDPC::new())
    }
}

impl ::protobuf::Message for SwitchDiscreteControlXSWI {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForControl)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchDiscreteControlXSWI {
        SwitchDiscreteControlXSWI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForControl>>(
                "logicalNodeForControl",
                |m: &SwitchDiscreteControlXSWI| { &m.logicalNodeForControl },
                |m: &mut SwitchDiscreteControlXSWI| { &mut m.logicalNodeForControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlDPC>>(
                "Pos",
                |m: &SwitchDiscreteControlXSWI| { &m.Pos },
                |m: &mut SwitchDiscreteControlXSWI| { &mut m.Pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchDiscreteControlXSWI>(
                "SwitchDiscreteControlXSWI",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchDiscreteControlXSWI {
        static instance: ::protobuf::rt::LazyV2<SwitchDiscreteControlXSWI> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchDiscreteControlXSWI::new)
    }
}

impl ::protobuf::Clear for SwitchDiscreteControlXSWI {
    fn clear(&mut self) {
        self.logicalNodeForControl.clear();
        self.Pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchDiscreteControlXSWI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchDiscreteControlXSWI {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchDiscreteControl {
    // message fields
    controlValue: ::protobuf::SingularPtrField<super::commonmodule::ControlValue>,
    check: ::protobuf::SingularPtrField<super::commonmodule::CheckConditions>,
    switchDiscreteControlXSWI: ::protobuf::SingularPtrField<SwitchDiscreteControlXSWI>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchDiscreteControl {
    fn default() -> &'a SwitchDiscreteControl {
        <SwitchDiscreteControl as ::protobuf::Message>::default_instance()
    }
}

impl SwitchDiscreteControl {
    pub fn new() -> SwitchDiscreteControl {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlValue controlValue = 1;


    pub fn get_controlValue(&self) -> &super::commonmodule::ControlValue {
        self.controlValue.as_ref().unwrap_or_else(|| <super::commonmodule::ControlValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlValue(&mut self) {
        self.controlValue.clear();
    }

    pub fn has_controlValue(&self) -> bool {
        self.controlValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlValue(&mut self, v: super::commonmodule::ControlValue) {
        self.controlValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlValue(&mut self) -> &mut super::commonmodule::ControlValue {
        if self.controlValue.is_none() {
            self.controlValue.set_default();
        }
        self.controlValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlValue(&mut self) -> super::commonmodule::ControlValue {
        self.controlValue.take().unwrap_or_else(|| super::commonmodule::ControlValue::new())
    }

    // .commonmodule.CheckConditions check = 2;


    pub fn get_check(&self) -> &super::commonmodule::CheckConditions {
        self.check.as_ref().unwrap_or_else(|| <super::commonmodule::CheckConditions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check(&mut self) {
        self.check.clear();
    }

    pub fn has_check(&self) -> bool {
        self.check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check(&mut self, v: super::commonmodule::CheckConditions) {
        self.check = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check(&mut self) -> &mut super::commonmodule::CheckConditions {
        if self.check.is_none() {
            self.check.set_default();
        }
        self.check.as_mut().unwrap()
    }

    // Take field
    pub fn take_check(&mut self) -> super::commonmodule::CheckConditions {
        self.check.take().unwrap_or_else(|| super::commonmodule::CheckConditions::new())
    }

    // .switchmodule.SwitchDiscreteControlXSWI switchDiscreteControlXSWI = 3;


    pub fn get_switchDiscreteControlXSWI(&self) -> &SwitchDiscreteControlXSWI {
        self.switchDiscreteControlXSWI.as_ref().unwrap_or_else(|| <SwitchDiscreteControlXSWI as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchDiscreteControlXSWI(&mut self) {
        self.switchDiscreteControlXSWI.clear();
    }

    pub fn has_switchDiscreteControlXSWI(&self) -> bool {
        self.switchDiscreteControlXSWI.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchDiscreteControlXSWI(&mut self, v: SwitchDiscreteControlXSWI) {
        self.switchDiscreteControlXSWI = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchDiscreteControlXSWI(&mut self) -> &mut SwitchDiscreteControlXSWI {
        if self.switchDiscreteControlXSWI.is_none() {
            self.switchDiscreteControlXSWI.set_default();
        }
        self.switchDiscreteControlXSWI.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchDiscreteControlXSWI(&mut self) -> SwitchDiscreteControlXSWI {
        self.switchDiscreteControlXSWI.take().unwrap_or_else(|| SwitchDiscreteControlXSWI::new())
    }
}

impl ::protobuf::Message for SwitchDiscreteControl {
    fn is_initialized(&self) -> bool {
        for v in &self.controlValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchDiscreteControlXSWI {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchDiscreteControlXSWI)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchDiscreteControlXSWI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.check.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchDiscreteControlXSWI.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchDiscreteControl {
        SwitchDiscreteControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlValue>>(
                "controlValue",
                |m: &SwitchDiscreteControl| { &m.controlValue },
                |m: &mut SwitchDiscreteControl| { &mut m.controlValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::CheckConditions>>(
                "check",
                |m: &SwitchDiscreteControl| { &m.check },
                |m: &mut SwitchDiscreteControl| { &mut m.check },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchDiscreteControlXSWI>>(
                "switchDiscreteControlXSWI",
                |m: &SwitchDiscreteControl| { &m.switchDiscreteControlXSWI },
                |m: &mut SwitchDiscreteControl| { &mut m.switchDiscreteControlXSWI },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchDiscreteControl>(
                "SwitchDiscreteControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchDiscreteControl {
        static instance: ::protobuf::rt::LazyV2<SwitchDiscreteControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchDiscreteControl::new)
    }
}

impl ::protobuf::Clear for SwitchDiscreteControl {
    fn clear(&mut self) {
        self.controlValue.clear();
        self.check.clear();
        self.switchDiscreteControlXSWI.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchDiscreteControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchDiscreteControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ProtectedSwitch {
    // message fields
    conductingEquipment: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipment>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtectedSwitch {
    fn default() -> &'a ProtectedSwitch {
        <ProtectedSwitch as ::protobuf::Message>::default_instance()
    }
}

impl ProtectedSwitch {
    pub fn new() -> ProtectedSwitch {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipment conductingEquipment = 1;


    pub fn get_conductingEquipment(&self) -> &super::commonmodule::ConductingEquipment {
        self.conductingEquipment.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipment(&mut self) {
        self.conductingEquipment.clear();
    }

    pub fn has_conductingEquipment(&self) -> bool {
        self.conductingEquipment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipment(&mut self, v: super::commonmodule::ConductingEquipment) {
        self.conductingEquipment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipment(&mut self) -> &mut super::commonmodule::ConductingEquipment {
        if self.conductingEquipment.is_none() {
            self.conductingEquipment.set_default();
        }
        self.conductingEquipment.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipment(&mut self) -> super::commonmodule::ConductingEquipment {
        self.conductingEquipment.take().unwrap_or_else(|| super::commonmodule::ConductingEquipment::new())
    }
}

impl ::protobuf::Message for ProtectedSwitch {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipment {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtectedSwitch {
        ProtectedSwitch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipment>>(
                "conductingEquipment",
                |m: &ProtectedSwitch| { &m.conductingEquipment },
                |m: &mut ProtectedSwitch| { &mut m.conductingEquipment },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtectedSwitch>(
                "ProtectedSwitch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtectedSwitch {
        static instance: ::protobuf::rt::LazyV2<ProtectedSwitch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtectedSwitch::new)
    }
}

impl ::protobuf::Clear for ProtectedSwitch {
    fn clear(&mut self) {
        self.conductingEquipment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtectedSwitch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtectedSwitch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchDiscreteControlProfile {
    // message fields
    controlMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ControlMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    protectedSwitch: ::protobuf::SingularPtrField<ProtectedSwitch>,
    switchDiscreteControl: ::protobuf::SingularPtrField<SwitchDiscreteControl>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchDiscreteControlProfile {
    fn default() -> &'a SwitchDiscreteControlProfile {
        <SwitchDiscreteControlProfile as ::protobuf::Message>::default_instance()
    }
}

impl SwitchDiscreteControlProfile {
    pub fn new() -> SwitchDiscreteControlProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlMessageInfo controlMessageInfo = 1;


    pub fn get_controlMessageInfo(&self) -> &super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ControlMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlMessageInfo(&mut self) {
        self.controlMessageInfo.clear();
    }

    pub fn has_controlMessageInfo(&self) -> bool {
        self.controlMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlMessageInfo(&mut self, v: super::commonmodule::ControlMessageInfo) {
        self.controlMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlMessageInfo(&mut self) -> &mut super::commonmodule::ControlMessageInfo {
        if self.controlMessageInfo.is_none() {
            self.controlMessageInfo.set_default();
        }
        self.controlMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlMessageInfo(&mut self) -> super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.take().unwrap_or_else(|| super::commonmodule::ControlMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .switchmodule.ProtectedSwitch protectedSwitch = 3;


    pub fn get_protectedSwitch(&self) -> &ProtectedSwitch {
        self.protectedSwitch.as_ref().unwrap_or_else(|| <ProtectedSwitch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_protectedSwitch(&mut self) {
        self.protectedSwitch.clear();
    }

    pub fn has_protectedSwitch(&self) -> bool {
        self.protectedSwitch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protectedSwitch(&mut self, v: ProtectedSwitch) {
        self.protectedSwitch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protectedSwitch(&mut self) -> &mut ProtectedSwitch {
        if self.protectedSwitch.is_none() {
            self.protectedSwitch.set_default();
        }
        self.protectedSwitch.as_mut().unwrap()
    }

    // Take field
    pub fn take_protectedSwitch(&mut self) -> ProtectedSwitch {
        self.protectedSwitch.take().unwrap_or_else(|| ProtectedSwitch::new())
    }

    // .switchmodule.SwitchDiscreteControl switchDiscreteControl = 4;


    pub fn get_switchDiscreteControl(&self) -> &SwitchDiscreteControl {
        self.switchDiscreteControl.as_ref().unwrap_or_else(|| <SwitchDiscreteControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchDiscreteControl(&mut self) {
        self.switchDiscreteControl.clear();
    }

    pub fn has_switchDiscreteControl(&self) -> bool {
        self.switchDiscreteControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchDiscreteControl(&mut self, v: SwitchDiscreteControl) {
        self.switchDiscreteControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchDiscreteControl(&mut self) -> &mut SwitchDiscreteControl {
        if self.switchDiscreteControl.is_none() {
            self.switchDiscreteControl.set_default();
        }
        self.switchDiscreteControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchDiscreteControl(&mut self) -> SwitchDiscreteControl {
        self.switchDiscreteControl.take().unwrap_or_else(|| SwitchDiscreteControl::new())
    }
}

impl ::protobuf::Message for SwitchDiscreteControlProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.controlMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.protectedSwitch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchDiscreteControl {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.protectedSwitch)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchDiscreteControl)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchDiscreteControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchDiscreteControl.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchDiscreteControlProfile {
        SwitchDiscreteControlProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlMessageInfo>>(
                "controlMessageInfo",
                |m: &SwitchDiscreteControlProfile| { &m.controlMessageInfo },
                |m: &mut SwitchDiscreteControlProfile| { &mut m.controlMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &SwitchDiscreteControlProfile| { &m.ied },
                |m: &mut SwitchDiscreteControlProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtectedSwitch>>(
                "protectedSwitch",
                |m: &SwitchDiscreteControlProfile| { &m.protectedSwitch },
                |m: &mut SwitchDiscreteControlProfile| { &mut m.protectedSwitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchDiscreteControl>>(
                "switchDiscreteControl",
                |m: &SwitchDiscreteControlProfile| { &m.switchDiscreteControl },
                |m: &mut SwitchDiscreteControlProfile| { &mut m.switchDiscreteControl },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchDiscreteControlProfile>(
                "SwitchDiscreteControlProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchDiscreteControlProfile {
        static instance: ::protobuf::rt::LazyV2<SwitchDiscreteControlProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchDiscreteControlProfile::new)
    }
}

impl ::protobuf::Clear for SwitchDiscreteControlProfile {
    fn clear(&mut self) {
        self.controlMessageInfo.clear();
        self.ied.clear();
        self.protectedSwitch.clear();
        self.switchDiscreteControl.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchDiscreteControlProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchDiscreteControlProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchEventXSWI {
    // message fields
    logicalNodeForEventAndStatus: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForEventAndStatus>,
    DynamicTest: ::protobuf::SingularPtrField<super::commonmodule::ENS_DynamicTestKind>,
    Pos: ::protobuf::SingularPtrField<super::commonmodule::StatusDPS>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchEventXSWI {
    fn default() -> &'a SwitchEventXSWI {
        <SwitchEventXSWI as ::protobuf::Message>::default_instance()
    }
}

impl SwitchEventXSWI {
    pub fn new() -> SwitchEventXSWI {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1;


    pub fn get_logicalNodeForEventAndStatus(&self) -> &super::commonmodule::LogicalNodeForEventAndStatus {
        self.logicalNodeForEventAndStatus.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForEventAndStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForEventAndStatus(&mut self) {
        self.logicalNodeForEventAndStatus.clear();
    }

    pub fn has_logicalNodeForEventAndStatus(&self) -> bool {
        self.logicalNodeForEventAndStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForEventAndStatus(&mut self, v: super::commonmodule::LogicalNodeForEventAndStatus) {
        self.logicalNodeForEventAndStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForEventAndStatus(&mut self) -> &mut super::commonmodule::LogicalNodeForEventAndStatus {
        if self.logicalNodeForEventAndStatus.is_none() {
            self.logicalNodeForEventAndStatus.set_default();
        }
        self.logicalNodeForEventAndStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForEventAndStatus(&mut self) -> super::commonmodule::LogicalNodeForEventAndStatus {
        self.logicalNodeForEventAndStatus.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForEventAndStatus::new())
    }

    // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;


    pub fn get_DynamicTest(&self) -> &super::commonmodule::ENS_DynamicTestKind {
        self.DynamicTest.as_ref().unwrap_or_else(|| <super::commonmodule::ENS_DynamicTestKind as ::protobuf::Message>::default_instance())
    }
    pub fn clear_DynamicTest(&mut self) {
        self.DynamicTest.clear();
    }

    pub fn has_DynamicTest(&self) -> bool {
        self.DynamicTest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_DynamicTest(&mut self, v: super::commonmodule::ENS_DynamicTestKind) {
        self.DynamicTest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_DynamicTest(&mut self) -> &mut super::commonmodule::ENS_DynamicTestKind {
        if self.DynamicTest.is_none() {
            self.DynamicTest.set_default();
        }
        self.DynamicTest.as_mut().unwrap()
    }

    // Take field
    pub fn take_DynamicTest(&mut self) -> super::commonmodule::ENS_DynamicTestKind {
        self.DynamicTest.take().unwrap_or_else(|| super::commonmodule::ENS_DynamicTestKind::new())
    }

    // .commonmodule.StatusDPS Pos = 3;


    pub fn get_Pos(&self) -> &super::commonmodule::StatusDPS {
        self.Pos.as_ref().unwrap_or_else(|| <super::commonmodule::StatusDPS as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Pos(&mut self) {
        self.Pos.clear();
    }

    pub fn has_Pos(&self) -> bool {
        self.Pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Pos(&mut self, v: super::commonmodule::StatusDPS) {
        self.Pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Pos(&mut self) -> &mut super::commonmodule::StatusDPS {
        if self.Pos.is_none() {
            self.Pos.set_default();
        }
        self.Pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_Pos(&mut self) -> super::commonmodule::StatusDPS {
        self.Pos.take().unwrap_or_else(|| super::commonmodule::StatusDPS::new())
    }
}

impl ::protobuf::Message for SwitchEventXSWI {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForEventAndStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.DynamicTest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForEventAndStatus)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.DynamicTest)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForEventAndStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.DynamicTest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForEventAndStatus.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.DynamicTest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchEventXSWI {
        SwitchEventXSWI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForEventAndStatus>>(
                "logicalNodeForEventAndStatus",
                |m: &SwitchEventXSWI| { &m.logicalNodeForEventAndStatus },
                |m: &mut SwitchEventXSWI| { &mut m.logicalNodeForEventAndStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ENS_DynamicTestKind>>(
                "DynamicTest",
                |m: &SwitchEventXSWI| { &m.DynamicTest },
                |m: &mut SwitchEventXSWI| { &mut m.DynamicTest },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusDPS>>(
                "Pos",
                |m: &SwitchEventXSWI| { &m.Pos },
                |m: &mut SwitchEventXSWI| { &mut m.Pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchEventXSWI>(
                "SwitchEventXSWI",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchEventXSWI {
        static instance: ::protobuf::rt::LazyV2<SwitchEventXSWI> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchEventXSWI::new)
    }
}

impl ::protobuf::Clear for SwitchEventXSWI {
    fn clear(&mut self) {
        self.logicalNodeForEventAndStatus.clear();
        self.DynamicTest.clear();
        self.Pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchEventXSWI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchEventXSWI {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchEvent {
    // message fields
    eventValue: ::protobuf::SingularPtrField<super::commonmodule::EventValue>,
    switchEventXSWI: ::protobuf::SingularPtrField<SwitchEventXSWI>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchEvent {
    fn default() -> &'a SwitchEvent {
        <SwitchEvent as ::protobuf::Message>::default_instance()
    }
}

impl SwitchEvent {
    pub fn new() -> SwitchEvent {
        ::std::default::Default::default()
    }

    // .commonmodule.EventValue eventValue = 1;


    pub fn get_eventValue(&self) -> &super::commonmodule::EventValue {
        self.eventValue.as_ref().unwrap_or_else(|| <super::commonmodule::EventValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventValue(&mut self) {
        self.eventValue.clear();
    }

    pub fn has_eventValue(&self) -> bool {
        self.eventValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventValue(&mut self, v: super::commonmodule::EventValue) {
        self.eventValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventValue(&mut self) -> &mut super::commonmodule::EventValue {
        if self.eventValue.is_none() {
            self.eventValue.set_default();
        }
        self.eventValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventValue(&mut self) -> super::commonmodule::EventValue {
        self.eventValue.take().unwrap_or_else(|| super::commonmodule::EventValue::new())
    }

    // .switchmodule.SwitchEventXSWI switchEventXSWI = 2;


    pub fn get_switchEventXSWI(&self) -> &SwitchEventXSWI {
        self.switchEventXSWI.as_ref().unwrap_or_else(|| <SwitchEventXSWI as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchEventXSWI(&mut self) {
        self.switchEventXSWI.clear();
    }

    pub fn has_switchEventXSWI(&self) -> bool {
        self.switchEventXSWI.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchEventXSWI(&mut self, v: SwitchEventXSWI) {
        self.switchEventXSWI = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchEventXSWI(&mut self) -> &mut SwitchEventXSWI {
        if self.switchEventXSWI.is_none() {
            self.switchEventXSWI.set_default();
        }
        self.switchEventXSWI.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchEventXSWI(&mut self) -> SwitchEventXSWI {
        self.switchEventXSWI.take().unwrap_or_else(|| SwitchEventXSWI::new())
    }
}

impl ::protobuf::Message for SwitchEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.eventValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchEventXSWI {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchEventXSWI)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchEventXSWI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchEventXSWI.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchEvent {
        SwitchEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventValue>>(
                "eventValue",
                |m: &SwitchEvent| { &m.eventValue },
                |m: &mut SwitchEvent| { &mut m.eventValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchEventXSWI>>(
                "switchEventXSWI",
                |m: &SwitchEvent| { &m.switchEventXSWI },
                |m: &mut SwitchEvent| { &mut m.switchEventXSWI },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchEvent>(
                "SwitchEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchEvent {
        static instance: ::protobuf::rt::LazyV2<SwitchEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchEvent::new)
    }
}

impl ::protobuf::Clear for SwitchEvent {
    fn clear(&mut self) {
        self.eventValue.clear();
        self.switchEventXSWI.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchEventProfile {
    // message fields
    eventMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::EventMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    protectedSwitch: ::protobuf::SingularPtrField<ProtectedSwitch>,
    switchEvent: ::protobuf::SingularPtrField<SwitchEvent>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchEventProfile {
    fn default() -> &'a SwitchEventProfile {
        <SwitchEventProfile as ::protobuf::Message>::default_instance()
    }
}

impl SwitchEventProfile {
    pub fn new() -> SwitchEventProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.EventMessageInfo eventMessageInfo = 1;


    pub fn get_eventMessageInfo(&self) -> &super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::EventMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventMessageInfo(&mut self) {
        self.eventMessageInfo.clear();
    }

    pub fn has_eventMessageInfo(&self) -> bool {
        self.eventMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventMessageInfo(&mut self, v: super::commonmodule::EventMessageInfo) {
        self.eventMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventMessageInfo(&mut self) -> &mut super::commonmodule::EventMessageInfo {
        if self.eventMessageInfo.is_none() {
            self.eventMessageInfo.set_default();
        }
        self.eventMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventMessageInfo(&mut self) -> super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.take().unwrap_or_else(|| super::commonmodule::EventMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .switchmodule.ProtectedSwitch protectedSwitch = 3;


    pub fn get_protectedSwitch(&self) -> &ProtectedSwitch {
        self.protectedSwitch.as_ref().unwrap_or_else(|| <ProtectedSwitch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_protectedSwitch(&mut self) {
        self.protectedSwitch.clear();
    }

    pub fn has_protectedSwitch(&self) -> bool {
        self.protectedSwitch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protectedSwitch(&mut self, v: ProtectedSwitch) {
        self.protectedSwitch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protectedSwitch(&mut self) -> &mut ProtectedSwitch {
        if self.protectedSwitch.is_none() {
            self.protectedSwitch.set_default();
        }
        self.protectedSwitch.as_mut().unwrap()
    }

    // Take field
    pub fn take_protectedSwitch(&mut self) -> ProtectedSwitch {
        self.protectedSwitch.take().unwrap_or_else(|| ProtectedSwitch::new())
    }

    // .switchmodule.SwitchEvent switchEvent = 4;


    pub fn get_switchEvent(&self) -> &SwitchEvent {
        self.switchEvent.as_ref().unwrap_or_else(|| <SwitchEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchEvent(&mut self) {
        self.switchEvent.clear();
    }

    pub fn has_switchEvent(&self) -> bool {
        self.switchEvent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchEvent(&mut self, v: SwitchEvent) {
        self.switchEvent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchEvent(&mut self) -> &mut SwitchEvent {
        if self.switchEvent.is_none() {
            self.switchEvent.set_default();
        }
        self.switchEvent.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchEvent(&mut self) -> SwitchEvent {
        self.switchEvent.take().unwrap_or_else(|| SwitchEvent::new())
    }
}

impl ::protobuf::Message for SwitchEventProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.eventMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.protectedSwitch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchEvent {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.protectedSwitch)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchEvent)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchEvent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchEvent.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchEventProfile {
        SwitchEventProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventMessageInfo>>(
                "eventMessageInfo",
                |m: &SwitchEventProfile| { &m.eventMessageInfo },
                |m: &mut SwitchEventProfile| { &mut m.eventMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &SwitchEventProfile| { &m.ied },
                |m: &mut SwitchEventProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtectedSwitch>>(
                "protectedSwitch",
                |m: &SwitchEventProfile| { &m.protectedSwitch },
                |m: &mut SwitchEventProfile| { &mut m.protectedSwitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchEvent>>(
                "switchEvent",
                |m: &SwitchEventProfile| { &m.switchEvent },
                |m: &mut SwitchEventProfile| { &mut m.switchEvent },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchEventProfile>(
                "SwitchEventProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchEventProfile {
        static instance: ::protobuf::rt::LazyV2<SwitchEventProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchEventProfile::new)
    }
}

impl ::protobuf::Clear for SwitchEventProfile {
    fn clear(&mut self) {
        self.eventMessageInfo.clear();
        self.ied.clear();
        self.protectedSwitch.clear();
        self.switchEvent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchEventProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchEventProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchReading {
    // message fields
    conductingEquipmentTerminalReading: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipmentTerminalReading>,
    diffReadingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    phaseMMTN: ::protobuf::SingularPtrField<super::commonmodule::PhaseMMTN>,
    readingMMTR: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMTR>,
    readingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchReading {
    fn default() -> &'a SwitchReading {
        <SwitchReading as ::protobuf::Message>::default_instance()
    }
}

impl SwitchReading {
    pub fn new() -> SwitchReading {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1;


    pub fn get_conductingEquipmentTerminalReading(&self) -> &super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipmentTerminalReading as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipmentTerminalReading(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
    }

    pub fn has_conductingEquipmentTerminalReading(&self) -> bool {
        self.conductingEquipmentTerminalReading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipmentTerminalReading(&mut self, v: super::commonmodule::ConductingEquipmentTerminalReading) {
        self.conductingEquipmentTerminalReading = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipmentTerminalReading(&mut self) -> &mut super::commonmodule::ConductingEquipmentTerminalReading {
        if self.conductingEquipmentTerminalReading.is_none() {
            self.conductingEquipmentTerminalReading.set_default();
        }
        self.conductingEquipmentTerminalReading.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipmentTerminalReading(&mut self) -> super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.take().unwrap_or_else(|| super::commonmodule::ConductingEquipmentTerminalReading::new())
    }

    // .commonmodule.ReadingMMXU diffReadingMMXU = 2;


    pub fn get_diffReadingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.diffReadingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_diffReadingMMXU(&mut self) {
        self.diffReadingMMXU.clear();
    }

    pub fn has_diffReadingMMXU(&self) -> bool {
        self.diffReadingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_diffReadingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.diffReadingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diffReadingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.diffReadingMMXU.is_none() {
            self.diffReadingMMXU.set_default();
        }
        self.diffReadingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_diffReadingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.diffReadingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }

    // .commonmodule.PhaseMMTN phaseMMTN = 3;


    pub fn get_phaseMMTN(&self) -> &super::commonmodule::PhaseMMTN {
        self.phaseMMTN.as_ref().unwrap_or_else(|| <super::commonmodule::PhaseMMTN as ::protobuf::Message>::default_instance())
    }
    pub fn clear_phaseMMTN(&mut self) {
        self.phaseMMTN.clear();
    }

    pub fn has_phaseMMTN(&self) -> bool {
        self.phaseMMTN.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phaseMMTN(&mut self, v: super::commonmodule::PhaseMMTN) {
        self.phaseMMTN = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phaseMMTN(&mut self) -> &mut super::commonmodule::PhaseMMTN {
        if self.phaseMMTN.is_none() {
            self.phaseMMTN.set_default();
        }
        self.phaseMMTN.as_mut().unwrap()
    }

    // Take field
    pub fn take_phaseMMTN(&mut self) -> super::commonmodule::PhaseMMTN {
        self.phaseMMTN.take().unwrap_or_else(|| super::commonmodule::PhaseMMTN::new())
    }

    // .commonmodule.ReadingMMTR readingMMTR = 4;


    pub fn get_readingMMTR(&self) -> &super::commonmodule::ReadingMMTR {
        self.readingMMTR.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMTR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMTR(&mut self) {
        self.readingMMTR.clear();
    }

    pub fn has_readingMMTR(&self) -> bool {
        self.readingMMTR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMTR(&mut self, v: super::commonmodule::ReadingMMTR) {
        self.readingMMTR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMTR(&mut self) -> &mut super::commonmodule::ReadingMMTR {
        if self.readingMMTR.is_none() {
            self.readingMMTR.set_default();
        }
        self.readingMMTR.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMTR(&mut self) -> super::commonmodule::ReadingMMTR {
        self.readingMMTR.take().unwrap_or_else(|| super::commonmodule::ReadingMMTR::new())
    }

    // .commonmodule.ReadingMMXU readingMMXU = 5;


    pub fn get_readingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.readingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMXU(&mut self) {
        self.readingMMXU.clear();
    }

    pub fn has_readingMMXU(&self) -> bool {
        self.readingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.readingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.readingMMXU.is_none() {
            self.readingMMXU.set_default();
        }
        self.readingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.readingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }
}

impl ::protobuf::Message for SwitchReading {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipmentTerminalReading {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.diffReadingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.phaseMMTN {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMTR {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipmentTerminalReading)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.diffReadingMMXU)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.phaseMMTN)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMTR)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMXU)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.diffReadingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.diffReadingMMXU.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchReading {
        SwitchReading::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipmentTerminalReading>>(
                "conductingEquipmentTerminalReading",
                |m: &SwitchReading| { &m.conductingEquipmentTerminalReading },
                |m: &mut SwitchReading| { &mut m.conductingEquipmentTerminalReading },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "diffReadingMMXU",
                |m: &SwitchReading| { &m.diffReadingMMXU },
                |m: &mut SwitchReading| { &mut m.diffReadingMMXU },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::PhaseMMTN>>(
                "phaseMMTN",
                |m: &SwitchReading| { &m.phaseMMTN },
                |m: &mut SwitchReading| { &mut m.phaseMMTN },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMTR>>(
                "readingMMTR",
                |m: &SwitchReading| { &m.readingMMTR },
                |m: &mut SwitchReading| { &mut m.readingMMTR },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "readingMMXU",
                |m: &SwitchReading| { &m.readingMMXU },
                |m: &mut SwitchReading| { &mut m.readingMMXU },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchReading>(
                "SwitchReading",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchReading {
        static instance: ::protobuf::rt::LazyV2<SwitchReading> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchReading::new)
    }
}

impl ::protobuf::Clear for SwitchReading {
    fn clear(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
        self.diffReadingMMXU.clear();
        self.phaseMMTN.clear();
        self.readingMMTR.clear();
        self.readingMMXU.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchReading {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchReading {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchReadingProfile {
    // message fields
    readingMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ReadingMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    protectedSwitch: ::protobuf::SingularPtrField<ProtectedSwitch>,
    switchReading: ::protobuf::RepeatedField<SwitchReading>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchReadingProfile {
    fn default() -> &'a SwitchReadingProfile {
        <SwitchReadingProfile as ::protobuf::Message>::default_instance()
    }
}

impl SwitchReadingProfile {
    pub fn new() -> SwitchReadingProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1;


    pub fn get_readingMessageInfo(&self) -> &super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMessageInfo(&mut self) {
        self.readingMessageInfo.clear();
    }

    pub fn has_readingMessageInfo(&self) -> bool {
        self.readingMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMessageInfo(&mut self, v: super::commonmodule::ReadingMessageInfo) {
        self.readingMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMessageInfo(&mut self) -> &mut super::commonmodule::ReadingMessageInfo {
        if self.readingMessageInfo.is_none() {
            self.readingMessageInfo.set_default();
        }
        self.readingMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMessageInfo(&mut self) -> super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.take().unwrap_or_else(|| super::commonmodule::ReadingMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .switchmodule.ProtectedSwitch protectedSwitch = 3;


    pub fn get_protectedSwitch(&self) -> &ProtectedSwitch {
        self.protectedSwitch.as_ref().unwrap_or_else(|| <ProtectedSwitch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_protectedSwitch(&mut self) {
        self.protectedSwitch.clear();
    }

    pub fn has_protectedSwitch(&self) -> bool {
        self.protectedSwitch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protectedSwitch(&mut self, v: ProtectedSwitch) {
        self.protectedSwitch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protectedSwitch(&mut self) -> &mut ProtectedSwitch {
        if self.protectedSwitch.is_none() {
            self.protectedSwitch.set_default();
        }
        self.protectedSwitch.as_mut().unwrap()
    }

    // Take field
    pub fn take_protectedSwitch(&mut self) -> ProtectedSwitch {
        self.protectedSwitch.take().unwrap_or_else(|| ProtectedSwitch::new())
    }

    // repeated .switchmodule.SwitchReading switchReading = 4;


    pub fn get_switchReading(&self) -> &[SwitchReading] {
        &self.switchReading
    }
    pub fn clear_switchReading(&mut self) {
        self.switchReading.clear();
    }

    // Param is passed by value, moved
    pub fn set_switchReading(&mut self, v: ::protobuf::RepeatedField<SwitchReading>) {
        self.switchReading = v;
    }

    // Mutable pointer to the field.
    pub fn mut_switchReading(&mut self) -> &mut ::protobuf::RepeatedField<SwitchReading> {
        &mut self.switchReading
    }

    // Take field
    pub fn take_switchReading(&mut self) -> ::protobuf::RepeatedField<SwitchReading> {
        ::std::mem::replace(&mut self.switchReading, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SwitchReadingProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.readingMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.protectedSwitch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchReading {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.protectedSwitch)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.switchReading)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.switchReading {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.switchReading {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchReadingProfile {
        SwitchReadingProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMessageInfo>>(
                "readingMessageInfo",
                |m: &SwitchReadingProfile| { &m.readingMessageInfo },
                |m: &mut SwitchReadingProfile| { &mut m.readingMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &SwitchReadingProfile| { &m.ied },
                |m: &mut SwitchReadingProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtectedSwitch>>(
                "protectedSwitch",
                |m: &SwitchReadingProfile| { &m.protectedSwitch },
                |m: &mut SwitchReadingProfile| { &mut m.protectedSwitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchReading>>(
                "switchReading",
                |m: &SwitchReadingProfile| { &m.switchReading },
                |m: &mut SwitchReadingProfile| { &mut m.switchReading },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchReadingProfile>(
                "SwitchReadingProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchReadingProfile {
        static instance: ::protobuf::rt::LazyV2<SwitchReadingProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchReadingProfile::new)
    }
}

impl ::protobuf::Clear for SwitchReadingProfile {
    fn clear(&mut self) {
        self.readingMessageInfo.clear();
        self.ied.clear();
        self.protectedSwitch.clear();
        self.switchReading.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchReadingProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchReadingProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchStatusXSWI {
    // message fields
    logicalNodeForEventAndStatus: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForEventAndStatus>,
    DynamicTest: ::protobuf::SingularPtrField<super::commonmodule::ENS_DynamicTestKind>,
    Pos: ::protobuf::SingularPtrField<super::commonmodule::StatusDPS>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchStatusXSWI {
    fn default() -> &'a SwitchStatusXSWI {
        <SwitchStatusXSWI as ::protobuf::Message>::default_instance()
    }
}

impl SwitchStatusXSWI {
    pub fn new() -> SwitchStatusXSWI {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1;


    pub fn get_logicalNodeForEventAndStatus(&self) -> &super::commonmodule::LogicalNodeForEventAndStatus {
        self.logicalNodeForEventAndStatus.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForEventAndStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForEventAndStatus(&mut self) {
        self.logicalNodeForEventAndStatus.clear();
    }

    pub fn has_logicalNodeForEventAndStatus(&self) -> bool {
        self.logicalNodeForEventAndStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForEventAndStatus(&mut self, v: super::commonmodule::LogicalNodeForEventAndStatus) {
        self.logicalNodeForEventAndStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForEventAndStatus(&mut self) -> &mut super::commonmodule::LogicalNodeForEventAndStatus {
        if self.logicalNodeForEventAndStatus.is_none() {
            self.logicalNodeForEventAndStatus.set_default();
        }
        self.logicalNodeForEventAndStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForEventAndStatus(&mut self) -> super::commonmodule::LogicalNodeForEventAndStatus {
        self.logicalNodeForEventAndStatus.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForEventAndStatus::new())
    }

    // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;


    pub fn get_DynamicTest(&self) -> &super::commonmodule::ENS_DynamicTestKind {
        self.DynamicTest.as_ref().unwrap_or_else(|| <super::commonmodule::ENS_DynamicTestKind as ::protobuf::Message>::default_instance())
    }
    pub fn clear_DynamicTest(&mut self) {
        self.DynamicTest.clear();
    }

    pub fn has_DynamicTest(&self) -> bool {
        self.DynamicTest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_DynamicTest(&mut self, v: super::commonmodule::ENS_DynamicTestKind) {
        self.DynamicTest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_DynamicTest(&mut self) -> &mut super::commonmodule::ENS_DynamicTestKind {
        if self.DynamicTest.is_none() {
            self.DynamicTest.set_default();
        }
        self.DynamicTest.as_mut().unwrap()
    }

    // Take field
    pub fn take_DynamicTest(&mut self) -> super::commonmodule::ENS_DynamicTestKind {
        self.DynamicTest.take().unwrap_or_else(|| super::commonmodule::ENS_DynamicTestKind::new())
    }

    // .commonmodule.StatusDPS Pos = 3;


    pub fn get_Pos(&self) -> &super::commonmodule::StatusDPS {
        self.Pos.as_ref().unwrap_or_else(|| <super::commonmodule::StatusDPS as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Pos(&mut self) {
        self.Pos.clear();
    }

    pub fn has_Pos(&self) -> bool {
        self.Pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Pos(&mut self, v: super::commonmodule::StatusDPS) {
        self.Pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Pos(&mut self) -> &mut super::commonmodule::StatusDPS {
        if self.Pos.is_none() {
            self.Pos.set_default();
        }
        self.Pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_Pos(&mut self) -> super::commonmodule::StatusDPS {
        self.Pos.take().unwrap_or_else(|| super::commonmodule::StatusDPS::new())
    }
}

impl ::protobuf::Message for SwitchStatusXSWI {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForEventAndStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.DynamicTest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForEventAndStatus)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.DynamicTest)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForEventAndStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.DynamicTest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForEventAndStatus.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.DynamicTest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchStatusXSWI {
        SwitchStatusXSWI::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForEventAndStatus>>(
                "logicalNodeForEventAndStatus",
                |m: &SwitchStatusXSWI| { &m.logicalNodeForEventAndStatus },
                |m: &mut SwitchStatusXSWI| { &mut m.logicalNodeForEventAndStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ENS_DynamicTestKind>>(
                "DynamicTest",
                |m: &SwitchStatusXSWI| { &m.DynamicTest },
                |m: &mut SwitchStatusXSWI| { &mut m.DynamicTest },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusDPS>>(
                "Pos",
                |m: &SwitchStatusXSWI| { &m.Pos },
                |m: &mut SwitchStatusXSWI| { &mut m.Pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchStatusXSWI>(
                "SwitchStatusXSWI",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchStatusXSWI {
        static instance: ::protobuf::rt::LazyV2<SwitchStatusXSWI> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchStatusXSWI::new)
    }
}

impl ::protobuf::Clear for SwitchStatusXSWI {
    fn clear(&mut self) {
        self.logicalNodeForEventAndStatus.clear();
        self.DynamicTest.clear();
        self.Pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchStatusXSWI {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchStatusXSWI {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchStatus {
    // message fields
    statusValue: ::protobuf::SingularPtrField<super::commonmodule::StatusValue>,
    switchStatusXSWI: ::protobuf::SingularPtrField<SwitchStatusXSWI>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchStatus {
    fn default() -> &'a SwitchStatus {
        <SwitchStatus as ::protobuf::Message>::default_instance()
    }
}

impl SwitchStatus {
    pub fn new() -> SwitchStatus {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusValue statusValue = 1;


    pub fn get_statusValue(&self) -> &super::commonmodule::StatusValue {
        self.statusValue.as_ref().unwrap_or_else(|| <super::commonmodule::StatusValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusValue(&mut self) {
        self.statusValue.clear();
    }

    pub fn has_statusValue(&self) -> bool {
        self.statusValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusValue(&mut self, v: super::commonmodule::StatusValue) {
        self.statusValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusValue(&mut self) -> &mut super::commonmodule::StatusValue {
        if self.statusValue.is_none() {
            self.statusValue.set_default();
        }
        self.statusValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusValue(&mut self) -> super::commonmodule::StatusValue {
        self.statusValue.take().unwrap_or_else(|| super::commonmodule::StatusValue::new())
    }

    // .switchmodule.SwitchStatusXSWI switchStatusXSWI = 2;


    pub fn get_switchStatusXSWI(&self) -> &SwitchStatusXSWI {
        self.switchStatusXSWI.as_ref().unwrap_or_else(|| <SwitchStatusXSWI as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchStatusXSWI(&mut self) {
        self.switchStatusXSWI.clear();
    }

    pub fn has_switchStatusXSWI(&self) -> bool {
        self.switchStatusXSWI.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchStatusXSWI(&mut self, v: SwitchStatusXSWI) {
        self.switchStatusXSWI = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchStatusXSWI(&mut self) -> &mut SwitchStatusXSWI {
        if self.switchStatusXSWI.is_none() {
            self.switchStatusXSWI.set_default();
        }
        self.switchStatusXSWI.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchStatusXSWI(&mut self) -> SwitchStatusXSWI {
        self.switchStatusXSWI.take().unwrap_or_else(|| SwitchStatusXSWI::new())
    }
}

impl ::protobuf::Message for SwitchStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.statusValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchStatusXSWI {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchStatusXSWI)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchStatusXSWI.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchStatusXSWI.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchStatus {
        SwitchStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusValue>>(
                "statusValue",
                |m: &SwitchStatus| { &m.statusValue },
                |m: &mut SwitchStatus| { &mut m.statusValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchStatusXSWI>>(
                "switchStatusXSWI",
                |m: &SwitchStatus| { &m.switchStatusXSWI },
                |m: &mut SwitchStatus| { &mut m.switchStatusXSWI },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchStatus>(
                "SwitchStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchStatus {
        static instance: ::protobuf::rt::LazyV2<SwitchStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchStatus::new)
    }
}

impl ::protobuf::Clear for SwitchStatus {
    fn clear(&mut self) {
        self.statusValue.clear();
        self.switchStatusXSWI.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchStatusProfile {
    // message fields
    statusMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::StatusMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    protectedSwitch: ::protobuf::SingularPtrField<ProtectedSwitch>,
    switchStatus: ::protobuf::SingularPtrField<SwitchStatus>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchStatusProfile {
    fn default() -> &'a SwitchStatusProfile {
        <SwitchStatusProfile as ::protobuf::Message>::default_instance()
    }
}

impl SwitchStatusProfile {
    pub fn new() -> SwitchStatusProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusMessageInfo statusMessageInfo = 1;


    pub fn get_statusMessageInfo(&self) -> &super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::StatusMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusMessageInfo(&mut self) {
        self.statusMessageInfo.clear();
    }

    pub fn has_statusMessageInfo(&self) -> bool {
        self.statusMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusMessageInfo(&mut self, v: super::commonmodule::StatusMessageInfo) {
        self.statusMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusMessageInfo(&mut self) -> &mut super::commonmodule::StatusMessageInfo {
        if self.statusMessageInfo.is_none() {
            self.statusMessageInfo.set_default();
        }
        self.statusMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusMessageInfo(&mut self) -> super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.take().unwrap_or_else(|| super::commonmodule::StatusMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .switchmodule.ProtectedSwitch protectedSwitch = 3;


    pub fn get_protectedSwitch(&self) -> &ProtectedSwitch {
        self.protectedSwitch.as_ref().unwrap_or_else(|| <ProtectedSwitch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_protectedSwitch(&mut self) {
        self.protectedSwitch.clear();
    }

    pub fn has_protectedSwitch(&self) -> bool {
        self.protectedSwitch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protectedSwitch(&mut self, v: ProtectedSwitch) {
        self.protectedSwitch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protectedSwitch(&mut self) -> &mut ProtectedSwitch {
        if self.protectedSwitch.is_none() {
            self.protectedSwitch.set_default();
        }
        self.protectedSwitch.as_mut().unwrap()
    }

    // Take field
    pub fn take_protectedSwitch(&mut self) -> ProtectedSwitch {
        self.protectedSwitch.take().unwrap_or_else(|| ProtectedSwitch::new())
    }

    // .switchmodule.SwitchStatus switchStatus = 4;


    pub fn get_switchStatus(&self) -> &SwitchStatus {
        self.switchStatus.as_ref().unwrap_or_else(|| <SwitchStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchStatus(&mut self) {
        self.switchStatus.clear();
    }

    pub fn has_switchStatus(&self) -> bool {
        self.switchStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchStatus(&mut self, v: SwitchStatus) {
        self.switchStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchStatus(&mut self) -> &mut SwitchStatus {
        if self.switchStatus.is_none() {
            self.switchStatus.set_default();
        }
        self.switchStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchStatus(&mut self) -> SwitchStatus {
        self.switchStatus.take().unwrap_or_else(|| SwitchStatus::new())
    }
}

impl ::protobuf::Message for SwitchStatusProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.statusMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.protectedSwitch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.protectedSwitch)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchStatus)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchStatus.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchStatusProfile {
        SwitchStatusProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusMessageInfo>>(
                "statusMessageInfo",
                |m: &SwitchStatusProfile| { &m.statusMessageInfo },
                |m: &mut SwitchStatusProfile| { &mut m.statusMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &SwitchStatusProfile| { &m.ied },
                |m: &mut SwitchStatusProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtectedSwitch>>(
                "protectedSwitch",
                |m: &SwitchStatusProfile| { &m.protectedSwitch },
                |m: &mut SwitchStatusProfile| { &mut m.protectedSwitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchStatus>>(
                "switchStatus",
                |m: &SwitchStatusProfile| { &m.switchStatus },
                |m: &mut SwitchStatusProfile| { &mut m.switchStatus },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchStatusProfile>(
                "SwitchStatusProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchStatusProfile {
        static instance: ::protobuf::rt::LazyV2<SwitchStatusProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchStatusProfile::new)
    }
}

impl ::protobuf::Clear for SwitchStatusProfile {
    fn clear(&mut self) {
        self.statusMessageInfo.clear();
        self.ied.clear();
        self.protectedSwitch.clear();
        self.switchStatus.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchStatusProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchStatusProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchControlFSCC {
    // message fields
    logicalNodeForControl: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForControl>,
    switchControlScheduleFSCH: ::protobuf::SingularPtrField<super::commonmodule::SwitchControlScheduleFSCH>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchControlFSCC {
    fn default() -> &'a SwitchControlFSCC {
        <SwitchControlFSCC as ::protobuf::Message>::default_instance()
    }
}

impl SwitchControlFSCC {
    pub fn new() -> SwitchControlFSCC {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1;


    pub fn get_logicalNodeForControl(&self) -> &super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForControl(&mut self) {
        self.logicalNodeForControl.clear();
    }

    pub fn has_logicalNodeForControl(&self) -> bool {
        self.logicalNodeForControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForControl(&mut self, v: super::commonmodule::LogicalNodeForControl) {
        self.logicalNodeForControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForControl(&mut self) -> &mut super::commonmodule::LogicalNodeForControl {
        if self.logicalNodeForControl.is_none() {
            self.logicalNodeForControl.set_default();
        }
        self.logicalNodeForControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForControl(&mut self) -> super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForControl::new())
    }

    // .commonmodule.SwitchControlScheduleFSCH switchControlScheduleFSCH = 2;


    pub fn get_switchControlScheduleFSCH(&self) -> &super::commonmodule::SwitchControlScheduleFSCH {
        self.switchControlScheduleFSCH.as_ref().unwrap_or_else(|| <super::commonmodule::SwitchControlScheduleFSCH as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchControlScheduleFSCH(&mut self) {
        self.switchControlScheduleFSCH.clear();
    }

    pub fn has_switchControlScheduleFSCH(&self) -> bool {
        self.switchControlScheduleFSCH.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchControlScheduleFSCH(&mut self, v: super::commonmodule::SwitchControlScheduleFSCH) {
        self.switchControlScheduleFSCH = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchControlScheduleFSCH(&mut self) -> &mut super::commonmodule::SwitchControlScheduleFSCH {
        if self.switchControlScheduleFSCH.is_none() {
            self.switchControlScheduleFSCH.set_default();
        }
        self.switchControlScheduleFSCH.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchControlScheduleFSCH(&mut self) -> super::commonmodule::SwitchControlScheduleFSCH {
        self.switchControlScheduleFSCH.take().unwrap_or_else(|| super::commonmodule::SwitchControlScheduleFSCH::new())
    }
}

impl ::protobuf::Message for SwitchControlFSCC {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchControlScheduleFSCH {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForControl)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchControlScheduleFSCH)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchControlScheduleFSCH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchControlScheduleFSCH.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchControlFSCC {
        SwitchControlFSCC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForControl>>(
                "logicalNodeForControl",
                |m: &SwitchControlFSCC| { &m.logicalNodeForControl },
                |m: &mut SwitchControlFSCC| { &mut m.logicalNodeForControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::SwitchControlScheduleFSCH>>(
                "switchControlScheduleFSCH",
                |m: &SwitchControlFSCC| { &m.switchControlScheduleFSCH },
                |m: &mut SwitchControlFSCC| { &mut m.switchControlScheduleFSCH },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchControlFSCC>(
                "SwitchControlFSCC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchControlFSCC {
        static instance: ::protobuf::rt::LazyV2<SwitchControlFSCC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchControlFSCC::new)
    }
}

impl ::protobuf::Clear for SwitchControlFSCC {
    fn clear(&mut self) {
        self.logicalNodeForControl.clear();
        self.switchControlScheduleFSCH.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchControlFSCC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchControlFSCC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchControl {
    // message fields
    controlValue: ::protobuf::SingularPtrField<super::commonmodule::ControlValue>,
    check: ::protobuf::SingularPtrField<super::commonmodule::CheckConditions>,
    SwitchControlFSCC: ::protobuf::SingularPtrField<SwitchControlFSCC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchControl {
    fn default() -> &'a SwitchControl {
        <SwitchControl as ::protobuf::Message>::default_instance()
    }
}

impl SwitchControl {
    pub fn new() -> SwitchControl {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlValue controlValue = 1;


    pub fn get_controlValue(&self) -> &super::commonmodule::ControlValue {
        self.controlValue.as_ref().unwrap_or_else(|| <super::commonmodule::ControlValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlValue(&mut self) {
        self.controlValue.clear();
    }

    pub fn has_controlValue(&self) -> bool {
        self.controlValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlValue(&mut self, v: super::commonmodule::ControlValue) {
        self.controlValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlValue(&mut self) -> &mut super::commonmodule::ControlValue {
        if self.controlValue.is_none() {
            self.controlValue.set_default();
        }
        self.controlValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlValue(&mut self) -> super::commonmodule::ControlValue {
        self.controlValue.take().unwrap_or_else(|| super::commonmodule::ControlValue::new())
    }

    // .commonmodule.CheckConditions check = 2;


    pub fn get_check(&self) -> &super::commonmodule::CheckConditions {
        self.check.as_ref().unwrap_or_else(|| <super::commonmodule::CheckConditions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check(&mut self) {
        self.check.clear();
    }

    pub fn has_check(&self) -> bool {
        self.check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check(&mut self, v: super::commonmodule::CheckConditions) {
        self.check = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check(&mut self) -> &mut super::commonmodule::CheckConditions {
        if self.check.is_none() {
            self.check.set_default();
        }
        self.check.as_mut().unwrap()
    }

    // Take field
    pub fn take_check(&mut self) -> super::commonmodule::CheckConditions {
        self.check.take().unwrap_or_else(|| super::commonmodule::CheckConditions::new())
    }

    // .switchmodule.SwitchControlFSCC SwitchControlFSCC = 3;


    pub fn get_SwitchControlFSCC(&self) -> &SwitchControlFSCC {
        self.SwitchControlFSCC.as_ref().unwrap_or_else(|| <SwitchControlFSCC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_SwitchControlFSCC(&mut self) {
        self.SwitchControlFSCC.clear();
    }

    pub fn has_SwitchControlFSCC(&self) -> bool {
        self.SwitchControlFSCC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_SwitchControlFSCC(&mut self, v: SwitchControlFSCC) {
        self.SwitchControlFSCC = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_SwitchControlFSCC(&mut self) -> &mut SwitchControlFSCC {
        if self.SwitchControlFSCC.is_none() {
            self.SwitchControlFSCC.set_default();
        }
        self.SwitchControlFSCC.as_mut().unwrap()
    }

    // Take field
    pub fn take_SwitchControlFSCC(&mut self) -> SwitchControlFSCC {
        self.SwitchControlFSCC.take().unwrap_or_else(|| SwitchControlFSCC::new())
    }
}

impl ::protobuf::Message for SwitchControl {
    fn is_initialized(&self) -> bool {
        for v in &self.controlValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.SwitchControlFSCC {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.SwitchControlFSCC)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.SwitchControlFSCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.check.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.SwitchControlFSCC.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchControl {
        SwitchControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlValue>>(
                "controlValue",
                |m: &SwitchControl| { &m.controlValue },
                |m: &mut SwitchControl| { &mut m.controlValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::CheckConditions>>(
                "check",
                |m: &SwitchControl| { &m.check },
                |m: &mut SwitchControl| { &mut m.check },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchControlFSCC>>(
                "SwitchControlFSCC",
                |m: &SwitchControl| { &m.SwitchControlFSCC },
                |m: &mut SwitchControl| { &mut m.SwitchControlFSCC },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchControl>(
                "SwitchControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchControl {
        static instance: ::protobuf::rt::LazyV2<SwitchControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchControl::new)
    }
}

impl ::protobuf::Clear for SwitchControl {
    fn clear(&mut self) {
        self.controlValue.clear();
        self.check.clear();
        self.SwitchControlFSCC.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchControlProfile {
    // message fields
    controlMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ControlMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    protectedSwitch: ::protobuf::SingularPtrField<ProtectedSwitch>,
    switchControl: ::protobuf::SingularPtrField<SwitchControl>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchControlProfile {
    fn default() -> &'a SwitchControlProfile {
        <SwitchControlProfile as ::protobuf::Message>::default_instance()
    }
}

impl SwitchControlProfile {
    pub fn new() -> SwitchControlProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlMessageInfo controlMessageInfo = 1;


    pub fn get_controlMessageInfo(&self) -> &super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ControlMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlMessageInfo(&mut self) {
        self.controlMessageInfo.clear();
    }

    pub fn has_controlMessageInfo(&self) -> bool {
        self.controlMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlMessageInfo(&mut self, v: super::commonmodule::ControlMessageInfo) {
        self.controlMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlMessageInfo(&mut self) -> &mut super::commonmodule::ControlMessageInfo {
        if self.controlMessageInfo.is_none() {
            self.controlMessageInfo.set_default();
        }
        self.controlMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlMessageInfo(&mut self) -> super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.take().unwrap_or_else(|| super::commonmodule::ControlMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .switchmodule.ProtectedSwitch protectedSwitch = 3;


    pub fn get_protectedSwitch(&self) -> &ProtectedSwitch {
        self.protectedSwitch.as_ref().unwrap_or_else(|| <ProtectedSwitch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_protectedSwitch(&mut self) {
        self.protectedSwitch.clear();
    }

    pub fn has_protectedSwitch(&self) -> bool {
        self.protectedSwitch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protectedSwitch(&mut self, v: ProtectedSwitch) {
        self.protectedSwitch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protectedSwitch(&mut self) -> &mut ProtectedSwitch {
        if self.protectedSwitch.is_none() {
            self.protectedSwitch.set_default();
        }
        self.protectedSwitch.as_mut().unwrap()
    }

    // Take field
    pub fn take_protectedSwitch(&mut self) -> ProtectedSwitch {
        self.protectedSwitch.take().unwrap_or_else(|| ProtectedSwitch::new())
    }

    // .switchmodule.SwitchControl switchControl = 4;


    pub fn get_switchControl(&self) -> &SwitchControl {
        self.switchControl.as_ref().unwrap_or_else(|| <SwitchControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchControl(&mut self) {
        self.switchControl.clear();
    }

    pub fn has_switchControl(&self) -> bool {
        self.switchControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchControl(&mut self, v: SwitchControl) {
        self.switchControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchControl(&mut self) -> &mut SwitchControl {
        if self.switchControl.is_none() {
            self.switchControl.set_default();
        }
        self.switchControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchControl(&mut self) -> SwitchControl {
        self.switchControl.take().unwrap_or_else(|| SwitchControl::new())
    }
}

impl ::protobuf::Message for SwitchControlProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.controlMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.protectedSwitch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchControl {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.protectedSwitch)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchControl)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.protectedSwitch.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchControl.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchControlProfile {
        SwitchControlProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlMessageInfo>>(
                "controlMessageInfo",
                |m: &SwitchControlProfile| { &m.controlMessageInfo },
                |m: &mut SwitchControlProfile| { &mut m.controlMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &SwitchControlProfile| { &m.ied },
                |m: &mut SwitchControlProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtectedSwitch>>(
                "protectedSwitch",
                |m: &SwitchControlProfile| { &m.protectedSwitch },
                |m: &mut SwitchControlProfile| { &mut m.protectedSwitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchControl>>(
                "switchControl",
                |m: &SwitchControlProfile| { &m.switchControl },
                |m: &mut SwitchControlProfile| { &mut m.switchControl },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchControlProfile>(
                "SwitchControlProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchControlProfile {
        static instance: ::protobuf::rt::LazyV2<SwitchControlProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchControlProfile::new)
    }
}

impl ::protobuf::Clear for SwitchControlProfile {
    fn clear(&mut self) {
        self.controlMessageInfo.clear();
        self.ied.clear();
        self.protectedSwitch.clear();
        self.switchControl.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchControlProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchControlProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fswitchmodule/switchmodule.proto\x12\x0cswitchmodule\"\xac\x01\n\
    \x19SwitchDiscreteControlXSWI\x12_\n\x15logicalNodeForControl\x18\x01\
    \x20\x01(\x0b2#.commonmodule.LogicalNodeForControlR\x15logicalNodeForCon\
    trolB\x04\x80\xb5\x18\x01\x12,\n\x03Pos\x18\x02\x20\x01(\x0b2\x18.common\
    module.ControlDPCR\x03PosB\0:\0\"\x87\x02\n\x15SwitchDiscreteControl\x12\
    D\n\x0ccontrolValue\x18\x01\x20\x01(\x0b2\x1a.commonmodule.ControlValueR\
    \x0ccontrolValueB\x04\x80\xb5\x18\x01\x125\n\x05check\x18\x02\x20\x01(\
    \x0b2\x1d.commonmodule.CheckConditionsR\x05checkB\0\x12o\n\x19switchDisc\
    reteControlXSWI\x18\x03\x20\x01(\x0b2'.switchmodule.SwitchDiscreteContro\
    lXSWIR\x19switchDiscreteControlXSWIB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\
    :\0\"n\n\x0fProtectedSwitch\x12Y\n\x13conductingEquipment\x18\x01\x20\
    \x01(\x0b2!.commonmodule.ConductingEquipmentR\x13conductingEquipmentB\
    \x04\x80\xb5\x18\x01:\0\"\xe3\x02\n\x1cSwitchDiscreteControlProfile\x12V\
    \n\x12controlMessageInfo\x18\x01\x20\x01(\x0b2\x20.commonmodule.ControlM\
    essageInfoR\x12controlMessageInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ied\x18\
    \x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x90\xb5\x18\x01\x88\
    \xb5\x18\x01\x12Q\n\x0fprotectedSwitch\x18\x03\x20\x01(\x0b2\x1d.switchm\
    odule.ProtectedSwitchR\x0fprotectedSwitchB\x08\x88\xb5\x18\x01\x90\xb5\
    \x18\x01\x12c\n\x15switchDiscreteControl\x18\x04\x20\x01(\x0b2#.switchmo\
    dule.SwitchDiscreteControlR\x15switchDiscreteControlB\x08\x88\xb5\x18\
    \x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\x85\x02\n\x0fSwitchEventXSWI\
    \x12t\n\x1clogicalNodeForEventAndStatus\x18\x01\x20\x01(\x0b2*.commonmod\
    ule.LogicalNodeForEventAndStatusR\x1clogicalNodeForEventAndStatusB\x04\
    \x80\xb5\x18\x01\x12E\n\x0bDynamicTest\x18\x02\x20\x01(\x0b2!.commonmodu\
    le.ENS_DynamicTestKindR\x0bDynamicTestB\0\x123\n\x03Pos\x18\x03\x20\x01(\
    \x0b2\x17.commonmodule.StatusDPSR\x03PosB\x08\x88\xb5\x18\x01\x90\xb5\
    \x18\x01:\0\"\xa2\x01\n\x0bSwitchEvent\x12>\n\neventValue\x18\x01\x20\
    \x01(\x0b2\x18.commonmodule.EventValueR\neventValueB\x04\x80\xb5\x18\x01\
    \x12Q\n\x0fswitchEventXSWI\x18\x02\x20\x01(\x0b2\x1d.switchmodule.Switch\
    EventXSWIR\x0fswitchEventXSWIB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\
    \xb5\x02\n\x12SwitchEventProfile\x12P\n\x10eventMessageInfo\x18\x01\x20\
    \x01(\x0b2\x1e.commonmodule.EventMessageInfoR\x10eventMessageInfoB\x04\
    \x80\xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IE\
    DR\x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12Q\n\x0fprotectedSwitch\
    \x18\x03\x20\x01(\x0b2\x1d.switchmodule.ProtectedSwitchR\x0fprotectedSwi\
    tchB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12E\n\x0bswitchEvent\x18\x04\
    \x20\x01(\x0b2\x19.switchmodule.SwitchEventR\x0bswitchEventB\x08\x88\xb5\
    \x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\x98\x03\n\rSwitchReading\
    \x12\x86\x01\n\"conductingEquipmentTerminalReading\x18\x01\x20\x01(\x0b2\
    0.commonmodule.ConductingEquipmentTerminalReadingR\"conductingEquipmentT\
    erminalReadingB\x04\x80\xb5\x18\x01\x12E\n\x0fdiffReadingMMXU\x18\x02\
    \x20\x01(\x0b2\x19.commonmodule.ReadingMMXUR\x0fdiffReadingMMXUB\0\x127\
    \n\tphaseMMTN\x18\x03\x20\x01(\x0b2\x17.commonmodule.PhaseMMTNR\tphaseMM\
    TNB\0\x12=\n\x0breadingMMTR\x18\x04\x20\x01(\x0b2\x19.commonmodule.Readi\
    ngMMTRR\x0breadingMMTRB\0\x12=\n\x0breadingMMXU\x18\x05\x20\x01(\x0b2\
    \x19.commonmodule.ReadingMMXUR\x0breadingMMXUB\0:\0\"\xc7\x02\n\x14Switc\
    hReadingProfile\x12V\n\x12readingMessageInfo\x18\x01\x20\x01(\x0b2\x20.c\
    ommonmodule.ReadingMessageInfoR\x12readingMessageInfoB\x04\x80\xb5\x18\
    \x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03iedB\
    \x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12Q\n\x0fprotectedSwitch\x18\x03\
    \x20\x01(\x0b2\x1d.switchmodule.ProtectedSwitchR\x0fprotectedSwitchB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01\x12O\n\rswitchReading\x18\x04\x20\x03(\
    \x0b2\x1b.switchmodule.SwitchReadingR\rswitchReadingB\x0c\x98\xb5\x18\
    \x02\x88\xb5\x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\x86\x02\n\
    \x10SwitchStatusXSWI\x12t\n\x1clogicalNodeForEventAndStatus\x18\x01\x20\
    \x01(\x0b2*.commonmodule.LogicalNodeForEventAndStatusR\x1clogicalNodeFor\
    EventAndStatusB\x04\x80\xb5\x18\x01\x12E\n\x0bDynamicTest\x18\x02\x20\
    \x01(\x0b2!.commonmodule.ENS_DynamicTestKindR\x0bDynamicTestB\0\x123\n\
    \x03Pos\x18\x03\x20\x01(\x0b2\x17.commonmodule.StatusDPSR\x03PosB\x08\
    \x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xa9\x01\n\x0cSwitchStatus\x12A\n\
    \x0bstatusValue\x18\x01\x20\x01(\x0b2\x19.commonmodule.StatusValueR\x0bs\
    tatusValueB\x04\x80\xb5\x18\x01\x12T\n\x10switchStatusXSWI\x18\x02\x20\
    \x01(\x0b2\x1e.switchmodule.SwitchStatusXSWIR\x10switchStatusXSWIB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\xbc\x02\n\x13SwitchStatusProfile\
    \x12S\n\x11statusMessageInfo\x18\x01\x20\x01(\x0b2\x1f.commonmodule.Stat\
    usMessageInfoR\x11statusMessageInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ied\
    \x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x88\xb5\x18\x01\
    \x90\xb5\x18\x01\x12Q\n\x0fprotectedSwitch\x18\x03\x20\x01(\x0b2\x1d.swi\
    tchmodule.ProtectedSwitchR\x0fprotectedSwitchB\x08\x90\xb5\x18\x01\x88\
    \xb5\x18\x01\x12H\n\x0cswitchStatus\x18\x04\x20\x01(\x0b2\x1a.switchmodu\
    le.SwitchStatusR\x0cswitchStatusB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\
    \x04\xc0\xf3\x18\x01\"\xdf\x01\n\x11SwitchControlFSCC\x12_\n\x15logicalN\
    odeForControl\x18\x01\x20\x01(\x0b2#.commonmodule.LogicalNodeForControlR\
    \x15logicalNodeForControlB\x04\x80\xb5\x18\x01\x12g\n\x19switchControlSc\
    heduleFSCH\x18\x02\x20\x01(\x0b2'.commonmodule.SwitchControlScheduleFSCH\
    R\x19switchControlScheduleFSCHB\0:\0\"\xe7\x01\n\rSwitchControl\x12D\n\
    \x0ccontrolValue\x18\x01\x20\x01(\x0b2\x1a.commonmodule.ControlValueR\
    \x0ccontrolValueB\x04\x80\xb5\x18\x01\x125\n\x05check\x18\x02\x20\x01(\
    \x0b2\x1d.commonmodule.CheckConditionsR\x05checkB\0\x12W\n\x11SwitchCont\
    rolFSCC\x18\x03\x20\x01(\x0b2\x1f.switchmodule.SwitchControlFSCCR\x11Swi\
    tchControlFSCCB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xc3\x02\n\x14Sw\
    itchControlProfile\x12V\n\x12controlMessageInfo\x18\x01\x20\x01(\x0b2\
    \x20.commonmodule.ControlMessageInfoR\x12controlMessageInfoB\x04\x80\xb5\
    \x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03ie\
    dB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12Q\n\x0fprotectedSwitch\x18\x03\
    \x20\x01(\x0b2\x1d.switchmodule.ProtectedSwitchR\x0fprotectedSwitchB\x08\
    \x88\xb5\x18\x01\x90\xb5\x18\x01\x12K\n\rswitchControl\x18\x04\x20\x01(\
    \x0b2\x1b.switchmodule.SwitchControlR\rswitchControlB\x08\x90\xb5\x18\
    \x01\x88\xb5\x18\x01:\x04\xc0\xf3\x18\x01B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
