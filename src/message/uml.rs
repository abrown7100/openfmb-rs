// SPDX-FileCopyrightText: 2021 Open Energy Solutions Inc
//
// SPDX-License-Identifier: Apache-2.0

// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `uml.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

/// Extension fields
pub mod exts {

    pub const option_parent_message: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50000, phantom: ::std::marker::PhantomData };

    pub const option_required_field: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50001, phantom: ::std::marker::PhantomData };

    pub const option_multiplicity_min: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeInt32> = ::protobuf::ext::ExtFieldOptional { field_number: 50002, phantom: ::std::marker::PhantomData };

    pub const option_multiplicity_max: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeInt32> = ::protobuf::ext::ExtFieldOptional { field_number: 50003, phantom: ::std::marker::PhantomData };

    pub const option_uuid: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50004, phantom: ::std::marker::PhantomData };

    pub const option_key: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50005, phantom: ::std::marker::PhantomData };

    pub const option_openfmb_profile: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 51000, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tuml.proto\x12\x03uml:U\n\x15option_parent_message\x18\xd0\x86\x03\
    \x20\x01(\x08\x12\x1d.google.protobuf.FieldOptionsR\x13optionParentMessa\
    geB\0:U\n\x15option_required_field\x18\xd1\x86\x03\x20\x01(\x08\x12\x1d.\
    google.protobuf.FieldOptionsR\x13optionRequiredFieldB\0:Y\n\x17option_mu\
    ltiplicity_min\x18\xd2\x86\x03\x20\x01(\x05\x12\x1d.google.protobuf.Fiel\
    dOptionsR\x15optionMultiplicityMinB\0:Y\n\x17option_multiplicity_max\x18\
    \xd3\x86\x03\x20\x01(\x05\x12\x1d.google.protobuf.FieldOptionsR\x15optio\
    nMultiplicityMaxB\0:B\n\x0boption_uuid\x18\xd4\x86\x03\x20\x01(\x08\x12\
    \x1d.google.protobuf.FieldOptionsR\noptionUuidB\0:@\n\noption_key\x18\
    \xd5\x86\x03\x20\x01(\x08\x12\x1d.google.protobuf.FieldOptionsR\toptionK\
    eyB\0:Y\n\x16option_openfmb_profile\x18\xb8\x8e\x03\x20\x01(\x08\x12\x1f\
    .google.protobuf.MessageOptionsR\x14optionOpenfmbProfileB\0B\0b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
