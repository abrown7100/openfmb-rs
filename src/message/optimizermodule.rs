// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `optimizermodule/optimizermodule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorControlScheduleProfileList {
    // message fields
    regulatorControlProfile: ::protobuf::RepeatedField<super::regulatormodule::RegulatorControlProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorControlScheduleProfileList {
    fn default() -> &'a RegulatorControlScheduleProfileList {
        <RegulatorControlScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorControlScheduleProfileList {
    pub fn new() -> RegulatorControlScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .regulatormodule.RegulatorControlProfile regulatorControlProfile = 1;


    pub fn get_regulatorControlProfile(&self) -> &[super::regulatormodule::RegulatorControlProfile] {
        &self.regulatorControlProfile
    }
    pub fn clear_regulatorControlProfile(&mut self) {
        self.regulatorControlProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_regulatorControlProfile(&mut self, v: ::protobuf::RepeatedField<super::regulatormodule::RegulatorControlProfile>) {
        self.regulatorControlProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_regulatorControlProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::regulatormodule::RegulatorControlProfile> {
        &mut self.regulatorControlProfile
    }

    // Take field
    pub fn take_regulatorControlProfile(&mut self) -> ::protobuf::RepeatedField<super::regulatormodule::RegulatorControlProfile> {
        ::std::mem::replace(&mut self.regulatorControlProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RegulatorControlScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.regulatorControlProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.regulatorControlProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.regulatorControlProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.regulatorControlProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorControlScheduleProfileList {
        RegulatorControlScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::regulatormodule::RegulatorControlProfile>>(
                "regulatorControlProfile",
                |m: &RegulatorControlScheduleProfileList| { &m.regulatorControlProfile },
                |m: &mut RegulatorControlScheduleProfileList| { &mut m.regulatorControlProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorControlScheduleProfileList>(
                "RegulatorControlScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorControlScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<RegulatorControlScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorControlScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for RegulatorControlScheduleProfileList {
    fn clear(&mut self) {
        self.regulatorControlProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorControlScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorControlScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SolarControlScheduleProfileList {
    // message fields
    solarControlProfile: ::protobuf::RepeatedField<super::solarmodule::SolarControlProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SolarControlScheduleProfileList {
    fn default() -> &'a SolarControlScheduleProfileList {
        <SolarControlScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl SolarControlScheduleProfileList {
    pub fn new() -> SolarControlScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .solarmodule.SolarControlProfile solarControlProfile = 1;


    pub fn get_solarControlProfile(&self) -> &[super::solarmodule::SolarControlProfile] {
        &self.solarControlProfile
    }
    pub fn clear_solarControlProfile(&mut self) {
        self.solarControlProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_solarControlProfile(&mut self, v: ::protobuf::RepeatedField<super::solarmodule::SolarControlProfile>) {
        self.solarControlProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_solarControlProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::solarmodule::SolarControlProfile> {
        &mut self.solarControlProfile
    }

    // Take field
    pub fn take_solarControlProfile(&mut self) -> ::protobuf::RepeatedField<super::solarmodule::SolarControlProfile> {
        ::std::mem::replace(&mut self.solarControlProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SolarControlScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.solarControlProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.solarControlProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.solarControlProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.solarControlProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SolarControlScheduleProfileList {
        SolarControlScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::solarmodule::SolarControlProfile>>(
                "solarControlProfile",
                |m: &SolarControlScheduleProfileList| { &m.solarControlProfile },
                |m: &mut SolarControlScheduleProfileList| { &mut m.solarControlProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SolarControlScheduleProfileList>(
                "SolarControlScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SolarControlScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<SolarControlScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SolarControlScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for SolarControlScheduleProfileList {
    fn clear(&mut self) {
        self.solarControlProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SolarControlScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SolarControlScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct PlannedInterconnectionScheduleProfileList {
    // message fields
    plannedInterconnectionScheduleProfile: ::protobuf::RepeatedField<super::interconnectionmodule::PlannedInterconnectionScheduleProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlannedInterconnectionScheduleProfileList {
    fn default() -> &'a PlannedInterconnectionScheduleProfileList {
        <PlannedInterconnectionScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl PlannedInterconnectionScheduleProfileList {
    pub fn new() -> PlannedInterconnectionScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .interconnectionmodule.PlannedInterconnectionScheduleProfile plannedInterconnectionScheduleProfile = 1;


    pub fn get_plannedInterconnectionScheduleProfile(&self) -> &[super::interconnectionmodule::PlannedInterconnectionScheduleProfile] {
        &self.plannedInterconnectionScheduleProfile
    }
    pub fn clear_plannedInterconnectionScheduleProfile(&mut self) {
        self.plannedInterconnectionScheduleProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_plannedInterconnectionScheduleProfile(&mut self, v: ::protobuf::RepeatedField<super::interconnectionmodule::PlannedInterconnectionScheduleProfile>) {
        self.plannedInterconnectionScheduleProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plannedInterconnectionScheduleProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::interconnectionmodule::PlannedInterconnectionScheduleProfile> {
        &mut self.plannedInterconnectionScheduleProfile
    }

    // Take field
    pub fn take_plannedInterconnectionScheduleProfile(&mut self) -> ::protobuf::RepeatedField<super::interconnectionmodule::PlannedInterconnectionScheduleProfile> {
        ::std::mem::replace(&mut self.plannedInterconnectionScheduleProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PlannedInterconnectionScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.plannedInterconnectionScheduleProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.plannedInterconnectionScheduleProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.plannedInterconnectionScheduleProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.plannedInterconnectionScheduleProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlannedInterconnectionScheduleProfileList {
        PlannedInterconnectionScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::interconnectionmodule::PlannedInterconnectionScheduleProfile>>(
                "plannedInterconnectionScheduleProfile",
                |m: &PlannedInterconnectionScheduleProfileList| { &m.plannedInterconnectionScheduleProfile },
                |m: &mut PlannedInterconnectionScheduleProfileList| { &mut m.plannedInterconnectionScheduleProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlannedInterconnectionScheduleProfileList>(
                "PlannedInterconnectionScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlannedInterconnectionScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<PlannedInterconnectionScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlannedInterconnectionScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for PlannedInterconnectionScheduleProfileList {
    fn clear(&mut self) {
        self.plannedInterconnectionScheduleProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlannedInterconnectionScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlannedInterconnectionScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct LoadControlScheduleProfileList {
    // message fields
    loadControlProfile: ::protobuf::RepeatedField<super::loadmodule::LoadControlProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoadControlScheduleProfileList {
    fn default() -> &'a LoadControlScheduleProfileList {
        <LoadControlScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl LoadControlScheduleProfileList {
    pub fn new() -> LoadControlScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .loadmodule.LoadControlProfile loadControlProfile = 1;


    pub fn get_loadControlProfile(&self) -> &[super::loadmodule::LoadControlProfile] {
        &self.loadControlProfile
    }
    pub fn clear_loadControlProfile(&mut self) {
        self.loadControlProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_loadControlProfile(&mut self, v: ::protobuf::RepeatedField<super::loadmodule::LoadControlProfile>) {
        self.loadControlProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_loadControlProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::loadmodule::LoadControlProfile> {
        &mut self.loadControlProfile
    }

    // Take field
    pub fn take_loadControlProfile(&mut self) -> ::protobuf::RepeatedField<super::loadmodule::LoadControlProfile> {
        ::std::mem::replace(&mut self.loadControlProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LoadControlScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.loadControlProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.loadControlProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.loadControlProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.loadControlProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoadControlScheduleProfileList {
        LoadControlScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::loadmodule::LoadControlProfile>>(
                "loadControlProfile",
                |m: &LoadControlScheduleProfileList| { &m.loadControlProfile },
                |m: &mut LoadControlScheduleProfileList| { &mut m.loadControlProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoadControlScheduleProfileList>(
                "LoadControlScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoadControlScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<LoadControlScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoadControlScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for LoadControlScheduleProfileList {
    fn clear(&mut self) {
        self.loadControlProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoadControlScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoadControlScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ESSControlScheduleProfileList {
    // message fields
    essControlProfile: ::protobuf::RepeatedField<super::essmodule::ESSControlProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ESSControlScheduleProfileList {
    fn default() -> &'a ESSControlScheduleProfileList {
        <ESSControlScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl ESSControlScheduleProfileList {
    pub fn new() -> ESSControlScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .essmodule.ESSControlProfile essControlProfile = 1;


    pub fn get_essControlProfile(&self) -> &[super::essmodule::ESSControlProfile] {
        &self.essControlProfile
    }
    pub fn clear_essControlProfile(&mut self) {
        self.essControlProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_essControlProfile(&mut self, v: ::protobuf::RepeatedField<super::essmodule::ESSControlProfile>) {
        self.essControlProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_essControlProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::essmodule::ESSControlProfile> {
        &mut self.essControlProfile
    }

    // Take field
    pub fn take_essControlProfile(&mut self) -> ::protobuf::RepeatedField<super::essmodule::ESSControlProfile> {
        ::std::mem::replace(&mut self.essControlProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ESSControlScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.essControlProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.essControlProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.essControlProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.essControlProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ESSControlScheduleProfileList {
        ESSControlScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::essmodule::ESSControlProfile>>(
                "essControlProfile",
                |m: &ESSControlScheduleProfileList| { &m.essControlProfile },
                |m: &mut ESSControlScheduleProfileList| { &mut m.essControlProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ESSControlScheduleProfileList>(
                "ESSControlScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ESSControlScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<ESSControlScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ESSControlScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for ESSControlScheduleProfileList {
    fn clear(&mut self) {
        self.essControlProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ESSControlScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ESSControlScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SwitchControlScheduleProfileList {
    // message fields
    switchControlProfile: ::protobuf::RepeatedField<super::switchmodule::SwitchControlProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SwitchControlScheduleProfileList {
    fn default() -> &'a SwitchControlScheduleProfileList {
        <SwitchControlScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl SwitchControlScheduleProfileList {
    pub fn new() -> SwitchControlScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .switchmodule.SwitchControlProfile switchControlProfile = 1;


    pub fn get_switchControlProfile(&self) -> &[super::switchmodule::SwitchControlProfile] {
        &self.switchControlProfile
    }
    pub fn clear_switchControlProfile(&mut self) {
        self.switchControlProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_switchControlProfile(&mut self, v: ::protobuf::RepeatedField<super::switchmodule::SwitchControlProfile>) {
        self.switchControlProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_switchControlProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::switchmodule::SwitchControlProfile> {
        &mut self.switchControlProfile
    }

    // Take field
    pub fn take_switchControlProfile(&mut self) -> ::protobuf::RepeatedField<super::switchmodule::SwitchControlProfile> {
        ::std::mem::replace(&mut self.switchControlProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SwitchControlScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.switchControlProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.switchControlProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.switchControlProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.switchControlProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwitchControlScheduleProfileList {
        SwitchControlScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::switchmodule::SwitchControlProfile>>(
                "switchControlProfile",
                |m: &SwitchControlScheduleProfileList| { &m.switchControlProfile },
                |m: &mut SwitchControlScheduleProfileList| { &mut m.switchControlProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SwitchControlScheduleProfileList>(
                "SwitchControlScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SwitchControlScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<SwitchControlScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SwitchControlScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for SwitchControlScheduleProfileList {
    fn clear(&mut self) {
        self.switchControlProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwitchControlScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwitchControlScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct GenerationControlScheduleProfileList {
    // message fields
    generationControlProfile: ::protobuf::RepeatedField<super::generationmodule::GenerationControlProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerationControlScheduleProfileList {
    fn default() -> &'a GenerationControlScheduleProfileList {
        <GenerationControlScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl GenerationControlScheduleProfileList {
    pub fn new() -> GenerationControlScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .generationmodule.GenerationControlProfile generationControlProfile = 1;


    pub fn get_generationControlProfile(&self) -> &[super::generationmodule::GenerationControlProfile] {
        &self.generationControlProfile
    }
    pub fn clear_generationControlProfile(&mut self) {
        self.generationControlProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_generationControlProfile(&mut self, v: ::protobuf::RepeatedField<super::generationmodule::GenerationControlProfile>) {
        self.generationControlProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_generationControlProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::generationmodule::GenerationControlProfile> {
        &mut self.generationControlProfile
    }

    // Take field
    pub fn take_generationControlProfile(&mut self) -> ::protobuf::RepeatedField<super::generationmodule::GenerationControlProfile> {
        ::std::mem::replace(&mut self.generationControlProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenerationControlScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.generationControlProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.generationControlProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.generationControlProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.generationControlProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerationControlScheduleProfileList {
        GenerationControlScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::generationmodule::GenerationControlProfile>>(
                "generationControlProfile",
                |m: &GenerationControlScheduleProfileList| { &m.generationControlProfile },
                |m: &mut GenerationControlScheduleProfileList| { &mut m.generationControlProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerationControlScheduleProfileList>(
                "GenerationControlScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenerationControlScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<GenerationControlScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenerationControlScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for GenerationControlScheduleProfileList {
    fn clear(&mut self) {
        self.generationControlProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerationControlScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerationControlScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct PlannedOptimizerScheduleProfile {
    // message fields
    optimizationMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::OptimizationMessageInfo>,
    applicationSystem: ::protobuf::SingularPtrField<super::commonmodule::ApplicationSystem>,
    essControlScheduleProfileList: ::protobuf::SingularPtrField<ESSControlScheduleProfileList>,
    generationControlScheduleProfileList: ::protobuf::SingularPtrField<GenerationControlScheduleProfileList>,
    loadControlScheduleProfileList: ::protobuf::SingularPtrField<LoadControlScheduleProfileList>,
    plannedInterconnectionScheduleProfileList: ::protobuf::SingularPtrField<PlannedInterconnectionScheduleProfileList>,
    regulatorControlScheduleProfileList: ::protobuf::SingularPtrField<RegulatorControlScheduleProfileList>,
    solarControlScheduleProfileList: ::protobuf::SingularPtrField<SolarControlScheduleProfileList>,
    switchControlScheduleProfileList: ::protobuf::SingularPtrField<SwitchControlScheduleProfileList>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlannedOptimizerScheduleProfile {
    fn default() -> &'a PlannedOptimizerScheduleProfile {
        <PlannedOptimizerScheduleProfile as ::protobuf::Message>::default_instance()
    }
}

impl PlannedOptimizerScheduleProfile {
    pub fn new() -> PlannedOptimizerScheduleProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.OptimizationMessageInfo optimizationMessageInfo = 1;


    pub fn get_optimizationMessageInfo(&self) -> &super::commonmodule::OptimizationMessageInfo {
        self.optimizationMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::OptimizationMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_optimizationMessageInfo(&mut self) {
        self.optimizationMessageInfo.clear();
    }

    pub fn has_optimizationMessageInfo(&self) -> bool {
        self.optimizationMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optimizationMessageInfo(&mut self, v: super::commonmodule::OptimizationMessageInfo) {
        self.optimizationMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_optimizationMessageInfo(&mut self) -> &mut super::commonmodule::OptimizationMessageInfo {
        if self.optimizationMessageInfo.is_none() {
            self.optimizationMessageInfo.set_default();
        }
        self.optimizationMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_optimizationMessageInfo(&mut self) -> super::commonmodule::OptimizationMessageInfo {
        self.optimizationMessageInfo.take().unwrap_or_else(|| super::commonmodule::OptimizationMessageInfo::new())
    }

    // .commonmodule.ApplicationSystem applicationSystem = 2;


    pub fn get_applicationSystem(&self) -> &super::commonmodule::ApplicationSystem {
        self.applicationSystem.as_ref().unwrap_or_else(|| <super::commonmodule::ApplicationSystem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_applicationSystem(&mut self) {
        self.applicationSystem.clear();
    }

    pub fn has_applicationSystem(&self) -> bool {
        self.applicationSystem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applicationSystem(&mut self, v: super::commonmodule::ApplicationSystem) {
        self.applicationSystem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_applicationSystem(&mut self) -> &mut super::commonmodule::ApplicationSystem {
        if self.applicationSystem.is_none() {
            self.applicationSystem.set_default();
        }
        self.applicationSystem.as_mut().unwrap()
    }

    // Take field
    pub fn take_applicationSystem(&mut self) -> super::commonmodule::ApplicationSystem {
        self.applicationSystem.take().unwrap_or_else(|| super::commonmodule::ApplicationSystem::new())
    }

    // .optimizermodule.ESSControlScheduleProfileList essControlScheduleProfileList = 3;


    pub fn get_essControlScheduleProfileList(&self) -> &ESSControlScheduleProfileList {
        self.essControlScheduleProfileList.as_ref().unwrap_or_else(|| <ESSControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_essControlScheduleProfileList(&mut self) {
        self.essControlScheduleProfileList.clear();
    }

    pub fn has_essControlScheduleProfileList(&self) -> bool {
        self.essControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_essControlScheduleProfileList(&mut self, v: ESSControlScheduleProfileList) {
        self.essControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_essControlScheduleProfileList(&mut self) -> &mut ESSControlScheduleProfileList {
        if self.essControlScheduleProfileList.is_none() {
            self.essControlScheduleProfileList.set_default();
        }
        self.essControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_essControlScheduleProfileList(&mut self) -> ESSControlScheduleProfileList {
        self.essControlScheduleProfileList.take().unwrap_or_else(|| ESSControlScheduleProfileList::new())
    }

    // .optimizermodule.GenerationControlScheduleProfileList generationControlScheduleProfileList = 4;


    pub fn get_generationControlScheduleProfileList(&self) -> &GenerationControlScheduleProfileList {
        self.generationControlScheduleProfileList.as_ref().unwrap_or_else(|| <GenerationControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_generationControlScheduleProfileList(&mut self) {
        self.generationControlScheduleProfileList.clear();
    }

    pub fn has_generationControlScheduleProfileList(&self) -> bool {
        self.generationControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_generationControlScheduleProfileList(&mut self, v: GenerationControlScheduleProfileList) {
        self.generationControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_generationControlScheduleProfileList(&mut self) -> &mut GenerationControlScheduleProfileList {
        if self.generationControlScheduleProfileList.is_none() {
            self.generationControlScheduleProfileList.set_default();
        }
        self.generationControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_generationControlScheduleProfileList(&mut self) -> GenerationControlScheduleProfileList {
        self.generationControlScheduleProfileList.take().unwrap_or_else(|| GenerationControlScheduleProfileList::new())
    }

    // .optimizermodule.LoadControlScheduleProfileList loadControlScheduleProfileList = 5;


    pub fn get_loadControlScheduleProfileList(&self) -> &LoadControlScheduleProfileList {
        self.loadControlScheduleProfileList.as_ref().unwrap_or_else(|| <LoadControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_loadControlScheduleProfileList(&mut self) {
        self.loadControlScheduleProfileList.clear();
    }

    pub fn has_loadControlScheduleProfileList(&self) -> bool {
        self.loadControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_loadControlScheduleProfileList(&mut self, v: LoadControlScheduleProfileList) {
        self.loadControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loadControlScheduleProfileList(&mut self) -> &mut LoadControlScheduleProfileList {
        if self.loadControlScheduleProfileList.is_none() {
            self.loadControlScheduleProfileList.set_default();
        }
        self.loadControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_loadControlScheduleProfileList(&mut self) -> LoadControlScheduleProfileList {
        self.loadControlScheduleProfileList.take().unwrap_or_else(|| LoadControlScheduleProfileList::new())
    }

    // .optimizermodule.PlannedInterconnectionScheduleProfileList plannedInterconnectionScheduleProfileList = 6;


    pub fn get_plannedInterconnectionScheduleProfileList(&self) -> &PlannedInterconnectionScheduleProfileList {
        self.plannedInterconnectionScheduleProfileList.as_ref().unwrap_or_else(|| <PlannedInterconnectionScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_plannedInterconnectionScheduleProfileList(&mut self) {
        self.plannedInterconnectionScheduleProfileList.clear();
    }

    pub fn has_plannedInterconnectionScheduleProfileList(&self) -> bool {
        self.plannedInterconnectionScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plannedInterconnectionScheduleProfileList(&mut self, v: PlannedInterconnectionScheduleProfileList) {
        self.plannedInterconnectionScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plannedInterconnectionScheduleProfileList(&mut self) -> &mut PlannedInterconnectionScheduleProfileList {
        if self.plannedInterconnectionScheduleProfileList.is_none() {
            self.plannedInterconnectionScheduleProfileList.set_default();
        }
        self.plannedInterconnectionScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_plannedInterconnectionScheduleProfileList(&mut self) -> PlannedInterconnectionScheduleProfileList {
        self.plannedInterconnectionScheduleProfileList.take().unwrap_or_else(|| PlannedInterconnectionScheduleProfileList::new())
    }

    // .optimizermodule.RegulatorControlScheduleProfileList regulatorControlScheduleProfileList = 7;


    pub fn get_regulatorControlScheduleProfileList(&self) -> &RegulatorControlScheduleProfileList {
        self.regulatorControlScheduleProfileList.as_ref().unwrap_or_else(|| <RegulatorControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorControlScheduleProfileList(&mut self) {
        self.regulatorControlScheduleProfileList.clear();
    }

    pub fn has_regulatorControlScheduleProfileList(&self) -> bool {
        self.regulatorControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorControlScheduleProfileList(&mut self, v: RegulatorControlScheduleProfileList) {
        self.regulatorControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorControlScheduleProfileList(&mut self) -> &mut RegulatorControlScheduleProfileList {
        if self.regulatorControlScheduleProfileList.is_none() {
            self.regulatorControlScheduleProfileList.set_default();
        }
        self.regulatorControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorControlScheduleProfileList(&mut self) -> RegulatorControlScheduleProfileList {
        self.regulatorControlScheduleProfileList.take().unwrap_or_else(|| RegulatorControlScheduleProfileList::new())
    }

    // .optimizermodule.SolarControlScheduleProfileList solarControlScheduleProfileList = 8;


    pub fn get_solarControlScheduleProfileList(&self) -> &SolarControlScheduleProfileList {
        self.solarControlScheduleProfileList.as_ref().unwrap_or_else(|| <SolarControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_solarControlScheduleProfileList(&mut self) {
        self.solarControlScheduleProfileList.clear();
    }

    pub fn has_solarControlScheduleProfileList(&self) -> bool {
        self.solarControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_solarControlScheduleProfileList(&mut self, v: SolarControlScheduleProfileList) {
        self.solarControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_solarControlScheduleProfileList(&mut self) -> &mut SolarControlScheduleProfileList {
        if self.solarControlScheduleProfileList.is_none() {
            self.solarControlScheduleProfileList.set_default();
        }
        self.solarControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_solarControlScheduleProfileList(&mut self) -> SolarControlScheduleProfileList {
        self.solarControlScheduleProfileList.take().unwrap_or_else(|| SolarControlScheduleProfileList::new())
    }

    // .optimizermodule.SwitchControlScheduleProfileList switchControlScheduleProfileList = 9;


    pub fn get_switchControlScheduleProfileList(&self) -> &SwitchControlScheduleProfileList {
        self.switchControlScheduleProfileList.as_ref().unwrap_or_else(|| <SwitchControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchControlScheduleProfileList(&mut self) {
        self.switchControlScheduleProfileList.clear();
    }

    pub fn has_switchControlScheduleProfileList(&self) -> bool {
        self.switchControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchControlScheduleProfileList(&mut self, v: SwitchControlScheduleProfileList) {
        self.switchControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchControlScheduleProfileList(&mut self) -> &mut SwitchControlScheduleProfileList {
        if self.switchControlScheduleProfileList.is_none() {
            self.switchControlScheduleProfileList.set_default();
        }
        self.switchControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchControlScheduleProfileList(&mut self) -> SwitchControlScheduleProfileList {
        self.switchControlScheduleProfileList.take().unwrap_or_else(|| SwitchControlScheduleProfileList::new())
    }
}

impl ::protobuf::Message for PlannedOptimizerScheduleProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.optimizationMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.applicationSystem {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.essControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.generationControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.loadControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.plannedInterconnectionScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.solarControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.optimizationMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.applicationSystem)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.essControlScheduleProfileList)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.generationControlScheduleProfileList)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.loadControlScheduleProfileList)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plannedInterconnectionScheduleProfileList)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorControlScheduleProfileList)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.solarControlScheduleProfileList)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchControlScheduleProfileList)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.optimizationMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.applicationSystem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.essControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.generationControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.loadControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.plannedInterconnectionScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.solarControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.optimizationMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.applicationSystem.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.essControlScheduleProfileList.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.generationControlScheduleProfileList.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.loadControlScheduleProfileList.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.plannedInterconnectionScheduleProfileList.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorControlScheduleProfileList.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.solarControlScheduleProfileList.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchControlScheduleProfileList.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlannedOptimizerScheduleProfile {
        PlannedOptimizerScheduleProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::OptimizationMessageInfo>>(
                "optimizationMessageInfo",
                |m: &PlannedOptimizerScheduleProfile| { &m.optimizationMessageInfo },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.optimizationMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ApplicationSystem>>(
                "applicationSystem",
                |m: &PlannedOptimizerScheduleProfile| { &m.applicationSystem },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.applicationSystem },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ESSControlScheduleProfileList>>(
                "essControlScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.essControlScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.essControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GenerationControlScheduleProfileList>>(
                "generationControlScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.generationControlScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.generationControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LoadControlScheduleProfileList>>(
                "loadControlScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.loadControlScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.loadControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PlannedInterconnectionScheduleProfileList>>(
                "plannedInterconnectionScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.plannedInterconnectionScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.plannedInterconnectionScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorControlScheduleProfileList>>(
                "regulatorControlScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.regulatorControlScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.regulatorControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SolarControlScheduleProfileList>>(
                "solarControlScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.solarControlScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.solarControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchControlScheduleProfileList>>(
                "switchControlScheduleProfileList",
                |m: &PlannedOptimizerScheduleProfile| { &m.switchControlScheduleProfileList },
                |m: &mut PlannedOptimizerScheduleProfile| { &mut m.switchControlScheduleProfileList },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlannedOptimizerScheduleProfile>(
                "PlannedOptimizerScheduleProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlannedOptimizerScheduleProfile {
        static instance: ::protobuf::rt::LazyV2<PlannedOptimizerScheduleProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlannedOptimizerScheduleProfile::new)
    }
}

impl ::protobuf::Clear for PlannedOptimizerScheduleProfile {
    fn clear(&mut self) {
        self.optimizationMessageInfo.clear();
        self.applicationSystem.clear();
        self.essControlScheduleProfileList.clear();
        self.generationControlScheduleProfileList.clear();
        self.loadControlScheduleProfileList.clear();
        self.plannedInterconnectionScheduleProfileList.clear();
        self.regulatorControlScheduleProfileList.clear();
        self.solarControlScheduleProfileList.clear();
        self.switchControlScheduleProfileList.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlannedOptimizerScheduleProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlannedOptimizerScheduleProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestedInterconnectionScheduleProfileList {
    // message fields
    requestedInterconnectionScheduleProfile: ::protobuf::RepeatedField<super::interconnectionmodule::RequestedInterconnectionScheduleProfile>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestedInterconnectionScheduleProfileList {
    fn default() -> &'a RequestedInterconnectionScheduleProfileList {
        <RequestedInterconnectionScheduleProfileList as ::protobuf::Message>::default_instance()
    }
}

impl RequestedInterconnectionScheduleProfileList {
    pub fn new() -> RequestedInterconnectionScheduleProfileList {
        ::std::default::Default::default()
    }

    // repeated .interconnectionmodule.RequestedInterconnectionScheduleProfile requestedInterconnectionScheduleProfile = 1;


    pub fn get_requestedInterconnectionScheduleProfile(&self) -> &[super::interconnectionmodule::RequestedInterconnectionScheduleProfile] {
        &self.requestedInterconnectionScheduleProfile
    }
    pub fn clear_requestedInterconnectionScheduleProfile(&mut self) {
        self.requestedInterconnectionScheduleProfile.clear();
    }

    // Param is passed by value, moved
    pub fn set_requestedInterconnectionScheduleProfile(&mut self, v: ::protobuf::RepeatedField<super::interconnectionmodule::RequestedInterconnectionScheduleProfile>) {
        self.requestedInterconnectionScheduleProfile = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requestedInterconnectionScheduleProfile(&mut self) -> &mut ::protobuf::RepeatedField<super::interconnectionmodule::RequestedInterconnectionScheduleProfile> {
        &mut self.requestedInterconnectionScheduleProfile
    }

    // Take field
    pub fn take_requestedInterconnectionScheduleProfile(&mut self) -> ::protobuf::RepeatedField<super::interconnectionmodule::RequestedInterconnectionScheduleProfile> {
        ::std::mem::replace(&mut self.requestedInterconnectionScheduleProfile, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RequestedInterconnectionScheduleProfileList {
    fn is_initialized(&self) -> bool {
        for v in &self.requestedInterconnectionScheduleProfile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requestedInterconnectionScheduleProfile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.requestedInterconnectionScheduleProfile {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.requestedInterconnectionScheduleProfile {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestedInterconnectionScheduleProfileList {
        RequestedInterconnectionScheduleProfileList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::interconnectionmodule::RequestedInterconnectionScheduleProfile>>(
                "requestedInterconnectionScheduleProfile",
                |m: &RequestedInterconnectionScheduleProfileList| { &m.requestedInterconnectionScheduleProfile },
                |m: &mut RequestedInterconnectionScheduleProfileList| { &mut m.requestedInterconnectionScheduleProfile },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestedInterconnectionScheduleProfileList>(
                "RequestedInterconnectionScheduleProfileList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestedInterconnectionScheduleProfileList {
        static instance: ::protobuf::rt::LazyV2<RequestedInterconnectionScheduleProfileList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestedInterconnectionScheduleProfileList::new)
    }
}

impl ::protobuf::Clear for RequestedInterconnectionScheduleProfileList {
    fn clear(&mut self) {
        self.requestedInterconnectionScheduleProfile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestedInterconnectionScheduleProfileList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestedInterconnectionScheduleProfileList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RequestedOptimizerScheduleProfile {
    // message fields
    optimizationMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::OptimizationMessageInfo>,
    applicationSystem: ::protobuf::SingularPtrField<super::commonmodule::ApplicationSystem>,
    essControlScheduleProfileList: ::protobuf::SingularPtrField<ESSControlScheduleProfileList>,
    generationControlScheduleProfileList: ::protobuf::SingularPtrField<GenerationControlScheduleProfileList>,
    loadControlScheduleProfileList: ::protobuf::SingularPtrField<LoadControlScheduleProfileList>,
    regulatorControlScheduleProfileList: ::protobuf::SingularPtrField<RegulatorControlScheduleProfileList>,
    requestedInterconnectionScheduleProfileList: ::protobuf::SingularPtrField<RequestedInterconnectionScheduleProfileList>,
    solarControlScheduleProfileList: ::protobuf::SingularPtrField<SolarControlScheduleProfileList>,
    switchControlScheduleProfileList: ::protobuf::SingularPtrField<SwitchControlScheduleProfileList>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestedOptimizerScheduleProfile {
    fn default() -> &'a RequestedOptimizerScheduleProfile {
        <RequestedOptimizerScheduleProfile as ::protobuf::Message>::default_instance()
    }
}

impl RequestedOptimizerScheduleProfile {
    pub fn new() -> RequestedOptimizerScheduleProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.OptimizationMessageInfo optimizationMessageInfo = 1;


    pub fn get_optimizationMessageInfo(&self) -> &super::commonmodule::OptimizationMessageInfo {
        self.optimizationMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::OptimizationMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_optimizationMessageInfo(&mut self) {
        self.optimizationMessageInfo.clear();
    }

    pub fn has_optimizationMessageInfo(&self) -> bool {
        self.optimizationMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optimizationMessageInfo(&mut self, v: super::commonmodule::OptimizationMessageInfo) {
        self.optimizationMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_optimizationMessageInfo(&mut self) -> &mut super::commonmodule::OptimizationMessageInfo {
        if self.optimizationMessageInfo.is_none() {
            self.optimizationMessageInfo.set_default();
        }
        self.optimizationMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_optimizationMessageInfo(&mut self) -> super::commonmodule::OptimizationMessageInfo {
        self.optimizationMessageInfo.take().unwrap_or_else(|| super::commonmodule::OptimizationMessageInfo::new())
    }

    // .commonmodule.ApplicationSystem applicationSystem = 2;


    pub fn get_applicationSystem(&self) -> &super::commonmodule::ApplicationSystem {
        self.applicationSystem.as_ref().unwrap_or_else(|| <super::commonmodule::ApplicationSystem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_applicationSystem(&mut self) {
        self.applicationSystem.clear();
    }

    pub fn has_applicationSystem(&self) -> bool {
        self.applicationSystem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applicationSystem(&mut self, v: super::commonmodule::ApplicationSystem) {
        self.applicationSystem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_applicationSystem(&mut self) -> &mut super::commonmodule::ApplicationSystem {
        if self.applicationSystem.is_none() {
            self.applicationSystem.set_default();
        }
        self.applicationSystem.as_mut().unwrap()
    }

    // Take field
    pub fn take_applicationSystem(&mut self) -> super::commonmodule::ApplicationSystem {
        self.applicationSystem.take().unwrap_or_else(|| super::commonmodule::ApplicationSystem::new())
    }

    // .optimizermodule.ESSControlScheduleProfileList essControlScheduleProfileList = 3;


    pub fn get_essControlScheduleProfileList(&self) -> &ESSControlScheduleProfileList {
        self.essControlScheduleProfileList.as_ref().unwrap_or_else(|| <ESSControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_essControlScheduleProfileList(&mut self) {
        self.essControlScheduleProfileList.clear();
    }

    pub fn has_essControlScheduleProfileList(&self) -> bool {
        self.essControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_essControlScheduleProfileList(&mut self, v: ESSControlScheduleProfileList) {
        self.essControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_essControlScheduleProfileList(&mut self) -> &mut ESSControlScheduleProfileList {
        if self.essControlScheduleProfileList.is_none() {
            self.essControlScheduleProfileList.set_default();
        }
        self.essControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_essControlScheduleProfileList(&mut self) -> ESSControlScheduleProfileList {
        self.essControlScheduleProfileList.take().unwrap_or_else(|| ESSControlScheduleProfileList::new())
    }

    // .optimizermodule.GenerationControlScheduleProfileList generationControlScheduleProfileList = 4;


    pub fn get_generationControlScheduleProfileList(&self) -> &GenerationControlScheduleProfileList {
        self.generationControlScheduleProfileList.as_ref().unwrap_or_else(|| <GenerationControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_generationControlScheduleProfileList(&mut self) {
        self.generationControlScheduleProfileList.clear();
    }

    pub fn has_generationControlScheduleProfileList(&self) -> bool {
        self.generationControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_generationControlScheduleProfileList(&mut self, v: GenerationControlScheduleProfileList) {
        self.generationControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_generationControlScheduleProfileList(&mut self) -> &mut GenerationControlScheduleProfileList {
        if self.generationControlScheduleProfileList.is_none() {
            self.generationControlScheduleProfileList.set_default();
        }
        self.generationControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_generationControlScheduleProfileList(&mut self) -> GenerationControlScheduleProfileList {
        self.generationControlScheduleProfileList.take().unwrap_or_else(|| GenerationControlScheduleProfileList::new())
    }

    // .optimizermodule.LoadControlScheduleProfileList loadControlScheduleProfileList = 5;


    pub fn get_loadControlScheduleProfileList(&self) -> &LoadControlScheduleProfileList {
        self.loadControlScheduleProfileList.as_ref().unwrap_or_else(|| <LoadControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_loadControlScheduleProfileList(&mut self) {
        self.loadControlScheduleProfileList.clear();
    }

    pub fn has_loadControlScheduleProfileList(&self) -> bool {
        self.loadControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_loadControlScheduleProfileList(&mut self, v: LoadControlScheduleProfileList) {
        self.loadControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loadControlScheduleProfileList(&mut self) -> &mut LoadControlScheduleProfileList {
        if self.loadControlScheduleProfileList.is_none() {
            self.loadControlScheduleProfileList.set_default();
        }
        self.loadControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_loadControlScheduleProfileList(&mut self) -> LoadControlScheduleProfileList {
        self.loadControlScheduleProfileList.take().unwrap_or_else(|| LoadControlScheduleProfileList::new())
    }

    // .optimizermodule.RegulatorControlScheduleProfileList regulatorControlScheduleProfileList = 6;


    pub fn get_regulatorControlScheduleProfileList(&self) -> &RegulatorControlScheduleProfileList {
        self.regulatorControlScheduleProfileList.as_ref().unwrap_or_else(|| <RegulatorControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorControlScheduleProfileList(&mut self) {
        self.regulatorControlScheduleProfileList.clear();
    }

    pub fn has_regulatorControlScheduleProfileList(&self) -> bool {
        self.regulatorControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorControlScheduleProfileList(&mut self, v: RegulatorControlScheduleProfileList) {
        self.regulatorControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorControlScheduleProfileList(&mut self) -> &mut RegulatorControlScheduleProfileList {
        if self.regulatorControlScheduleProfileList.is_none() {
            self.regulatorControlScheduleProfileList.set_default();
        }
        self.regulatorControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorControlScheduleProfileList(&mut self) -> RegulatorControlScheduleProfileList {
        self.regulatorControlScheduleProfileList.take().unwrap_or_else(|| RegulatorControlScheduleProfileList::new())
    }

    // .optimizermodule.RequestedInterconnectionScheduleProfileList requestedInterconnectionScheduleProfileList = 7;


    pub fn get_requestedInterconnectionScheduleProfileList(&self) -> &RequestedInterconnectionScheduleProfileList {
        self.requestedInterconnectionScheduleProfileList.as_ref().unwrap_or_else(|| <RequestedInterconnectionScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_requestedInterconnectionScheduleProfileList(&mut self) {
        self.requestedInterconnectionScheduleProfileList.clear();
    }

    pub fn has_requestedInterconnectionScheduleProfileList(&self) -> bool {
        self.requestedInterconnectionScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestedInterconnectionScheduleProfileList(&mut self, v: RequestedInterconnectionScheduleProfileList) {
        self.requestedInterconnectionScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requestedInterconnectionScheduleProfileList(&mut self) -> &mut RequestedInterconnectionScheduleProfileList {
        if self.requestedInterconnectionScheduleProfileList.is_none() {
            self.requestedInterconnectionScheduleProfileList.set_default();
        }
        self.requestedInterconnectionScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_requestedInterconnectionScheduleProfileList(&mut self) -> RequestedInterconnectionScheduleProfileList {
        self.requestedInterconnectionScheduleProfileList.take().unwrap_or_else(|| RequestedInterconnectionScheduleProfileList::new())
    }

    // .optimizermodule.SolarControlScheduleProfileList solarControlScheduleProfileList = 8;


    pub fn get_solarControlScheduleProfileList(&self) -> &SolarControlScheduleProfileList {
        self.solarControlScheduleProfileList.as_ref().unwrap_or_else(|| <SolarControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_solarControlScheduleProfileList(&mut self) {
        self.solarControlScheduleProfileList.clear();
    }

    pub fn has_solarControlScheduleProfileList(&self) -> bool {
        self.solarControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_solarControlScheduleProfileList(&mut self, v: SolarControlScheduleProfileList) {
        self.solarControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_solarControlScheduleProfileList(&mut self) -> &mut SolarControlScheduleProfileList {
        if self.solarControlScheduleProfileList.is_none() {
            self.solarControlScheduleProfileList.set_default();
        }
        self.solarControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_solarControlScheduleProfileList(&mut self) -> SolarControlScheduleProfileList {
        self.solarControlScheduleProfileList.take().unwrap_or_else(|| SolarControlScheduleProfileList::new())
    }

    // .optimizermodule.SwitchControlScheduleProfileList switchControlScheduleProfileList = 9;


    pub fn get_switchControlScheduleProfileList(&self) -> &SwitchControlScheduleProfileList {
        self.switchControlScheduleProfileList.as_ref().unwrap_or_else(|| <SwitchControlScheduleProfileList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_switchControlScheduleProfileList(&mut self) {
        self.switchControlScheduleProfileList.clear();
    }

    pub fn has_switchControlScheduleProfileList(&self) -> bool {
        self.switchControlScheduleProfileList.is_some()
    }

    // Param is passed by value, moved
    pub fn set_switchControlScheduleProfileList(&mut self, v: SwitchControlScheduleProfileList) {
        self.switchControlScheduleProfileList = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_switchControlScheduleProfileList(&mut self) -> &mut SwitchControlScheduleProfileList {
        if self.switchControlScheduleProfileList.is_none() {
            self.switchControlScheduleProfileList.set_default();
        }
        self.switchControlScheduleProfileList.as_mut().unwrap()
    }

    // Take field
    pub fn take_switchControlScheduleProfileList(&mut self) -> SwitchControlScheduleProfileList {
        self.switchControlScheduleProfileList.take().unwrap_or_else(|| SwitchControlScheduleProfileList::new())
    }
}

impl ::protobuf::Message for RequestedOptimizerScheduleProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.optimizationMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.applicationSystem {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.essControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.generationControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.loadControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.requestedInterconnectionScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.solarControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.switchControlScheduleProfileList {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.optimizationMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.applicationSystem)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.essControlScheduleProfileList)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.generationControlScheduleProfileList)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.loadControlScheduleProfileList)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorControlScheduleProfileList)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.requestedInterconnectionScheduleProfileList)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.solarControlScheduleProfileList)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.switchControlScheduleProfileList)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.optimizationMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.applicationSystem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.essControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.generationControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.loadControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.requestedInterconnectionScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.solarControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.switchControlScheduleProfileList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.optimizationMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.applicationSystem.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.essControlScheduleProfileList.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.generationControlScheduleProfileList.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.loadControlScheduleProfileList.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorControlScheduleProfileList.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.requestedInterconnectionScheduleProfileList.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.solarControlScheduleProfileList.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.switchControlScheduleProfileList.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestedOptimizerScheduleProfile {
        RequestedOptimizerScheduleProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::OptimizationMessageInfo>>(
                "optimizationMessageInfo",
                |m: &RequestedOptimizerScheduleProfile| { &m.optimizationMessageInfo },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.optimizationMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ApplicationSystem>>(
                "applicationSystem",
                |m: &RequestedOptimizerScheduleProfile| { &m.applicationSystem },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.applicationSystem },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ESSControlScheduleProfileList>>(
                "essControlScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.essControlScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.essControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GenerationControlScheduleProfileList>>(
                "generationControlScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.generationControlScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.generationControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LoadControlScheduleProfileList>>(
                "loadControlScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.loadControlScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.loadControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorControlScheduleProfileList>>(
                "regulatorControlScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.regulatorControlScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.regulatorControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestedInterconnectionScheduleProfileList>>(
                "requestedInterconnectionScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.requestedInterconnectionScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.requestedInterconnectionScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SolarControlScheduleProfileList>>(
                "solarControlScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.solarControlScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.solarControlScheduleProfileList },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SwitchControlScheduleProfileList>>(
                "switchControlScheduleProfileList",
                |m: &RequestedOptimizerScheduleProfile| { &m.switchControlScheduleProfileList },
                |m: &mut RequestedOptimizerScheduleProfile| { &mut m.switchControlScheduleProfileList },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestedOptimizerScheduleProfile>(
                "RequestedOptimizerScheduleProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestedOptimizerScheduleProfile {
        static instance: ::protobuf::rt::LazyV2<RequestedOptimizerScheduleProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestedOptimizerScheduleProfile::new)
    }
}

impl ::protobuf::Clear for RequestedOptimizerScheduleProfile {
    fn clear(&mut self) {
        self.optimizationMessageInfo.clear();
        self.applicationSystem.clear();
        self.essControlScheduleProfileList.clear();
        self.generationControlScheduleProfileList.clear();
        self.loadControlScheduleProfileList.clear();
        self.regulatorControlScheduleProfileList.clear();
        self.requestedInterconnectionScheduleProfileList.clear();
        self.solarControlScheduleProfileList.clear();
        self.switchControlScheduleProfileList.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestedOptimizerScheduleProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestedOptimizerScheduleProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%optimizermodule/optimizermodule.proto\x12\x0foptimizermodule\"\x95\
    \x01\n#RegulatorControlScheduleProfileList\x12l\n\x17regulatorControlPro\
    file\x18\x01\x20\x03(\x0b2(.regulatormodule.RegulatorControlProfileR\x17\
    regulatorControlProfileB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\x81\
    \x01\n\x1fSolarControlScheduleProfileList\x12\\\n\x13solarControlProfile\
    \x18\x01\x20\x03(\x0b2\x20.solarmodule.SolarControlProfileR\x13solarCont\
    rolProfileB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xcc\x01\n)PlannedIn\
    terconnectionScheduleProfileList\x12\x9c\x01\n%plannedInterconnectionSch\
    eduleProfile\x18\x01\x20\x03(\x0b2<.interconnectionmodule.PlannedInterco\
    nnectionScheduleProfileR%plannedInterconnectionScheduleProfileB\x08\x88\
    \xb5\x18\x01\x90\xb5\x18\x01:\0\"|\n\x1eLoadControlScheduleProfileList\
    \x12X\n\x12loadControlProfile\x18\x01\x20\x03(\x0b2\x1e.loadmodule.LoadC\
    ontrolProfileR\x12loadControlProfileB\x08\x90\xb5\x18\x01\x88\xb5\x18\
    \x01:\0\"w\n\x1dESSControlScheduleProfileList\x12T\n\x11essControlProfil\
    e\x18\x01\x20\x03(\x0b2\x1c.essmodule.ESSControlProfileR\x11essControlPr\
    ofileB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\x86\x01\n\x20SwitchContr\
    olScheduleProfileList\x12`\n\x14switchControlProfile\x18\x01\x20\x03(\
    \x0b2\".switchmodule.SwitchControlProfileR\x14switchControlProfileB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\x9a\x01\n$GenerationControlSchedul\
    eProfileList\x12p\n\x18generationControlProfile\x18\x01\x20\x03(\x0b2*.g\
    enerationmodule.GenerationControlProfileR\x18generationControlProfileB\
    \x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"\x8f\t\n\x1fPlannedOptimizerSch\
    eduleProfile\x12e\n\x17optimizationMessageInfo\x18\x01\x20\x01(\x0b2%.co\
    mmonmodule.OptimizationMessageInfoR\x17optimizationMessageInfoB\x04\x80\
    \xb5\x18\x01\x12W\n\x11applicationSystem\x18\x02\x20\x01(\x0b2\x1f.commo\
    nmodule.ApplicationSystemR\x11applicationSystemB\x08\x90\xb5\x18\x01\x88\
    \xb5\x18\x01\x12v\n\x1dessControlScheduleProfileList\x18\x03\x20\x01(\
    \x0b2..optimizermodule.ESSControlScheduleProfileListR\x1dessControlSched\
    uleProfileListB\0\x12\x8b\x01\n$generationControlScheduleProfileList\x18\
    \x04\x20\x01(\x0b25.optimizermodule.GenerationControlScheduleProfileList\
    R$generationControlScheduleProfileListB\0\x12y\n\x1eloadControlScheduleP\
    rofileList\x18\x05\x20\x01(\x0b2/.optimizermodule.LoadControlSchedulePro\
    fileListR\x1eloadControlScheduleProfileListB\0\x12\x9a\x01\n)plannedInte\
    rconnectionScheduleProfileList\x18\x06\x20\x01(\x0b2:.optimizermodule.Pl\
    annedInterconnectionScheduleProfileListR)plannedInterconnectionScheduleP\
    rofileListB\0\x12\x88\x01\n#regulatorControlScheduleProfileList\x18\x07\
    \x20\x01(\x0b24.optimizermodule.RegulatorControlScheduleProfileListR#reg\
    ulatorControlScheduleProfileListB\0\x12|\n\x1fsolarControlScheduleProfil\
    eList\x18\x08\x20\x01(\x0b20.optimizermodule.SolarControlScheduleProfile\
    ListR\x1fsolarControlScheduleProfileListB\0\x12\x7f\n\x20switchControlSc\
    heduleProfileList\x18\t\x20\x01(\x0b21.optimizermodule.SwitchControlSche\
    duleProfileListR\x20switchControlScheduleProfileListB\0:\x04\xc0\xf3\x18\
    \x01\"\xd4\x01\n+RequestedInterconnectionScheduleProfileList\x12\xa2\x01\
    \n'requestedInterconnectionScheduleProfile\x18\x01\x20\x03(\x0b2>.interc\
    onnectionmodule.RequestedInterconnectionScheduleProfileR'requestedInterc\
    onnectionScheduleProfileB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\x97\t\
    \n!RequestedOptimizerScheduleProfile\x12e\n\x17optimizationMessageInfo\
    \x18\x01\x20\x01(\x0b2%.commonmodule.OptimizationMessageInfoR\x17optimiz\
    ationMessageInfoB\x04\x80\xb5\x18\x01\x12W\n\x11applicationSystem\x18\
    \x02\x20\x01(\x0b2\x1f.commonmodule.ApplicationSystemR\x11applicationSys\
    temB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12v\n\x1dessControlSchedulePro\
    fileList\x18\x03\x20\x01(\x0b2..optimizermodule.ESSControlScheduleProfil\
    eListR\x1dessControlScheduleProfileListB\0\x12\x8b\x01\n$generationContr\
    olScheduleProfileList\x18\x04\x20\x01(\x0b25.optimizermodule.GenerationC\
    ontrolScheduleProfileListR$generationControlScheduleProfileListB\0\x12y\
    \n\x1eloadControlScheduleProfileList\x18\x05\x20\x01(\x0b2/.optimizermod\
    ule.LoadControlScheduleProfileListR\x1eloadControlScheduleProfileListB\0\
    \x12\x88\x01\n#regulatorControlScheduleProfileList\x18\x06\x20\x01(\x0b2\
    4.optimizermodule.RegulatorControlScheduleProfileListR#regulatorControlS\
    cheduleProfileListB\0\x12\xa0\x01\n+requestedInterconnectionScheduleProf\
    ileList\x18\x07\x20\x01(\x0b2<.optimizermodule.RequestedInterconnectionS\
    cheduleProfileListR+requestedInterconnectionScheduleProfileListB\0\x12|\
    \n\x1fsolarControlScheduleProfileList\x18\x08\x20\x01(\x0b20.optimizermo\
    dule.SolarControlScheduleProfileListR\x1fsolarControlScheduleProfileList\
    B\0\x12\x7f\n\x20switchControlScheduleProfileList\x18\t\x20\x01(\x0b21.o\
    ptimizermodule.SwitchControlScheduleProfileListR\x20switchControlSchedul\
    eProfileListB\0:\x04\xc0\xf3\x18\x01B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
