// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `regulatormodule/regulatormodule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorControlATCC {
    // message fields
    BndCtr: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    BndWid: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    CtlDlTmms: ::protobuf::SingularPtrField<super::commonmodule::ControlING>,
    LDCR: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    LDCX: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    LDCZ: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    ParOp: ::protobuf::SingularPtrField<super::commonmodule::ControlSPC>,
    TapPos: ::protobuf::SingularPtrField<super::commonmodule::ControlISC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorControlATCC {
    fn default() -> &'a RegulatorControlATCC {
        <RegulatorControlATCC as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorControlATCC {
    pub fn new() -> RegulatorControlATCC {
        ::std::default::Default::default()
    }

    // .commonmodule.ASG BndCtr = 1;


    pub fn get_BndCtr(&self) -> &super::commonmodule::ASG {
        self.BndCtr.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_BndCtr(&mut self) {
        self.BndCtr.clear();
    }

    pub fn has_BndCtr(&self) -> bool {
        self.BndCtr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_BndCtr(&mut self, v: super::commonmodule::ASG) {
        self.BndCtr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_BndCtr(&mut self) -> &mut super::commonmodule::ASG {
        if self.BndCtr.is_none() {
            self.BndCtr.set_default();
        }
        self.BndCtr.as_mut().unwrap()
    }

    // Take field
    pub fn take_BndCtr(&mut self) -> super::commonmodule::ASG {
        self.BndCtr.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG BndWid = 2;


    pub fn get_BndWid(&self) -> &super::commonmodule::ASG {
        self.BndWid.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_BndWid(&mut self) {
        self.BndWid.clear();
    }

    pub fn has_BndWid(&self) -> bool {
        self.BndWid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_BndWid(&mut self, v: super::commonmodule::ASG) {
        self.BndWid = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_BndWid(&mut self) -> &mut super::commonmodule::ASG {
        if self.BndWid.is_none() {
            self.BndWid.set_default();
        }
        self.BndWid.as_mut().unwrap()
    }

    // Take field
    pub fn take_BndWid(&mut self) -> super::commonmodule::ASG {
        self.BndWid.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ControlING CtlDlTmms = 3;


    pub fn get_CtlDlTmms(&self) -> &super::commonmodule::ControlING {
        self.CtlDlTmms.as_ref().unwrap_or_else(|| <super::commonmodule::ControlING as ::protobuf::Message>::default_instance())
    }
    pub fn clear_CtlDlTmms(&mut self) {
        self.CtlDlTmms.clear();
    }

    pub fn has_CtlDlTmms(&self) -> bool {
        self.CtlDlTmms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_CtlDlTmms(&mut self, v: super::commonmodule::ControlING) {
        self.CtlDlTmms = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_CtlDlTmms(&mut self) -> &mut super::commonmodule::ControlING {
        if self.CtlDlTmms.is_none() {
            self.CtlDlTmms.set_default();
        }
        self.CtlDlTmms.as_mut().unwrap()
    }

    // Take field
    pub fn take_CtlDlTmms(&mut self) -> super::commonmodule::ControlING {
        self.CtlDlTmms.take().unwrap_or_else(|| super::commonmodule::ControlING::new())
    }

    // .commonmodule.ASG LDCR = 4;


    pub fn get_LDCR(&self) -> &super::commonmodule::ASG {
        self.LDCR.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_LDCR(&mut self) {
        self.LDCR.clear();
    }

    pub fn has_LDCR(&self) -> bool {
        self.LDCR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDCR(&mut self, v: super::commonmodule::ASG) {
        self.LDCR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LDCR(&mut self) -> &mut super::commonmodule::ASG {
        if self.LDCR.is_none() {
            self.LDCR.set_default();
        }
        self.LDCR.as_mut().unwrap()
    }

    // Take field
    pub fn take_LDCR(&mut self) -> super::commonmodule::ASG {
        self.LDCR.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG LDCX = 5;


    pub fn get_LDCX(&self) -> &super::commonmodule::ASG {
        self.LDCX.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_LDCX(&mut self) {
        self.LDCX.clear();
    }

    pub fn has_LDCX(&self) -> bool {
        self.LDCX.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDCX(&mut self, v: super::commonmodule::ASG) {
        self.LDCX = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LDCX(&mut self) -> &mut super::commonmodule::ASG {
        if self.LDCX.is_none() {
            self.LDCX.set_default();
        }
        self.LDCX.as_mut().unwrap()
    }

    // Take field
    pub fn take_LDCX(&mut self) -> super::commonmodule::ASG {
        self.LDCX.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG LDCZ = 6;


    pub fn get_LDCZ(&self) -> &super::commonmodule::ASG {
        self.LDCZ.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_LDCZ(&mut self) {
        self.LDCZ.clear();
    }

    pub fn has_LDCZ(&self) -> bool {
        self.LDCZ.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDCZ(&mut self, v: super::commonmodule::ASG) {
        self.LDCZ = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LDCZ(&mut self) -> &mut super::commonmodule::ASG {
        if self.LDCZ.is_none() {
            self.LDCZ.set_default();
        }
        self.LDCZ.as_mut().unwrap()
    }

    // Take field
    pub fn take_LDCZ(&mut self) -> super::commonmodule::ASG {
        self.LDCZ.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ControlSPC ParOp = 7;


    pub fn get_ParOp(&self) -> &super::commonmodule::ControlSPC {
        self.ParOp.as_ref().unwrap_or_else(|| <super::commonmodule::ControlSPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ParOp(&mut self) {
        self.ParOp.clear();
    }

    pub fn has_ParOp(&self) -> bool {
        self.ParOp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ParOp(&mut self, v: super::commonmodule::ControlSPC) {
        self.ParOp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ParOp(&mut self) -> &mut super::commonmodule::ControlSPC {
        if self.ParOp.is_none() {
            self.ParOp.set_default();
        }
        self.ParOp.as_mut().unwrap()
    }

    // Take field
    pub fn take_ParOp(&mut self) -> super::commonmodule::ControlSPC {
        self.ParOp.take().unwrap_or_else(|| super::commonmodule::ControlSPC::new())
    }

    // .commonmodule.ControlISC TapPos = 8;


    pub fn get_TapPos(&self) -> &super::commonmodule::ControlISC {
        self.TapPos.as_ref().unwrap_or_else(|| <super::commonmodule::ControlISC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_TapPos(&mut self) {
        self.TapPos.clear();
    }

    pub fn has_TapPos(&self) -> bool {
        self.TapPos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_TapPos(&mut self, v: super::commonmodule::ControlISC) {
        self.TapPos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TapPos(&mut self) -> &mut super::commonmodule::ControlISC {
        if self.TapPos.is_none() {
            self.TapPos.set_default();
        }
        self.TapPos.as_mut().unwrap()
    }

    // Take field
    pub fn take_TapPos(&mut self) -> super::commonmodule::ControlISC {
        self.TapPos.take().unwrap_or_else(|| super::commonmodule::ControlISC::new())
    }
}

impl ::protobuf::Message for RegulatorControlATCC {
    fn is_initialized(&self) -> bool {
        for v in &self.BndCtr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.BndWid {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.CtlDlTmms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.LDCR {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.LDCX {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.LDCZ {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ParOp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.TapPos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.BndCtr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.BndWid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.CtlDlTmms)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.LDCR)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.LDCX)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.LDCZ)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ParOp)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.TapPos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.BndCtr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.BndWid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.CtlDlTmms.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.LDCR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.LDCX.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.LDCZ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ParOp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.TapPos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.BndCtr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.BndWid.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.CtlDlTmms.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.LDCR.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.LDCX.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.LDCZ.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ParOp.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.TapPos.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorControlATCC {
        RegulatorControlATCC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "BndCtr",
                |m: &RegulatorControlATCC| { &m.BndCtr },
                |m: &mut RegulatorControlATCC| { &mut m.BndCtr },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "BndWid",
                |m: &RegulatorControlATCC| { &m.BndWid },
                |m: &mut RegulatorControlATCC| { &mut m.BndWid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlING>>(
                "CtlDlTmms",
                |m: &RegulatorControlATCC| { &m.CtlDlTmms },
                |m: &mut RegulatorControlATCC| { &mut m.CtlDlTmms },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "LDCR",
                |m: &RegulatorControlATCC| { &m.LDCR },
                |m: &mut RegulatorControlATCC| { &mut m.LDCR },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "LDCX",
                |m: &RegulatorControlATCC| { &m.LDCX },
                |m: &mut RegulatorControlATCC| { &mut m.LDCX },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "LDCZ",
                |m: &RegulatorControlATCC| { &m.LDCZ },
                |m: &mut RegulatorControlATCC| { &mut m.LDCZ },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlSPC>>(
                "ParOp",
                |m: &RegulatorControlATCC| { &m.ParOp },
                |m: &mut RegulatorControlATCC| { &mut m.ParOp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlISC>>(
                "TapPos",
                |m: &RegulatorControlATCC| { &m.TapPos },
                |m: &mut RegulatorControlATCC| { &mut m.TapPos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorControlATCC>(
                "RegulatorControlATCC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorControlATCC {
        static instance: ::protobuf::rt::LazyV2<RegulatorControlATCC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorControlATCC::new)
    }
}

impl ::protobuf::Clear for RegulatorControlATCC {
    fn clear(&mut self) {
        self.BndCtr.clear();
        self.BndWid.clear();
        self.CtlDlTmms.clear();
        self.LDCR.clear();
        self.LDCX.clear();
        self.LDCZ.clear();
        self.ParOp.clear();
        self.TapPos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorControlATCC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorControlATCC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorPoint {
    // message fields
    control: ::protobuf::SingularPtrField<RegulatorControlATCC>,
    pctVDroop: ::protobuf::SingularPtrField<::protobuf::well_known_types::FloatValue>,
    rampRates: ::protobuf::SingularPtrField<super::commonmodule::RampRate>,
    reactivePwrSetPointEnabled: ::protobuf::SingularPtrField<super::commonmodule::ControlDPC>,
    reset: ::protobuf::SingularPtrField<super::commonmodule::ControlDPC>,
    state: ::protobuf::SingularPtrField<super::commonmodule::Optional_StateKind>,
    voltageSetPointEnabled: ::protobuf::SingularPtrField<super::commonmodule::ControlDPC>,
    startTime: ::protobuf::SingularPtrField<super::commonmodule::Timestamp>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorPoint {
    fn default() -> &'a RegulatorPoint {
        <RegulatorPoint as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorPoint {
    pub fn new() -> RegulatorPoint {
        ::std::default::Default::default()
    }

    // .regulatormodule.RegulatorControlATCC control = 1;


    pub fn get_control(&self) -> &RegulatorControlATCC {
        self.control.as_ref().unwrap_or_else(|| <RegulatorControlATCC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_control(&mut self) {
        self.control.clear();
    }

    pub fn has_control(&self) -> bool {
        self.control.is_some()
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: RegulatorControlATCC) {
        self.control = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_control(&mut self) -> &mut RegulatorControlATCC {
        if self.control.is_none() {
            self.control.set_default();
        }
        self.control.as_mut().unwrap()
    }

    // Take field
    pub fn take_control(&mut self) -> RegulatorControlATCC {
        self.control.take().unwrap_or_else(|| RegulatorControlATCC::new())
    }

    // .google.protobuf.FloatValue pctVDroop = 2;


    pub fn get_pctVDroop(&self) -> &::protobuf::well_known_types::FloatValue {
        self.pctVDroop.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FloatValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pctVDroop(&mut self) {
        self.pctVDroop.clear();
    }

    pub fn has_pctVDroop(&self) -> bool {
        self.pctVDroop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pctVDroop(&mut self, v: ::protobuf::well_known_types::FloatValue) {
        self.pctVDroop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pctVDroop(&mut self) -> &mut ::protobuf::well_known_types::FloatValue {
        if self.pctVDroop.is_none() {
            self.pctVDroop.set_default();
        }
        self.pctVDroop.as_mut().unwrap()
    }

    // Take field
    pub fn take_pctVDroop(&mut self) -> ::protobuf::well_known_types::FloatValue {
        self.pctVDroop.take().unwrap_or_else(|| ::protobuf::well_known_types::FloatValue::new())
    }

    // .commonmodule.RampRate rampRates = 3;


    pub fn get_rampRates(&self) -> &super::commonmodule::RampRate {
        self.rampRates.as_ref().unwrap_or_else(|| <super::commonmodule::RampRate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rampRates(&mut self) {
        self.rampRates.clear();
    }

    pub fn has_rampRates(&self) -> bool {
        self.rampRates.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rampRates(&mut self, v: super::commonmodule::RampRate) {
        self.rampRates = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rampRates(&mut self) -> &mut super::commonmodule::RampRate {
        if self.rampRates.is_none() {
            self.rampRates.set_default();
        }
        self.rampRates.as_mut().unwrap()
    }

    // Take field
    pub fn take_rampRates(&mut self) -> super::commonmodule::RampRate {
        self.rampRates.take().unwrap_or_else(|| super::commonmodule::RampRate::new())
    }

    // .commonmodule.ControlDPC reactivePwrSetPointEnabled = 4;


    pub fn get_reactivePwrSetPointEnabled(&self) -> &super::commonmodule::ControlDPC {
        self.reactivePwrSetPointEnabled.as_ref().unwrap_or_else(|| <super::commonmodule::ControlDPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reactivePwrSetPointEnabled(&mut self) {
        self.reactivePwrSetPointEnabled.clear();
    }

    pub fn has_reactivePwrSetPointEnabled(&self) -> bool {
        self.reactivePwrSetPointEnabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reactivePwrSetPointEnabled(&mut self, v: super::commonmodule::ControlDPC) {
        self.reactivePwrSetPointEnabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reactivePwrSetPointEnabled(&mut self) -> &mut super::commonmodule::ControlDPC {
        if self.reactivePwrSetPointEnabled.is_none() {
            self.reactivePwrSetPointEnabled.set_default();
        }
        self.reactivePwrSetPointEnabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_reactivePwrSetPointEnabled(&mut self) -> super::commonmodule::ControlDPC {
        self.reactivePwrSetPointEnabled.take().unwrap_or_else(|| super::commonmodule::ControlDPC::new())
    }

    // .commonmodule.ControlDPC reset = 5;


    pub fn get_reset(&self) -> &super::commonmodule::ControlDPC {
        self.reset.as_ref().unwrap_or_else(|| <super::commonmodule::ControlDPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reset(&mut self) {
        self.reset.clear();
    }

    pub fn has_reset(&self) -> bool {
        self.reset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset(&mut self, v: super::commonmodule::ControlDPC) {
        self.reset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset(&mut self) -> &mut super::commonmodule::ControlDPC {
        if self.reset.is_none() {
            self.reset.set_default();
        }
        self.reset.as_mut().unwrap()
    }

    // Take field
    pub fn take_reset(&mut self) -> super::commonmodule::ControlDPC {
        self.reset.take().unwrap_or_else(|| super::commonmodule::ControlDPC::new())
    }

    // .commonmodule.Optional_StateKind state = 6;


    pub fn get_state(&self) -> &super::commonmodule::Optional_StateKind {
        self.state.as_ref().unwrap_or_else(|| <super::commonmodule::Optional_StateKind as ::protobuf::Message>::default_instance())
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::commonmodule::Optional_StateKind) {
        self.state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut super::commonmodule::Optional_StateKind {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> super::commonmodule::Optional_StateKind {
        self.state.take().unwrap_or_else(|| super::commonmodule::Optional_StateKind::new())
    }

    // .commonmodule.ControlDPC voltageSetPointEnabled = 7;


    pub fn get_voltageSetPointEnabled(&self) -> &super::commonmodule::ControlDPC {
        self.voltageSetPointEnabled.as_ref().unwrap_or_else(|| <super::commonmodule::ControlDPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_voltageSetPointEnabled(&mut self) {
        self.voltageSetPointEnabled.clear();
    }

    pub fn has_voltageSetPointEnabled(&self) -> bool {
        self.voltageSetPointEnabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voltageSetPointEnabled(&mut self, v: super::commonmodule::ControlDPC) {
        self.voltageSetPointEnabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voltageSetPointEnabled(&mut self) -> &mut super::commonmodule::ControlDPC {
        if self.voltageSetPointEnabled.is_none() {
            self.voltageSetPointEnabled.set_default();
        }
        self.voltageSetPointEnabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_voltageSetPointEnabled(&mut self) -> super::commonmodule::ControlDPC {
        self.voltageSetPointEnabled.take().unwrap_or_else(|| super::commonmodule::ControlDPC::new())
    }

    // .commonmodule.Timestamp startTime = 8;


    pub fn get_startTime(&self) -> &super::commonmodule::Timestamp {
        self.startTime.as_ref().unwrap_or_else(|| <super::commonmodule::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_startTime(&mut self) {
        self.startTime.clear();
    }

    pub fn has_startTime(&self) -> bool {
        self.startTime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startTime(&mut self, v: super::commonmodule::Timestamp) {
        self.startTime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_startTime(&mut self) -> &mut super::commonmodule::Timestamp {
        if self.startTime.is_none() {
            self.startTime.set_default();
        }
        self.startTime.as_mut().unwrap()
    }

    // Take field
    pub fn take_startTime(&mut self) -> super::commonmodule::Timestamp {
        self.startTime.take().unwrap_or_else(|| super::commonmodule::Timestamp::new())
    }
}

impl ::protobuf::Message for RegulatorPoint {
    fn is_initialized(&self) -> bool {
        for v in &self.control {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pctVDroop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rampRates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reactivePwrSetPointEnabled {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.voltageSetPointEnabled {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.startTime {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.control)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pctVDroop)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rampRates)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reactivePwrSetPointEnabled)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reset)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.voltageSetPointEnabled)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.startTime)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.control.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pctVDroop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rampRates.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reactivePwrSetPointEnabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.voltageSetPointEnabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.startTime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.control.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pctVDroop.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rampRates.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reactivePwrSetPointEnabled.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reset.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.voltageSetPointEnabled.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.startTime.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorPoint {
        RegulatorPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorControlATCC>>(
                "control",
                |m: &RegulatorPoint| { &m.control },
                |m: &mut RegulatorPoint| { &mut m.control },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FloatValue>>(
                "pctVDroop",
                |m: &RegulatorPoint| { &m.pctVDroop },
                |m: &mut RegulatorPoint| { &mut m.pctVDroop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::RampRate>>(
                "rampRates",
                |m: &RegulatorPoint| { &m.rampRates },
                |m: &mut RegulatorPoint| { &mut m.rampRates },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlDPC>>(
                "reactivePwrSetPointEnabled",
                |m: &RegulatorPoint| { &m.reactivePwrSetPointEnabled },
                |m: &mut RegulatorPoint| { &mut m.reactivePwrSetPointEnabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlDPC>>(
                "reset",
                |m: &RegulatorPoint| { &m.reset },
                |m: &mut RegulatorPoint| { &mut m.reset },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::Optional_StateKind>>(
                "state",
                |m: &RegulatorPoint| { &m.state },
                |m: &mut RegulatorPoint| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlDPC>>(
                "voltageSetPointEnabled",
                |m: &RegulatorPoint| { &m.voltageSetPointEnabled },
                |m: &mut RegulatorPoint| { &mut m.voltageSetPointEnabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::Timestamp>>(
                "startTime",
                |m: &RegulatorPoint| { &m.startTime },
                |m: &mut RegulatorPoint| { &mut m.startTime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorPoint>(
                "RegulatorPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorPoint {
        static instance: ::protobuf::rt::LazyV2<RegulatorPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorPoint::new)
    }
}

impl ::protobuf::Clear for RegulatorPoint {
    fn clear(&mut self) {
        self.control.clear();
        self.pctVDroop.clear();
        self.rampRates.clear();
        self.reactivePwrSetPointEnabled.clear();
        self.reset.clear();
        self.state.clear();
        self.voltageSetPointEnabled.clear();
        self.startTime.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorCSG {
    // message fields
    crvPts: ::protobuf::RepeatedField<RegulatorPoint>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorCSG {
    fn default() -> &'a RegulatorCSG {
        <RegulatorCSG as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorCSG {
    pub fn new() -> RegulatorCSG {
        ::std::default::Default::default()
    }

    // repeated .regulatormodule.RegulatorPoint crvPts = 1;


    pub fn get_crvPts(&self) -> &[RegulatorPoint] {
        &self.crvPts
    }
    pub fn clear_crvPts(&mut self) {
        self.crvPts.clear();
    }

    // Param is passed by value, moved
    pub fn set_crvPts(&mut self, v: ::protobuf::RepeatedField<RegulatorPoint>) {
        self.crvPts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_crvPts(&mut self) -> &mut ::protobuf::RepeatedField<RegulatorPoint> {
        &mut self.crvPts
    }

    // Take field
    pub fn take_crvPts(&mut self) -> ::protobuf::RepeatedField<RegulatorPoint> {
        ::std::mem::replace(&mut self.crvPts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RegulatorCSG {
    fn is_initialized(&self) -> bool {
        for v in &self.crvPts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.crvPts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.crvPts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.crvPts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorCSG {
        RegulatorCSG::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorPoint>>(
                "crvPts",
                |m: &RegulatorCSG| { &m.crvPts },
                |m: &mut RegulatorCSG| { &mut m.crvPts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorCSG>(
                "RegulatorCSG",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorCSG {
        static instance: ::protobuf::rt::LazyV2<RegulatorCSG> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorCSG::new)
    }
}

impl ::protobuf::Clear for RegulatorCSG {
    fn clear(&mut self) {
        self.crvPts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorCSG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorCSG {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorControlScheduleFSCH {
    // message fields
    ValDCSG: ::protobuf::SingularPtrField<RegulatorCSG>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorControlScheduleFSCH {
    fn default() -> &'a RegulatorControlScheduleFSCH {
        <RegulatorControlScheduleFSCH as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorControlScheduleFSCH {
    pub fn new() -> RegulatorControlScheduleFSCH {
        ::std::default::Default::default()
    }

    // .regulatormodule.RegulatorCSG ValDCSG = 1;


    pub fn get_ValDCSG(&self) -> &RegulatorCSG {
        self.ValDCSG.as_ref().unwrap_or_else(|| <RegulatorCSG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ValDCSG(&mut self) {
        self.ValDCSG.clear();
    }

    pub fn has_ValDCSG(&self) -> bool {
        self.ValDCSG.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ValDCSG(&mut self, v: RegulatorCSG) {
        self.ValDCSG = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ValDCSG(&mut self) -> &mut RegulatorCSG {
        if self.ValDCSG.is_none() {
            self.ValDCSG.set_default();
        }
        self.ValDCSG.as_mut().unwrap()
    }

    // Take field
    pub fn take_ValDCSG(&mut self) -> RegulatorCSG {
        self.ValDCSG.take().unwrap_or_else(|| RegulatorCSG::new())
    }
}

impl ::protobuf::Message for RegulatorControlScheduleFSCH {
    fn is_initialized(&self) -> bool {
        for v in &self.ValDCSG {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ValDCSG)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ValDCSG.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ValDCSG.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorControlScheduleFSCH {
        RegulatorControlScheduleFSCH::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorCSG>>(
                "ValDCSG",
                |m: &RegulatorControlScheduleFSCH| { &m.ValDCSG },
                |m: &mut RegulatorControlScheduleFSCH| { &mut m.ValDCSG },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorControlScheduleFSCH>(
                "RegulatorControlScheduleFSCH",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorControlScheduleFSCH {
        static instance: ::protobuf::rt::LazyV2<RegulatorControlScheduleFSCH> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorControlScheduleFSCH::new)
    }
}

impl ::protobuf::Clear for RegulatorControlScheduleFSCH {
    fn clear(&mut self) {
        self.ValDCSG.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorControlScheduleFSCH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorControlScheduleFSCH {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorControlFSCC {
    // message fields
    controlFSCC: ::protobuf::SingularPtrField<super::commonmodule::ControlFSCC>,
    regulatorControlScheduleFSCH: ::protobuf::SingularPtrField<RegulatorControlScheduleFSCH>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorControlFSCC {
    fn default() -> &'a RegulatorControlFSCC {
        <RegulatorControlFSCC as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorControlFSCC {
    pub fn new() -> RegulatorControlFSCC {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlFSCC controlFSCC = 1;


    pub fn get_controlFSCC(&self) -> &super::commonmodule::ControlFSCC {
        self.controlFSCC.as_ref().unwrap_or_else(|| <super::commonmodule::ControlFSCC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlFSCC(&mut self) {
        self.controlFSCC.clear();
    }

    pub fn has_controlFSCC(&self) -> bool {
        self.controlFSCC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlFSCC(&mut self, v: super::commonmodule::ControlFSCC) {
        self.controlFSCC = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlFSCC(&mut self) -> &mut super::commonmodule::ControlFSCC {
        if self.controlFSCC.is_none() {
            self.controlFSCC.set_default();
        }
        self.controlFSCC.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlFSCC(&mut self) -> super::commonmodule::ControlFSCC {
        self.controlFSCC.take().unwrap_or_else(|| super::commonmodule::ControlFSCC::new())
    }

    // .regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;


    pub fn get_regulatorControlScheduleFSCH(&self) -> &RegulatorControlScheduleFSCH {
        self.regulatorControlScheduleFSCH.as_ref().unwrap_or_else(|| <RegulatorControlScheduleFSCH as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorControlScheduleFSCH(&mut self) {
        self.regulatorControlScheduleFSCH.clear();
    }

    pub fn has_regulatorControlScheduleFSCH(&self) -> bool {
        self.regulatorControlScheduleFSCH.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorControlScheduleFSCH(&mut self, v: RegulatorControlScheduleFSCH) {
        self.regulatorControlScheduleFSCH = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorControlScheduleFSCH(&mut self) -> &mut RegulatorControlScheduleFSCH {
        if self.regulatorControlScheduleFSCH.is_none() {
            self.regulatorControlScheduleFSCH.set_default();
        }
        self.regulatorControlScheduleFSCH.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorControlScheduleFSCH(&mut self) -> RegulatorControlScheduleFSCH {
        self.regulatorControlScheduleFSCH.take().unwrap_or_else(|| RegulatorControlScheduleFSCH::new())
    }
}

impl ::protobuf::Message for RegulatorControlFSCC {
    fn is_initialized(&self) -> bool {
        for v in &self.controlFSCC {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorControlScheduleFSCH {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlFSCC)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorControlScheduleFSCH)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlFSCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorControlScheduleFSCH.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlFSCC.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorControlScheduleFSCH.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorControlFSCC {
        RegulatorControlFSCC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlFSCC>>(
                "controlFSCC",
                |m: &RegulatorControlFSCC| { &m.controlFSCC },
                |m: &mut RegulatorControlFSCC| { &mut m.controlFSCC },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorControlScheduleFSCH>>(
                "regulatorControlScheduleFSCH",
                |m: &RegulatorControlFSCC| { &m.regulatorControlScheduleFSCH },
                |m: &mut RegulatorControlFSCC| { &mut m.regulatorControlScheduleFSCH },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorControlFSCC>(
                "RegulatorControlFSCC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorControlFSCC {
        static instance: ::protobuf::rt::LazyV2<RegulatorControlFSCC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorControlFSCC::new)
    }
}

impl ::protobuf::Clear for RegulatorControlFSCC {
    fn clear(&mut self) {
        self.controlFSCC.clear();
        self.regulatorControlScheduleFSCH.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorControlFSCC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorControlFSCC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorControl {
    // message fields
    controlValue: ::protobuf::SingularPtrField<super::commonmodule::ControlValue>,
    check: ::protobuf::SingularPtrField<super::commonmodule::CheckConditions>,
    regulatorControlFSCC: ::protobuf::SingularPtrField<RegulatorControlFSCC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorControl {
    fn default() -> &'a RegulatorControl {
        <RegulatorControl as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorControl {
    pub fn new() -> RegulatorControl {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlValue controlValue = 1;


    pub fn get_controlValue(&self) -> &super::commonmodule::ControlValue {
        self.controlValue.as_ref().unwrap_or_else(|| <super::commonmodule::ControlValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlValue(&mut self) {
        self.controlValue.clear();
    }

    pub fn has_controlValue(&self) -> bool {
        self.controlValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlValue(&mut self, v: super::commonmodule::ControlValue) {
        self.controlValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlValue(&mut self) -> &mut super::commonmodule::ControlValue {
        if self.controlValue.is_none() {
            self.controlValue.set_default();
        }
        self.controlValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlValue(&mut self) -> super::commonmodule::ControlValue {
        self.controlValue.take().unwrap_or_else(|| super::commonmodule::ControlValue::new())
    }

    // .commonmodule.CheckConditions check = 2;


    pub fn get_check(&self) -> &super::commonmodule::CheckConditions {
        self.check.as_ref().unwrap_or_else(|| <super::commonmodule::CheckConditions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check(&mut self) {
        self.check.clear();
    }

    pub fn has_check(&self) -> bool {
        self.check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check(&mut self, v: super::commonmodule::CheckConditions) {
        self.check = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check(&mut self) -> &mut super::commonmodule::CheckConditions {
        if self.check.is_none() {
            self.check.set_default();
        }
        self.check.as_mut().unwrap()
    }

    // Take field
    pub fn take_check(&mut self) -> super::commonmodule::CheckConditions {
        self.check.take().unwrap_or_else(|| super::commonmodule::CheckConditions::new())
    }

    // .regulatormodule.RegulatorControlFSCC regulatorControlFSCC = 3;


    pub fn get_regulatorControlFSCC(&self) -> &RegulatorControlFSCC {
        self.regulatorControlFSCC.as_ref().unwrap_or_else(|| <RegulatorControlFSCC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorControlFSCC(&mut self) {
        self.regulatorControlFSCC.clear();
    }

    pub fn has_regulatorControlFSCC(&self) -> bool {
        self.regulatorControlFSCC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorControlFSCC(&mut self, v: RegulatorControlFSCC) {
        self.regulatorControlFSCC = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorControlFSCC(&mut self) -> &mut RegulatorControlFSCC {
        if self.regulatorControlFSCC.is_none() {
            self.regulatorControlFSCC.set_default();
        }
        self.regulatorControlFSCC.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorControlFSCC(&mut self) -> RegulatorControlFSCC {
        self.regulatorControlFSCC.take().unwrap_or_else(|| RegulatorControlFSCC::new())
    }
}

impl ::protobuf::Message for RegulatorControl {
    fn is_initialized(&self) -> bool {
        for v in &self.controlValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorControlFSCC {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorControlFSCC)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorControlFSCC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.check.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorControlFSCC.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorControl {
        RegulatorControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlValue>>(
                "controlValue",
                |m: &RegulatorControl| { &m.controlValue },
                |m: &mut RegulatorControl| { &mut m.controlValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::CheckConditions>>(
                "check",
                |m: &RegulatorControl| { &m.check },
                |m: &mut RegulatorControl| { &mut m.check },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorControlFSCC>>(
                "regulatorControlFSCC",
                |m: &RegulatorControl| { &m.regulatorControlFSCC },
                |m: &mut RegulatorControl| { &mut m.regulatorControlFSCC },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorControl>(
                "RegulatorControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorControl {
        static instance: ::protobuf::rt::LazyV2<RegulatorControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorControl::new)
    }
}

impl ::protobuf::Clear for RegulatorControl {
    fn clear(&mut self) {
        self.controlValue.clear();
        self.check.clear();
        self.regulatorControlFSCC.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorSystem {
    // message fields
    conductingEquipment: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipment>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorSystem {
    fn default() -> &'a RegulatorSystem {
        <RegulatorSystem as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorSystem {
    pub fn new() -> RegulatorSystem {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipment conductingEquipment = 1;


    pub fn get_conductingEquipment(&self) -> &super::commonmodule::ConductingEquipment {
        self.conductingEquipment.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipment(&mut self) {
        self.conductingEquipment.clear();
    }

    pub fn has_conductingEquipment(&self) -> bool {
        self.conductingEquipment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipment(&mut self, v: super::commonmodule::ConductingEquipment) {
        self.conductingEquipment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipment(&mut self) -> &mut super::commonmodule::ConductingEquipment {
        if self.conductingEquipment.is_none() {
            self.conductingEquipment.set_default();
        }
        self.conductingEquipment.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipment(&mut self) -> super::commonmodule::ConductingEquipment {
        self.conductingEquipment.take().unwrap_or_else(|| super::commonmodule::ConductingEquipment::new())
    }
}

impl ::protobuf::Message for RegulatorSystem {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipment {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorSystem {
        RegulatorSystem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipment>>(
                "conductingEquipment",
                |m: &RegulatorSystem| { &m.conductingEquipment },
                |m: &mut RegulatorSystem| { &mut m.conductingEquipment },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorSystem>(
                "RegulatorSystem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorSystem {
        static instance: ::protobuf::rt::LazyV2<RegulatorSystem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorSystem::new)
    }
}

impl ::protobuf::Clear for RegulatorSystem {
    fn clear(&mut self) {
        self.conductingEquipment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorSystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorSystem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorControlProfile {
    // message fields
    controlMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ControlMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    regulatorControl: ::protobuf::SingularPtrField<RegulatorControl>,
    regulatorSystem: ::protobuf::SingularPtrField<RegulatorSystem>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorControlProfile {
    fn default() -> &'a RegulatorControlProfile {
        <RegulatorControlProfile as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorControlProfile {
    pub fn new() -> RegulatorControlProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlMessageInfo controlMessageInfo = 1;


    pub fn get_controlMessageInfo(&self) -> &super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ControlMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlMessageInfo(&mut self) {
        self.controlMessageInfo.clear();
    }

    pub fn has_controlMessageInfo(&self) -> bool {
        self.controlMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlMessageInfo(&mut self, v: super::commonmodule::ControlMessageInfo) {
        self.controlMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlMessageInfo(&mut self) -> &mut super::commonmodule::ControlMessageInfo {
        if self.controlMessageInfo.is_none() {
            self.controlMessageInfo.set_default();
        }
        self.controlMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlMessageInfo(&mut self) -> super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.take().unwrap_or_else(|| super::commonmodule::ControlMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .regulatormodule.RegulatorControl regulatorControl = 3;


    pub fn get_regulatorControl(&self) -> &RegulatorControl {
        self.regulatorControl.as_ref().unwrap_or_else(|| <RegulatorControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorControl(&mut self) {
        self.regulatorControl.clear();
    }

    pub fn has_regulatorControl(&self) -> bool {
        self.regulatorControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorControl(&mut self, v: RegulatorControl) {
        self.regulatorControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorControl(&mut self) -> &mut RegulatorControl {
        if self.regulatorControl.is_none() {
            self.regulatorControl.set_default();
        }
        self.regulatorControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorControl(&mut self) -> RegulatorControl {
        self.regulatorControl.take().unwrap_or_else(|| RegulatorControl::new())
    }

    // .regulatormodule.RegulatorSystem regulatorSystem = 4;


    pub fn get_regulatorSystem(&self) -> &RegulatorSystem {
        self.regulatorSystem.as_ref().unwrap_or_else(|| <RegulatorSystem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorSystem(&mut self) {
        self.regulatorSystem.clear();
    }

    pub fn has_regulatorSystem(&self) -> bool {
        self.regulatorSystem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorSystem(&mut self, v: RegulatorSystem) {
        self.regulatorSystem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorSystem(&mut self) -> &mut RegulatorSystem {
        if self.regulatorSystem.is_none() {
            self.regulatorSystem.set_default();
        }
        self.regulatorSystem.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorSystem(&mut self) -> RegulatorSystem {
        self.regulatorSystem.take().unwrap_or_else(|| RegulatorSystem::new())
    }
}

impl ::protobuf::Message for RegulatorControlProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.controlMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorSystem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorControl)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorSystem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorControl.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorControlProfile {
        RegulatorControlProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlMessageInfo>>(
                "controlMessageInfo",
                |m: &RegulatorControlProfile| { &m.controlMessageInfo },
                |m: &mut RegulatorControlProfile| { &mut m.controlMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RegulatorControlProfile| { &m.ied },
                |m: &mut RegulatorControlProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorControl>>(
                "regulatorControl",
                |m: &RegulatorControlProfile| { &m.regulatorControl },
                |m: &mut RegulatorControlProfile| { &mut m.regulatorControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorSystem>>(
                "regulatorSystem",
                |m: &RegulatorControlProfile| { &m.regulatorSystem },
                |m: &mut RegulatorControlProfile| { &mut m.regulatorSystem },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorControlProfile>(
                "RegulatorControlProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorControlProfile {
        static instance: ::protobuf::rt::LazyV2<RegulatorControlProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorControlProfile::new)
    }
}

impl ::protobuf::Clear for RegulatorControlProfile {
    fn clear(&mut self) {
        self.controlMessageInfo.clear();
        self.ied.clear();
        self.regulatorControl.clear();
        self.regulatorSystem.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorControlProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorControlProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorEventAndStatusATCC {
    // message fields
    BndCtr: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    BndWid: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    LDCR: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    LDCX: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    LDCZ: ::protobuf::SingularPtrField<super::commonmodule::ASG>,
    ParOp: ::protobuf::SingularPtrField<super::commonmodule::StatusSPC>,
    TapOpErr: ::protobuf::SingularPtrField<super::commonmodule::StatusSPS>,
    TapPos: ::protobuf::SingularPtrField<super::commonmodule::StatusISC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorEventAndStatusATCC {
    fn default() -> &'a RegulatorEventAndStatusATCC {
        <RegulatorEventAndStatusATCC as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorEventAndStatusATCC {
    pub fn new() -> RegulatorEventAndStatusATCC {
        ::std::default::Default::default()
    }

    // .commonmodule.ASG BndCtr = 1;


    pub fn get_BndCtr(&self) -> &super::commonmodule::ASG {
        self.BndCtr.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_BndCtr(&mut self) {
        self.BndCtr.clear();
    }

    pub fn has_BndCtr(&self) -> bool {
        self.BndCtr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_BndCtr(&mut self, v: super::commonmodule::ASG) {
        self.BndCtr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_BndCtr(&mut self) -> &mut super::commonmodule::ASG {
        if self.BndCtr.is_none() {
            self.BndCtr.set_default();
        }
        self.BndCtr.as_mut().unwrap()
    }

    // Take field
    pub fn take_BndCtr(&mut self) -> super::commonmodule::ASG {
        self.BndCtr.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG BndWid = 2;


    pub fn get_BndWid(&self) -> &super::commonmodule::ASG {
        self.BndWid.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_BndWid(&mut self) {
        self.BndWid.clear();
    }

    pub fn has_BndWid(&self) -> bool {
        self.BndWid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_BndWid(&mut self, v: super::commonmodule::ASG) {
        self.BndWid = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_BndWid(&mut self) -> &mut super::commonmodule::ASG {
        if self.BndWid.is_none() {
            self.BndWid.set_default();
        }
        self.BndWid.as_mut().unwrap()
    }

    // Take field
    pub fn take_BndWid(&mut self) -> super::commonmodule::ASG {
        self.BndWid.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG LDCR = 3;


    pub fn get_LDCR(&self) -> &super::commonmodule::ASG {
        self.LDCR.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_LDCR(&mut self) {
        self.LDCR.clear();
    }

    pub fn has_LDCR(&self) -> bool {
        self.LDCR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDCR(&mut self, v: super::commonmodule::ASG) {
        self.LDCR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LDCR(&mut self) -> &mut super::commonmodule::ASG {
        if self.LDCR.is_none() {
            self.LDCR.set_default();
        }
        self.LDCR.as_mut().unwrap()
    }

    // Take field
    pub fn take_LDCR(&mut self) -> super::commonmodule::ASG {
        self.LDCR.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG LDCX = 4;


    pub fn get_LDCX(&self) -> &super::commonmodule::ASG {
        self.LDCX.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_LDCX(&mut self) {
        self.LDCX.clear();
    }

    pub fn has_LDCX(&self) -> bool {
        self.LDCX.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDCX(&mut self, v: super::commonmodule::ASG) {
        self.LDCX = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LDCX(&mut self) -> &mut super::commonmodule::ASG {
        if self.LDCX.is_none() {
            self.LDCX.set_default();
        }
        self.LDCX.as_mut().unwrap()
    }

    // Take field
    pub fn take_LDCX(&mut self) -> super::commonmodule::ASG {
        self.LDCX.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.ASG LDCZ = 5;


    pub fn get_LDCZ(&self) -> &super::commonmodule::ASG {
        self.LDCZ.as_ref().unwrap_or_else(|| <super::commonmodule::ASG as ::protobuf::Message>::default_instance())
    }
    pub fn clear_LDCZ(&mut self) {
        self.LDCZ.clear();
    }

    pub fn has_LDCZ(&self) -> bool {
        self.LDCZ.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDCZ(&mut self, v: super::commonmodule::ASG) {
        self.LDCZ = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_LDCZ(&mut self) -> &mut super::commonmodule::ASG {
        if self.LDCZ.is_none() {
            self.LDCZ.set_default();
        }
        self.LDCZ.as_mut().unwrap()
    }

    // Take field
    pub fn take_LDCZ(&mut self) -> super::commonmodule::ASG {
        self.LDCZ.take().unwrap_or_else(|| super::commonmodule::ASG::new())
    }

    // .commonmodule.StatusSPC ParOp = 6;


    pub fn get_ParOp(&self) -> &super::commonmodule::StatusSPC {
        self.ParOp.as_ref().unwrap_or_else(|| <super::commonmodule::StatusSPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ParOp(&mut self) {
        self.ParOp.clear();
    }

    pub fn has_ParOp(&self) -> bool {
        self.ParOp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ParOp(&mut self, v: super::commonmodule::StatusSPC) {
        self.ParOp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ParOp(&mut self) -> &mut super::commonmodule::StatusSPC {
        if self.ParOp.is_none() {
            self.ParOp.set_default();
        }
        self.ParOp.as_mut().unwrap()
    }

    // Take field
    pub fn take_ParOp(&mut self) -> super::commonmodule::StatusSPC {
        self.ParOp.take().unwrap_or_else(|| super::commonmodule::StatusSPC::new())
    }

    // .commonmodule.StatusSPS TapOpErr = 7;


    pub fn get_TapOpErr(&self) -> &super::commonmodule::StatusSPS {
        self.TapOpErr.as_ref().unwrap_or_else(|| <super::commonmodule::StatusSPS as ::protobuf::Message>::default_instance())
    }
    pub fn clear_TapOpErr(&mut self) {
        self.TapOpErr.clear();
    }

    pub fn has_TapOpErr(&self) -> bool {
        self.TapOpErr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_TapOpErr(&mut self, v: super::commonmodule::StatusSPS) {
        self.TapOpErr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TapOpErr(&mut self) -> &mut super::commonmodule::StatusSPS {
        if self.TapOpErr.is_none() {
            self.TapOpErr.set_default();
        }
        self.TapOpErr.as_mut().unwrap()
    }

    // Take field
    pub fn take_TapOpErr(&mut self) -> super::commonmodule::StatusSPS {
        self.TapOpErr.take().unwrap_or_else(|| super::commonmodule::StatusSPS::new())
    }

    // .commonmodule.StatusISC TapPos = 8;


    pub fn get_TapPos(&self) -> &super::commonmodule::StatusISC {
        self.TapPos.as_ref().unwrap_or_else(|| <super::commonmodule::StatusISC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_TapPos(&mut self) {
        self.TapPos.clear();
    }

    pub fn has_TapPos(&self) -> bool {
        self.TapPos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_TapPos(&mut self, v: super::commonmodule::StatusISC) {
        self.TapPos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_TapPos(&mut self) -> &mut super::commonmodule::StatusISC {
        if self.TapPos.is_none() {
            self.TapPos.set_default();
        }
        self.TapPos.as_mut().unwrap()
    }

    // Take field
    pub fn take_TapPos(&mut self) -> super::commonmodule::StatusISC {
        self.TapPos.take().unwrap_or_else(|| super::commonmodule::StatusISC::new())
    }
}

impl ::protobuf::Message for RegulatorEventAndStatusATCC {
    fn is_initialized(&self) -> bool {
        for v in &self.BndCtr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.BndWid {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.LDCR {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.LDCX {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.LDCZ {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ParOp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.TapOpErr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.TapPos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.BndCtr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.BndWid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.LDCR)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.LDCX)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.LDCZ)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ParOp)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.TapOpErr)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.TapPos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.BndCtr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.BndWid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.LDCR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.LDCX.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.LDCZ.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ParOp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.TapOpErr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.TapPos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.BndCtr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.BndWid.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.LDCR.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.LDCX.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.LDCZ.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ParOp.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.TapOpErr.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.TapPos.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorEventAndStatusATCC {
        RegulatorEventAndStatusATCC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "BndCtr",
                |m: &RegulatorEventAndStatusATCC| { &m.BndCtr },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.BndCtr },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "BndWid",
                |m: &RegulatorEventAndStatusATCC| { &m.BndWid },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.BndWid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "LDCR",
                |m: &RegulatorEventAndStatusATCC| { &m.LDCR },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.LDCR },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "LDCX",
                |m: &RegulatorEventAndStatusATCC| { &m.LDCX },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.LDCX },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ASG>>(
                "LDCZ",
                |m: &RegulatorEventAndStatusATCC| { &m.LDCZ },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.LDCZ },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusSPC>>(
                "ParOp",
                |m: &RegulatorEventAndStatusATCC| { &m.ParOp },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.ParOp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusSPS>>(
                "TapOpErr",
                |m: &RegulatorEventAndStatusATCC| { &m.TapOpErr },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.TapOpErr },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusISC>>(
                "TapPos",
                |m: &RegulatorEventAndStatusATCC| { &m.TapPos },
                |m: &mut RegulatorEventAndStatusATCC| { &mut m.TapPos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorEventAndStatusATCC>(
                "RegulatorEventAndStatusATCC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorEventAndStatusATCC {
        static instance: ::protobuf::rt::LazyV2<RegulatorEventAndStatusATCC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorEventAndStatusATCC::new)
    }
}

impl ::protobuf::Clear for RegulatorEventAndStatusATCC {
    fn clear(&mut self) {
        self.BndCtr.clear();
        self.BndWid.clear();
        self.LDCR.clear();
        self.LDCX.clear();
        self.LDCZ.clear();
        self.ParOp.clear();
        self.TapOpErr.clear();
        self.TapPos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorEventAndStatusATCC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorEventAndStatusATCC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorEventAndStatusPoint {
    // message fields
    eventAndStatus: ::protobuf::SingularPtrField<RegulatorEventAndStatusATCC>,
    pctVDroop: ::protobuf::SingularPtrField<::protobuf::well_known_types::FloatValue>,
    rampRates: ::protobuf::SingularPtrField<super::commonmodule::RampRate>,
    reactivePwrSetPointEnabled: ::protobuf::SingularPtrField<super::commonmodule::StatusSPC>,
    state: ::protobuf::SingularPtrField<super::commonmodule::Optional_StateKind>,
    voltageSetPointEnabled: ::protobuf::SingularPtrField<super::commonmodule::StatusSPC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorEventAndStatusPoint {
    fn default() -> &'a RegulatorEventAndStatusPoint {
        <RegulatorEventAndStatusPoint as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorEventAndStatusPoint {
    pub fn new() -> RegulatorEventAndStatusPoint {
        ::std::default::Default::default()
    }

    // .regulatormodule.RegulatorEventAndStatusATCC eventAndStatus = 1;


    pub fn get_eventAndStatus(&self) -> &RegulatorEventAndStatusATCC {
        self.eventAndStatus.as_ref().unwrap_or_else(|| <RegulatorEventAndStatusATCC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventAndStatus(&mut self) {
        self.eventAndStatus.clear();
    }

    pub fn has_eventAndStatus(&self) -> bool {
        self.eventAndStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventAndStatus(&mut self, v: RegulatorEventAndStatusATCC) {
        self.eventAndStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventAndStatus(&mut self) -> &mut RegulatorEventAndStatusATCC {
        if self.eventAndStatus.is_none() {
            self.eventAndStatus.set_default();
        }
        self.eventAndStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventAndStatus(&mut self) -> RegulatorEventAndStatusATCC {
        self.eventAndStatus.take().unwrap_or_else(|| RegulatorEventAndStatusATCC::new())
    }

    // .google.protobuf.FloatValue pctVDroop = 2;


    pub fn get_pctVDroop(&self) -> &::protobuf::well_known_types::FloatValue {
        self.pctVDroop.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FloatValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pctVDroop(&mut self) {
        self.pctVDroop.clear();
    }

    pub fn has_pctVDroop(&self) -> bool {
        self.pctVDroop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pctVDroop(&mut self, v: ::protobuf::well_known_types::FloatValue) {
        self.pctVDroop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pctVDroop(&mut self) -> &mut ::protobuf::well_known_types::FloatValue {
        if self.pctVDroop.is_none() {
            self.pctVDroop.set_default();
        }
        self.pctVDroop.as_mut().unwrap()
    }

    // Take field
    pub fn take_pctVDroop(&mut self) -> ::protobuf::well_known_types::FloatValue {
        self.pctVDroop.take().unwrap_or_else(|| ::protobuf::well_known_types::FloatValue::new())
    }

    // .commonmodule.RampRate rampRates = 3;


    pub fn get_rampRates(&self) -> &super::commonmodule::RampRate {
        self.rampRates.as_ref().unwrap_or_else(|| <super::commonmodule::RampRate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rampRates(&mut self) {
        self.rampRates.clear();
    }

    pub fn has_rampRates(&self) -> bool {
        self.rampRates.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rampRates(&mut self, v: super::commonmodule::RampRate) {
        self.rampRates = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rampRates(&mut self) -> &mut super::commonmodule::RampRate {
        if self.rampRates.is_none() {
            self.rampRates.set_default();
        }
        self.rampRates.as_mut().unwrap()
    }

    // Take field
    pub fn take_rampRates(&mut self) -> super::commonmodule::RampRate {
        self.rampRates.take().unwrap_or_else(|| super::commonmodule::RampRate::new())
    }

    // .commonmodule.StatusSPC reactivePwrSetPointEnabled = 4;


    pub fn get_reactivePwrSetPointEnabled(&self) -> &super::commonmodule::StatusSPC {
        self.reactivePwrSetPointEnabled.as_ref().unwrap_or_else(|| <super::commonmodule::StatusSPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reactivePwrSetPointEnabled(&mut self) {
        self.reactivePwrSetPointEnabled.clear();
    }

    pub fn has_reactivePwrSetPointEnabled(&self) -> bool {
        self.reactivePwrSetPointEnabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reactivePwrSetPointEnabled(&mut self, v: super::commonmodule::StatusSPC) {
        self.reactivePwrSetPointEnabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reactivePwrSetPointEnabled(&mut self) -> &mut super::commonmodule::StatusSPC {
        if self.reactivePwrSetPointEnabled.is_none() {
            self.reactivePwrSetPointEnabled.set_default();
        }
        self.reactivePwrSetPointEnabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_reactivePwrSetPointEnabled(&mut self) -> super::commonmodule::StatusSPC {
        self.reactivePwrSetPointEnabled.take().unwrap_or_else(|| super::commonmodule::StatusSPC::new())
    }

    // .commonmodule.Optional_StateKind state = 5;


    pub fn get_state(&self) -> &super::commonmodule::Optional_StateKind {
        self.state.as_ref().unwrap_or_else(|| <super::commonmodule::Optional_StateKind as ::protobuf::Message>::default_instance())
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::commonmodule::Optional_StateKind) {
        self.state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut super::commonmodule::Optional_StateKind {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> super::commonmodule::Optional_StateKind {
        self.state.take().unwrap_or_else(|| super::commonmodule::Optional_StateKind::new())
    }

    // .commonmodule.StatusSPC voltageSetPointEnabled = 6;


    pub fn get_voltageSetPointEnabled(&self) -> &super::commonmodule::StatusSPC {
        self.voltageSetPointEnabled.as_ref().unwrap_or_else(|| <super::commonmodule::StatusSPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_voltageSetPointEnabled(&mut self) {
        self.voltageSetPointEnabled.clear();
    }

    pub fn has_voltageSetPointEnabled(&self) -> bool {
        self.voltageSetPointEnabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voltageSetPointEnabled(&mut self, v: super::commonmodule::StatusSPC) {
        self.voltageSetPointEnabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voltageSetPointEnabled(&mut self) -> &mut super::commonmodule::StatusSPC {
        if self.voltageSetPointEnabled.is_none() {
            self.voltageSetPointEnabled.set_default();
        }
        self.voltageSetPointEnabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_voltageSetPointEnabled(&mut self) -> super::commonmodule::StatusSPC {
        self.voltageSetPointEnabled.take().unwrap_or_else(|| super::commonmodule::StatusSPC::new())
    }
}

impl ::protobuf::Message for RegulatorEventAndStatusPoint {
    fn is_initialized(&self) -> bool {
        for v in &self.eventAndStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pctVDroop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rampRates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reactivePwrSetPointEnabled {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.voltageSetPointEnabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventAndStatus)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pctVDroop)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rampRates)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reactivePwrSetPointEnabled)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.voltageSetPointEnabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventAndStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pctVDroop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rampRates.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reactivePwrSetPointEnabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.voltageSetPointEnabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventAndStatus.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pctVDroop.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rampRates.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reactivePwrSetPointEnabled.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.voltageSetPointEnabled.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorEventAndStatusPoint {
        RegulatorEventAndStatusPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorEventAndStatusATCC>>(
                "eventAndStatus",
                |m: &RegulatorEventAndStatusPoint| { &m.eventAndStatus },
                |m: &mut RegulatorEventAndStatusPoint| { &mut m.eventAndStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FloatValue>>(
                "pctVDroop",
                |m: &RegulatorEventAndStatusPoint| { &m.pctVDroop },
                |m: &mut RegulatorEventAndStatusPoint| { &mut m.pctVDroop },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::RampRate>>(
                "rampRates",
                |m: &RegulatorEventAndStatusPoint| { &m.rampRates },
                |m: &mut RegulatorEventAndStatusPoint| { &mut m.rampRates },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusSPC>>(
                "reactivePwrSetPointEnabled",
                |m: &RegulatorEventAndStatusPoint| { &m.reactivePwrSetPointEnabled },
                |m: &mut RegulatorEventAndStatusPoint| { &mut m.reactivePwrSetPointEnabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::Optional_StateKind>>(
                "state",
                |m: &RegulatorEventAndStatusPoint| { &m.state },
                |m: &mut RegulatorEventAndStatusPoint| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusSPC>>(
                "voltageSetPointEnabled",
                |m: &RegulatorEventAndStatusPoint| { &m.voltageSetPointEnabled },
                |m: &mut RegulatorEventAndStatusPoint| { &mut m.voltageSetPointEnabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorEventAndStatusPoint>(
                "RegulatorEventAndStatusPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorEventAndStatusPoint {
        static instance: ::protobuf::rt::LazyV2<RegulatorEventAndStatusPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorEventAndStatusPoint::new)
    }
}

impl ::protobuf::Clear for RegulatorEventAndStatusPoint {
    fn clear(&mut self) {
        self.eventAndStatus.clear();
        self.pctVDroop.clear();
        self.rampRates.clear();
        self.reactivePwrSetPointEnabled.clear();
        self.state.clear();
        self.voltageSetPointEnabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorEventAndStatusPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorEventAndStatusPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorEventAndStatusANCR {
    // message fields
    logicalNodeForEventAndStatus: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForEventAndStatus>,
    DynamicTest: ::protobuf::SingularPtrField<super::commonmodule::ENS_DynamicTestKind>,
    PointStatus: ::protobuf::SingularPtrField<RegulatorEventAndStatusPoint>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorEventAndStatusANCR {
    fn default() -> &'a RegulatorEventAndStatusANCR {
        <RegulatorEventAndStatusANCR as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorEventAndStatusANCR {
    pub fn new() -> RegulatorEventAndStatusANCR {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1;


    pub fn get_logicalNodeForEventAndStatus(&self) -> &super::commonmodule::LogicalNodeForEventAndStatus {
        self.logicalNodeForEventAndStatus.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForEventAndStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForEventAndStatus(&mut self) {
        self.logicalNodeForEventAndStatus.clear();
    }

    pub fn has_logicalNodeForEventAndStatus(&self) -> bool {
        self.logicalNodeForEventAndStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForEventAndStatus(&mut self, v: super::commonmodule::LogicalNodeForEventAndStatus) {
        self.logicalNodeForEventAndStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForEventAndStatus(&mut self) -> &mut super::commonmodule::LogicalNodeForEventAndStatus {
        if self.logicalNodeForEventAndStatus.is_none() {
            self.logicalNodeForEventAndStatus.set_default();
        }
        self.logicalNodeForEventAndStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForEventAndStatus(&mut self) -> super::commonmodule::LogicalNodeForEventAndStatus {
        self.logicalNodeForEventAndStatus.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForEventAndStatus::new())
    }

    // .commonmodule.ENS_DynamicTestKind DynamicTest = 2;


    pub fn get_DynamicTest(&self) -> &super::commonmodule::ENS_DynamicTestKind {
        self.DynamicTest.as_ref().unwrap_or_else(|| <super::commonmodule::ENS_DynamicTestKind as ::protobuf::Message>::default_instance())
    }
    pub fn clear_DynamicTest(&mut self) {
        self.DynamicTest.clear();
    }

    pub fn has_DynamicTest(&self) -> bool {
        self.DynamicTest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_DynamicTest(&mut self, v: super::commonmodule::ENS_DynamicTestKind) {
        self.DynamicTest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_DynamicTest(&mut self) -> &mut super::commonmodule::ENS_DynamicTestKind {
        if self.DynamicTest.is_none() {
            self.DynamicTest.set_default();
        }
        self.DynamicTest.as_mut().unwrap()
    }

    // Take field
    pub fn take_DynamicTest(&mut self) -> super::commonmodule::ENS_DynamicTestKind {
        self.DynamicTest.take().unwrap_or_else(|| super::commonmodule::ENS_DynamicTestKind::new())
    }

    // .regulatormodule.RegulatorEventAndStatusPoint PointStatus = 3;


    pub fn get_PointStatus(&self) -> &RegulatorEventAndStatusPoint {
        self.PointStatus.as_ref().unwrap_or_else(|| <RegulatorEventAndStatusPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_PointStatus(&mut self) {
        self.PointStatus.clear();
    }

    pub fn has_PointStatus(&self) -> bool {
        self.PointStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_PointStatus(&mut self, v: RegulatorEventAndStatusPoint) {
        self.PointStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_PointStatus(&mut self) -> &mut RegulatorEventAndStatusPoint {
        if self.PointStatus.is_none() {
            self.PointStatus.set_default();
        }
        self.PointStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_PointStatus(&mut self) -> RegulatorEventAndStatusPoint {
        self.PointStatus.take().unwrap_or_else(|| RegulatorEventAndStatusPoint::new())
    }
}

impl ::protobuf::Message for RegulatorEventAndStatusANCR {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForEventAndStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.DynamicTest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.PointStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForEventAndStatus)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.DynamicTest)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.PointStatus)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForEventAndStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.DynamicTest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.PointStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForEventAndStatus.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.DynamicTest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.PointStatus.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorEventAndStatusANCR {
        RegulatorEventAndStatusANCR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForEventAndStatus>>(
                "logicalNodeForEventAndStatus",
                |m: &RegulatorEventAndStatusANCR| { &m.logicalNodeForEventAndStatus },
                |m: &mut RegulatorEventAndStatusANCR| { &mut m.logicalNodeForEventAndStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ENS_DynamicTestKind>>(
                "DynamicTest",
                |m: &RegulatorEventAndStatusANCR| { &m.DynamicTest },
                |m: &mut RegulatorEventAndStatusANCR| { &mut m.DynamicTest },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorEventAndStatusPoint>>(
                "PointStatus",
                |m: &RegulatorEventAndStatusANCR| { &m.PointStatus },
                |m: &mut RegulatorEventAndStatusANCR| { &mut m.PointStatus },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorEventAndStatusANCR>(
                "RegulatorEventAndStatusANCR",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorEventAndStatusANCR {
        static instance: ::protobuf::rt::LazyV2<RegulatorEventAndStatusANCR> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorEventAndStatusANCR::new)
    }
}

impl ::protobuf::Clear for RegulatorEventAndStatusANCR {
    fn clear(&mut self) {
        self.logicalNodeForEventAndStatus.clear();
        self.DynamicTest.clear();
        self.PointStatus.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorEventAndStatusANCR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorEventAndStatusANCR {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorEvent {
    // message fields
    eventValue: ::protobuf::SingularPtrField<super::commonmodule::EventValue>,
    regulatorEventAndStatusANCR: ::protobuf::SingularPtrField<RegulatorEventAndStatusANCR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorEvent {
    fn default() -> &'a RegulatorEvent {
        <RegulatorEvent as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorEvent {
    pub fn new() -> RegulatorEvent {
        ::std::default::Default::default()
    }

    // .commonmodule.EventValue eventValue = 1;


    pub fn get_eventValue(&self) -> &super::commonmodule::EventValue {
        self.eventValue.as_ref().unwrap_or_else(|| <super::commonmodule::EventValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventValue(&mut self) {
        self.eventValue.clear();
    }

    pub fn has_eventValue(&self) -> bool {
        self.eventValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventValue(&mut self, v: super::commonmodule::EventValue) {
        self.eventValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventValue(&mut self) -> &mut super::commonmodule::EventValue {
        if self.eventValue.is_none() {
            self.eventValue.set_default();
        }
        self.eventValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventValue(&mut self) -> super::commonmodule::EventValue {
        self.eventValue.take().unwrap_or_else(|| super::commonmodule::EventValue::new())
    }

    // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;


    pub fn get_regulatorEventAndStatusANCR(&self) -> &RegulatorEventAndStatusANCR {
        self.regulatorEventAndStatusANCR.as_ref().unwrap_or_else(|| <RegulatorEventAndStatusANCR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorEventAndStatusANCR(&mut self) {
        self.regulatorEventAndStatusANCR.clear();
    }

    pub fn has_regulatorEventAndStatusANCR(&self) -> bool {
        self.regulatorEventAndStatusANCR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorEventAndStatusANCR(&mut self, v: RegulatorEventAndStatusANCR) {
        self.regulatorEventAndStatusANCR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorEventAndStatusANCR(&mut self) -> &mut RegulatorEventAndStatusANCR {
        if self.regulatorEventAndStatusANCR.is_none() {
            self.regulatorEventAndStatusANCR.set_default();
        }
        self.regulatorEventAndStatusANCR.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorEventAndStatusANCR(&mut self) -> RegulatorEventAndStatusANCR {
        self.regulatorEventAndStatusANCR.take().unwrap_or_else(|| RegulatorEventAndStatusANCR::new())
    }
}

impl ::protobuf::Message for RegulatorEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.eventValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorEventAndStatusANCR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorEventAndStatusANCR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorEventAndStatusANCR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorEventAndStatusANCR.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorEvent {
        RegulatorEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventValue>>(
                "eventValue",
                |m: &RegulatorEvent| { &m.eventValue },
                |m: &mut RegulatorEvent| { &mut m.eventValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorEventAndStatusANCR>>(
                "regulatorEventAndStatusANCR",
                |m: &RegulatorEvent| { &m.regulatorEventAndStatusANCR },
                |m: &mut RegulatorEvent| { &mut m.regulatorEventAndStatusANCR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorEvent>(
                "RegulatorEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorEvent {
        static instance: ::protobuf::rt::LazyV2<RegulatorEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorEvent::new)
    }
}

impl ::protobuf::Clear for RegulatorEvent {
    fn clear(&mut self) {
        self.eventValue.clear();
        self.regulatorEventAndStatusANCR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorEventProfile {
    // message fields
    eventMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::EventMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    regulatorEvent: ::protobuf::SingularPtrField<RegulatorEvent>,
    regulatorSystem: ::protobuf::SingularPtrField<RegulatorSystem>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorEventProfile {
    fn default() -> &'a RegulatorEventProfile {
        <RegulatorEventProfile as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorEventProfile {
    pub fn new() -> RegulatorEventProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.EventMessageInfo eventMessageInfo = 1;


    pub fn get_eventMessageInfo(&self) -> &super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::EventMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventMessageInfo(&mut self) {
        self.eventMessageInfo.clear();
    }

    pub fn has_eventMessageInfo(&self) -> bool {
        self.eventMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventMessageInfo(&mut self, v: super::commonmodule::EventMessageInfo) {
        self.eventMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventMessageInfo(&mut self) -> &mut super::commonmodule::EventMessageInfo {
        if self.eventMessageInfo.is_none() {
            self.eventMessageInfo.set_default();
        }
        self.eventMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventMessageInfo(&mut self) -> super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.take().unwrap_or_else(|| super::commonmodule::EventMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .regulatormodule.RegulatorEvent regulatorEvent = 3;


    pub fn get_regulatorEvent(&self) -> &RegulatorEvent {
        self.regulatorEvent.as_ref().unwrap_or_else(|| <RegulatorEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorEvent(&mut self) {
        self.regulatorEvent.clear();
    }

    pub fn has_regulatorEvent(&self) -> bool {
        self.regulatorEvent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorEvent(&mut self, v: RegulatorEvent) {
        self.regulatorEvent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorEvent(&mut self) -> &mut RegulatorEvent {
        if self.regulatorEvent.is_none() {
            self.regulatorEvent.set_default();
        }
        self.regulatorEvent.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorEvent(&mut self) -> RegulatorEvent {
        self.regulatorEvent.take().unwrap_or_else(|| RegulatorEvent::new())
    }

    // .regulatormodule.RegulatorSystem regulatorSystem = 4;


    pub fn get_regulatorSystem(&self) -> &RegulatorSystem {
        self.regulatorSystem.as_ref().unwrap_or_else(|| <RegulatorSystem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorSystem(&mut self) {
        self.regulatorSystem.clear();
    }

    pub fn has_regulatorSystem(&self) -> bool {
        self.regulatorSystem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorSystem(&mut self, v: RegulatorSystem) {
        self.regulatorSystem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorSystem(&mut self) -> &mut RegulatorSystem {
        if self.regulatorSystem.is_none() {
            self.regulatorSystem.set_default();
        }
        self.regulatorSystem.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorSystem(&mut self) -> RegulatorSystem {
        self.regulatorSystem.take().unwrap_or_else(|| RegulatorSystem::new())
    }
}

impl ::protobuf::Message for RegulatorEventProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.eventMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorEvent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorSystem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorEvent)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorSystem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorEvent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorEvent.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorEventProfile {
        RegulatorEventProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventMessageInfo>>(
                "eventMessageInfo",
                |m: &RegulatorEventProfile| { &m.eventMessageInfo },
                |m: &mut RegulatorEventProfile| { &mut m.eventMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RegulatorEventProfile| { &m.ied },
                |m: &mut RegulatorEventProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorEvent>>(
                "regulatorEvent",
                |m: &RegulatorEventProfile| { &m.regulatorEvent },
                |m: &mut RegulatorEventProfile| { &mut m.regulatorEvent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorSystem>>(
                "regulatorSystem",
                |m: &RegulatorEventProfile| { &m.regulatorSystem },
                |m: &mut RegulatorEventProfile| { &mut m.regulatorSystem },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorEventProfile>(
                "RegulatorEventProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorEventProfile {
        static instance: ::protobuf::rt::LazyV2<RegulatorEventProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorEventProfile::new)
    }
}

impl ::protobuf::Clear for RegulatorEventProfile {
    fn clear(&mut self) {
        self.eventMessageInfo.clear();
        self.ied.clear();
        self.regulatorEvent.clear();
        self.regulatorSystem.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorEventProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorEventProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorReading {
    // message fields
    conductingEquipmentTerminalReading: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipmentTerminalReading>,
    phaseMMTN: ::protobuf::SingularPtrField<super::commonmodule::PhaseMMTN>,
    readingMMTR: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMTR>,
    readingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorReading {
    fn default() -> &'a RegulatorReading {
        <RegulatorReading as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorReading {
    pub fn new() -> RegulatorReading {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1;


    pub fn get_conductingEquipmentTerminalReading(&self) -> &super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipmentTerminalReading as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipmentTerminalReading(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
    }

    pub fn has_conductingEquipmentTerminalReading(&self) -> bool {
        self.conductingEquipmentTerminalReading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipmentTerminalReading(&mut self, v: super::commonmodule::ConductingEquipmentTerminalReading) {
        self.conductingEquipmentTerminalReading = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipmentTerminalReading(&mut self) -> &mut super::commonmodule::ConductingEquipmentTerminalReading {
        if self.conductingEquipmentTerminalReading.is_none() {
            self.conductingEquipmentTerminalReading.set_default();
        }
        self.conductingEquipmentTerminalReading.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipmentTerminalReading(&mut self) -> super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.take().unwrap_or_else(|| super::commonmodule::ConductingEquipmentTerminalReading::new())
    }

    // .commonmodule.PhaseMMTN phaseMMTN = 2;


    pub fn get_phaseMMTN(&self) -> &super::commonmodule::PhaseMMTN {
        self.phaseMMTN.as_ref().unwrap_or_else(|| <super::commonmodule::PhaseMMTN as ::protobuf::Message>::default_instance())
    }
    pub fn clear_phaseMMTN(&mut self) {
        self.phaseMMTN.clear();
    }

    pub fn has_phaseMMTN(&self) -> bool {
        self.phaseMMTN.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phaseMMTN(&mut self, v: super::commonmodule::PhaseMMTN) {
        self.phaseMMTN = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phaseMMTN(&mut self) -> &mut super::commonmodule::PhaseMMTN {
        if self.phaseMMTN.is_none() {
            self.phaseMMTN.set_default();
        }
        self.phaseMMTN.as_mut().unwrap()
    }

    // Take field
    pub fn take_phaseMMTN(&mut self) -> super::commonmodule::PhaseMMTN {
        self.phaseMMTN.take().unwrap_or_else(|| super::commonmodule::PhaseMMTN::new())
    }

    // .commonmodule.ReadingMMTR readingMMTR = 3;


    pub fn get_readingMMTR(&self) -> &super::commonmodule::ReadingMMTR {
        self.readingMMTR.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMTR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMTR(&mut self) {
        self.readingMMTR.clear();
    }

    pub fn has_readingMMTR(&self) -> bool {
        self.readingMMTR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMTR(&mut self, v: super::commonmodule::ReadingMMTR) {
        self.readingMMTR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMTR(&mut self) -> &mut super::commonmodule::ReadingMMTR {
        if self.readingMMTR.is_none() {
            self.readingMMTR.set_default();
        }
        self.readingMMTR.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMTR(&mut self) -> super::commonmodule::ReadingMMTR {
        self.readingMMTR.take().unwrap_or_else(|| super::commonmodule::ReadingMMTR::new())
    }

    // .commonmodule.ReadingMMXU readingMMXU = 4;


    pub fn get_readingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.readingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMXU(&mut self) {
        self.readingMMXU.clear();
    }

    pub fn has_readingMMXU(&self) -> bool {
        self.readingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.readingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.readingMMXU.is_none() {
            self.readingMMXU.set_default();
        }
        self.readingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.readingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }
}

impl ::protobuf::Message for RegulatorReading {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipmentTerminalReading {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.phaseMMTN {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMTR {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipmentTerminalReading)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.phaseMMTN)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMTR)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMXU)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorReading {
        RegulatorReading::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipmentTerminalReading>>(
                "conductingEquipmentTerminalReading",
                |m: &RegulatorReading| { &m.conductingEquipmentTerminalReading },
                |m: &mut RegulatorReading| { &mut m.conductingEquipmentTerminalReading },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::PhaseMMTN>>(
                "phaseMMTN",
                |m: &RegulatorReading| { &m.phaseMMTN },
                |m: &mut RegulatorReading| { &mut m.phaseMMTN },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMTR>>(
                "readingMMTR",
                |m: &RegulatorReading| { &m.readingMMTR },
                |m: &mut RegulatorReading| { &mut m.readingMMTR },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "readingMMXU",
                |m: &RegulatorReading| { &m.readingMMXU },
                |m: &mut RegulatorReading| { &mut m.readingMMXU },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorReading>(
                "RegulatorReading",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorReading {
        static instance: ::protobuf::rt::LazyV2<RegulatorReading> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorReading::new)
    }
}

impl ::protobuf::Clear for RegulatorReading {
    fn clear(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
        self.phaseMMTN.clear();
        self.readingMMTR.clear();
        self.readingMMXU.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorReading {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorReading {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorReadingProfile {
    // message fields
    readingMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ReadingMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    regulatorReading: ::protobuf::RepeatedField<RegulatorReading>,
    regulatorSystem: ::protobuf::SingularPtrField<RegulatorSystem>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorReadingProfile {
    fn default() -> &'a RegulatorReadingProfile {
        <RegulatorReadingProfile as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorReadingProfile {
    pub fn new() -> RegulatorReadingProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1;


    pub fn get_readingMessageInfo(&self) -> &super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMessageInfo(&mut self) {
        self.readingMessageInfo.clear();
    }

    pub fn has_readingMessageInfo(&self) -> bool {
        self.readingMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMessageInfo(&mut self, v: super::commonmodule::ReadingMessageInfo) {
        self.readingMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMessageInfo(&mut self) -> &mut super::commonmodule::ReadingMessageInfo {
        if self.readingMessageInfo.is_none() {
            self.readingMessageInfo.set_default();
        }
        self.readingMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMessageInfo(&mut self) -> super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.take().unwrap_or_else(|| super::commonmodule::ReadingMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // repeated .regulatormodule.RegulatorReading regulatorReading = 3;


    pub fn get_regulatorReading(&self) -> &[RegulatorReading] {
        &self.regulatorReading
    }
    pub fn clear_regulatorReading(&mut self) {
        self.regulatorReading.clear();
    }

    // Param is passed by value, moved
    pub fn set_regulatorReading(&mut self, v: ::protobuf::RepeatedField<RegulatorReading>) {
        self.regulatorReading = v;
    }

    // Mutable pointer to the field.
    pub fn mut_regulatorReading(&mut self) -> &mut ::protobuf::RepeatedField<RegulatorReading> {
        &mut self.regulatorReading
    }

    // Take field
    pub fn take_regulatorReading(&mut self) -> ::protobuf::RepeatedField<RegulatorReading> {
        ::std::mem::replace(&mut self.regulatorReading, ::protobuf::RepeatedField::new())
    }

    // .regulatormodule.RegulatorSystem regulatorSystem = 4;


    pub fn get_regulatorSystem(&self) -> &RegulatorSystem {
        self.regulatorSystem.as_ref().unwrap_or_else(|| <RegulatorSystem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorSystem(&mut self) {
        self.regulatorSystem.clear();
    }

    pub fn has_regulatorSystem(&self) -> bool {
        self.regulatorSystem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorSystem(&mut self, v: RegulatorSystem) {
        self.regulatorSystem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorSystem(&mut self) -> &mut RegulatorSystem {
        if self.regulatorSystem.is_none() {
            self.regulatorSystem.set_default();
        }
        self.regulatorSystem.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorSystem(&mut self) -> RegulatorSystem {
        self.regulatorSystem.take().unwrap_or_else(|| RegulatorSystem::new())
    }
}

impl ::protobuf::Message for RegulatorReadingProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.readingMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorReading {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorSystem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.regulatorReading)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorSystem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.regulatorReading {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.regulatorReading {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorReadingProfile {
        RegulatorReadingProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMessageInfo>>(
                "readingMessageInfo",
                |m: &RegulatorReadingProfile| { &m.readingMessageInfo },
                |m: &mut RegulatorReadingProfile| { &mut m.readingMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RegulatorReadingProfile| { &m.ied },
                |m: &mut RegulatorReadingProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorReading>>(
                "regulatorReading",
                |m: &RegulatorReadingProfile| { &m.regulatorReading },
                |m: &mut RegulatorReadingProfile| { &mut m.regulatorReading },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorSystem>>(
                "regulatorSystem",
                |m: &RegulatorReadingProfile| { &m.regulatorSystem },
                |m: &mut RegulatorReadingProfile| { &mut m.regulatorSystem },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorReadingProfile>(
                "RegulatorReadingProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorReadingProfile {
        static instance: ::protobuf::rt::LazyV2<RegulatorReadingProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorReadingProfile::new)
    }
}

impl ::protobuf::Clear for RegulatorReadingProfile {
    fn clear(&mut self) {
        self.readingMessageInfo.clear();
        self.ied.clear();
        self.regulatorReading.clear();
        self.regulatorSystem.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorReadingProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorReadingProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorStatus {
    // message fields
    statusValue: ::protobuf::SingularPtrField<super::commonmodule::StatusValue>,
    regulatorEventAndStatusANCR: ::protobuf::SingularPtrField<RegulatorEventAndStatusANCR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorStatus {
    fn default() -> &'a RegulatorStatus {
        <RegulatorStatus as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorStatus {
    pub fn new() -> RegulatorStatus {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusValue statusValue = 1;


    pub fn get_statusValue(&self) -> &super::commonmodule::StatusValue {
        self.statusValue.as_ref().unwrap_or_else(|| <super::commonmodule::StatusValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusValue(&mut self) {
        self.statusValue.clear();
    }

    pub fn has_statusValue(&self) -> bool {
        self.statusValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusValue(&mut self, v: super::commonmodule::StatusValue) {
        self.statusValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusValue(&mut self) -> &mut super::commonmodule::StatusValue {
        if self.statusValue.is_none() {
            self.statusValue.set_default();
        }
        self.statusValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusValue(&mut self) -> super::commonmodule::StatusValue {
        self.statusValue.take().unwrap_or_else(|| super::commonmodule::StatusValue::new())
    }

    // .regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;


    pub fn get_regulatorEventAndStatusANCR(&self) -> &RegulatorEventAndStatusANCR {
        self.regulatorEventAndStatusANCR.as_ref().unwrap_or_else(|| <RegulatorEventAndStatusANCR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorEventAndStatusANCR(&mut self) {
        self.regulatorEventAndStatusANCR.clear();
    }

    pub fn has_regulatorEventAndStatusANCR(&self) -> bool {
        self.regulatorEventAndStatusANCR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorEventAndStatusANCR(&mut self, v: RegulatorEventAndStatusANCR) {
        self.regulatorEventAndStatusANCR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorEventAndStatusANCR(&mut self) -> &mut RegulatorEventAndStatusANCR {
        if self.regulatorEventAndStatusANCR.is_none() {
            self.regulatorEventAndStatusANCR.set_default();
        }
        self.regulatorEventAndStatusANCR.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorEventAndStatusANCR(&mut self) -> RegulatorEventAndStatusANCR {
        self.regulatorEventAndStatusANCR.take().unwrap_or_else(|| RegulatorEventAndStatusANCR::new())
    }
}

impl ::protobuf::Message for RegulatorStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.statusValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorEventAndStatusANCR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorEventAndStatusANCR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorEventAndStatusANCR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorEventAndStatusANCR.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorStatus {
        RegulatorStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusValue>>(
                "statusValue",
                |m: &RegulatorStatus| { &m.statusValue },
                |m: &mut RegulatorStatus| { &mut m.statusValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorEventAndStatusANCR>>(
                "regulatorEventAndStatusANCR",
                |m: &RegulatorStatus| { &m.regulatorEventAndStatusANCR },
                |m: &mut RegulatorStatus| { &mut m.regulatorEventAndStatusANCR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorStatus>(
                "RegulatorStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorStatus {
        static instance: ::protobuf::rt::LazyV2<RegulatorStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorStatus::new)
    }
}

impl ::protobuf::Clear for RegulatorStatus {
    fn clear(&mut self) {
        self.statusValue.clear();
        self.regulatorEventAndStatusANCR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RegulatorStatusProfile {
    // message fields
    statusMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::StatusMessageInfo>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    regulatorStatus: ::protobuf::SingularPtrField<RegulatorStatus>,
    regulatorSystem: ::protobuf::SingularPtrField<RegulatorSystem>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegulatorStatusProfile {
    fn default() -> &'a RegulatorStatusProfile {
        <RegulatorStatusProfile as ::protobuf::Message>::default_instance()
    }
}

impl RegulatorStatusProfile {
    pub fn new() -> RegulatorStatusProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusMessageInfo statusMessageInfo = 1;


    pub fn get_statusMessageInfo(&self) -> &super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::StatusMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusMessageInfo(&mut self) {
        self.statusMessageInfo.clear();
    }

    pub fn has_statusMessageInfo(&self) -> bool {
        self.statusMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusMessageInfo(&mut self, v: super::commonmodule::StatusMessageInfo) {
        self.statusMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusMessageInfo(&mut self) -> &mut super::commonmodule::StatusMessageInfo {
        if self.statusMessageInfo.is_none() {
            self.statusMessageInfo.set_default();
        }
        self.statusMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusMessageInfo(&mut self) -> super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.take().unwrap_or_else(|| super::commonmodule::StatusMessageInfo::new())
    }

    // .commonmodule.IED ied = 2;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }

    // .regulatormodule.RegulatorStatus regulatorStatus = 3;


    pub fn get_regulatorStatus(&self) -> &RegulatorStatus {
        self.regulatorStatus.as_ref().unwrap_or_else(|| <RegulatorStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorStatus(&mut self) {
        self.regulatorStatus.clear();
    }

    pub fn has_regulatorStatus(&self) -> bool {
        self.regulatorStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorStatus(&mut self, v: RegulatorStatus) {
        self.regulatorStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorStatus(&mut self) -> &mut RegulatorStatus {
        if self.regulatorStatus.is_none() {
            self.regulatorStatus.set_default();
        }
        self.regulatorStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorStatus(&mut self) -> RegulatorStatus {
        self.regulatorStatus.take().unwrap_or_else(|| RegulatorStatus::new())
    }

    // .regulatormodule.RegulatorSystem regulatorSystem = 4;


    pub fn get_regulatorSystem(&self) -> &RegulatorSystem {
        self.regulatorSystem.as_ref().unwrap_or_else(|| <RegulatorSystem as ::protobuf::Message>::default_instance())
    }
    pub fn clear_regulatorSystem(&mut self) {
        self.regulatorSystem.clear();
    }

    pub fn has_regulatorSystem(&self) -> bool {
        self.regulatorSystem.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regulatorSystem(&mut self, v: RegulatorSystem) {
        self.regulatorSystem = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regulatorSystem(&mut self) -> &mut RegulatorSystem {
        if self.regulatorSystem.is_none() {
            self.regulatorSystem.set_default();
        }
        self.regulatorSystem.as_mut().unwrap()
    }

    // Take field
    pub fn take_regulatorSystem(&mut self) -> RegulatorSystem {
        self.regulatorSystem.take().unwrap_or_else(|| RegulatorSystem::new())
    }
}

impl ::protobuf::Message for RegulatorStatusProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.statusMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regulatorSystem {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorStatus)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regulatorSystem)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorStatus.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regulatorSystem.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegulatorStatusProfile {
        RegulatorStatusProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusMessageInfo>>(
                "statusMessageInfo",
                |m: &RegulatorStatusProfile| { &m.statusMessageInfo },
                |m: &mut RegulatorStatusProfile| { &mut m.statusMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &RegulatorStatusProfile| { &m.ied },
                |m: &mut RegulatorStatusProfile| { &mut m.ied },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorStatus>>(
                "regulatorStatus",
                |m: &RegulatorStatusProfile| { &m.regulatorStatus },
                |m: &mut RegulatorStatusProfile| { &mut m.regulatorStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RegulatorSystem>>(
                "regulatorSystem",
                |m: &RegulatorStatusProfile| { &m.regulatorSystem },
                |m: &mut RegulatorStatusProfile| { &mut m.regulatorSystem },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegulatorStatusProfile>(
                "RegulatorStatusProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegulatorStatusProfile {
        static instance: ::protobuf::rt::LazyV2<RegulatorStatusProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegulatorStatusProfile::new)
    }
}

impl ::protobuf::Clear for RegulatorStatusProfile {
    fn clear(&mut self) {
        self.statusMessageInfo.clear();
        self.ied.clear();
        self.regulatorStatus.clear();
        self.regulatorSystem.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegulatorStatusProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegulatorStatusProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%regulatormodule/regulatormodule.proto\x12\x0fregulatormodule\"\x8d\
    \x03\n\x14RegulatorControlATCC\x12+\n\x06BndCtr\x18\x01\x20\x01(\x0b2\
    \x11.commonmodule.ASGR\x06BndCtrB\0\x12+\n\x06BndWid\x18\x02\x20\x01(\
    \x0b2\x11.commonmodule.ASGR\x06BndWidB\0\x128\n\tCtlDlTmms\x18\x03\x20\
    \x01(\x0b2\x18.commonmodule.ControlINGR\tCtlDlTmmsB\0\x12'\n\x04LDCR\x18\
    \x04\x20\x01(\x0b2\x11.commonmodule.ASGR\x04LDCRB\0\x12'\n\x04LDCX\x18\
    \x05\x20\x01(\x0b2\x11.commonmodule.ASGR\x04LDCXB\0\x12'\n\x04LDCZ\x18\
    \x06\x20\x01(\x0b2\x11.commonmodule.ASGR\x04LDCZB\0\x120\n\x05ParOp\x18\
    \x07\x20\x01(\x0b2\x18.commonmodule.ControlSPCR\x05ParOpB\0\x122\n\x06Ta\
    pPos\x18\x08\x20\x01(\x0b2\x18.commonmodule.ControlISCR\x06TapPosB\0:\0\
    \"\xa7\x04\n\x0eRegulatorPoint\x12A\n\x07control\x18\x01\x20\x01(\x0b2%.\
    regulatormodule.RegulatorControlATCCR\x07controlB\0\x12;\n\tpctVDroop\
    \x18\x02\x20\x01(\x0b2\x1b.google.protobuf.FloatValueR\tpctVDroopB\0\x12\
    6\n\trampRates\x18\x03\x20\x01(\x0b2\x16.commonmodule.RampRateR\trampRat\
    esB\0\x12Z\n\x1areactivePwrSetPointEnabled\x18\x04\x20\x01(\x0b2\x18.com\
    monmodule.ControlDPCR\x1areactivePwrSetPointEnabledB\0\x120\n\x05reset\
    \x18\x05\x20\x01(\x0b2\x18.commonmodule.ControlDPCR\x05resetB\0\x128\n\
    \x05state\x18\x06\x20\x01(\x0b2\x20.commonmodule.Optional_StateKindR\x05\
    stateB\0\x12R\n\x16voltageSetPointEnabled\x18\x07\x20\x01(\x0b2\x18.comm\
    onmodule.ControlDPCR\x16voltageSetPointEnabledB\0\x12?\n\tstartTime\x18\
    \x08\x20\x01(\x0b2\x17.commonmodule.TimestampR\tstartTimeB\x08\x88\xb5\
    \x18\x01\x90\xb5\x18\x01:\0\"S\n\x0cRegulatorCSG\x12A\n\x06crvPts\x18\
    \x01\x20\x03(\x0b2\x1f.regulatormodule.RegulatorPointR\x06crvPtsB\x08\
    \x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"c\n\x1cRegulatorControlScheduleFSCH\
    \x12A\n\x07ValDCSG\x18\x01\x20\x01(\x0b2\x1d.regulatormodule.RegulatorCS\
    GR\x07ValDCSGB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xd0\x01\n\x14Reg\
    ulatorControlFSCC\x12A\n\x0bcontrolFSCC\x18\x01\x20\x01(\x0b2\x19.common\
    module.ControlFSCCR\x0bcontrolFSCCB\x04\x80\xb5\x18\x01\x12s\n\x1cregula\
    torControlScheduleFSCH\x18\x02\x20\x01(\x0b2-.regulatormodule.RegulatorC\
    ontrolScheduleFSCHR\x1cregulatorControlScheduleFSCHB\0:\0\"\xf6\x01\n\
    \x10RegulatorControl\x12D\n\x0ccontrolValue\x18\x01\x20\x01(\x0b2\x1a.co\
    mmonmodule.ControlValueR\x0ccontrolValueB\x04\x80\xb5\x18\x01\x125\n\x05\
    check\x18\x02\x20\x01(\x0b2\x1d.commonmodule.CheckConditionsR\x05checkB\
    \0\x12c\n\x14regulatorControlFSCC\x18\x03\x20\x01(\x0b2%.regulatormodule\
    .RegulatorControlFSCCR\x14regulatorControlFSCCB\x08\x88\xb5\x18\x01\x90\
    \xb5\x18\x01:\0\"n\n\x0fRegulatorSystem\x12Y\n\x13conductingEquipment\
    \x18\x01\x20\x01(\x0b2!.commonmodule.ConductingEquipmentR\x13conductingE\
    quipmentB\x04\x80\xb5\x18\x01:\0\"\xd5\x02\n\x17RegulatorControlProfile\
    \x12V\n\x12controlMessageInfo\x18\x01\x20\x01(\x0b2\x20.commonmodule.Con\
    trolMessageInfoR\x12controlMessageInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ie\
    d\x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x88\xb5\x18\
    \x01\x90\xb5\x18\x01\x12W\n\x10regulatorControl\x18\x03\x20\x01(\x0b2!.r\
    egulatormodule.RegulatorControlR\x10regulatorControlB\x08\x88\xb5\x18\
    \x01\x90\xb5\x18\x01\x12T\n\x0fregulatorSystem\x18\x04\x20\x01(\x0b2\x20\
    .regulatormodule.RegulatorSystemR\x0fregulatorSystemB\x08\x90\xb5\x18\
    \x01\x88\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\x8f\x03\n\x1bRegulatorEventA\
    ndStatusATCC\x12+\n\x06BndCtr\x18\x01\x20\x01(\x0b2\x11.commonmodule.ASG\
    R\x06BndCtrB\0\x12+\n\x06BndWid\x18\x02\x20\x01(\x0b2\x11.commonmodule.A\
    SGR\x06BndWidB\0\x12'\n\x04LDCR\x18\x03\x20\x01(\x0b2\x11.commonmodule.A\
    SGR\x04LDCRB\0\x12'\n\x04LDCX\x18\x04\x20\x01(\x0b2\x11.commonmodule.ASG\
    R\x04LDCXB\0\x12'\n\x04LDCZ\x18\x05\x20\x01(\x0b2\x11.commonmodule.ASGR\
    \x04LDCZB\0\x12/\n\x05ParOp\x18\x06\x20\x01(\x0b2\x17.commonmodule.Statu\
    sSPCR\x05ParOpB\0\x125\n\x08TapOpErr\x18\x07\x20\x01(\x0b2\x17.commonmod\
    ule.StatusSPSR\x08TapOpErrB\0\x121\n\x06TapPos\x18\x08\x20\x01(\x0b2\x17\
    .commonmodule.StatusISCR\x06TapPosB\0:\0\"\xd5\x03\n\x1cRegulatorEventAn\
    dStatusPoint\x12V\n\x0eeventAndStatus\x18\x01\x20\x01(\x0b2,.regulatormo\
    dule.RegulatorEventAndStatusATCCR\x0eeventAndStatusB\0\x12;\n\tpctVDroop\
    \x18\x02\x20\x01(\x0b2\x1b.google.protobuf.FloatValueR\tpctVDroopB\0\x12\
    6\n\trampRates\x18\x03\x20\x01(\x0b2\x16.commonmodule.RampRateR\trampRat\
    esB\0\x12Y\n\x1areactivePwrSetPointEnabled\x18\x04\x20\x01(\x0b2\x17.com\
    monmodule.StatusSPCR\x1areactivePwrSetPointEnabledB\0\x128\n\x05state\
    \x18\x05\x20\x01(\x0b2\x20.commonmodule.Optional_StateKindR\x05stateB\0\
    \x12Q\n\x16voltageSetPointEnabled\x18\x06\x20\x01(\x0b2\x17.commonmodule\
    .StatusSPCR\x16voltageSetPointEnabledB\0:\0\"\xb7\x02\n\x1bRegulatorEven\
    tAndStatusANCR\x12t\n\x1clogicalNodeForEventAndStatus\x18\x01\x20\x01(\
    \x0b2*.commonmodule.LogicalNodeForEventAndStatusR\x1clogicalNodeForEvent\
    AndStatusB\x04\x80\xb5\x18\x01\x12E\n\x0bDynamicTest\x18\x02\x20\x01(\
    \x0b2!.commonmodule.ENS_DynamicTestKindR\x0bDynamicTestB\0\x12Y\n\x0bPoi\
    ntStatus\x18\x03\x20\x01(\x0b2-.regulatormodule.RegulatorEventAndStatusP\
    ointR\x0bPointStatusB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xcc\x01\n\
    \x0eRegulatorEvent\x12>\n\neventValue\x18\x01\x20\x01(\x0b2\x18.commonmo\
    dule.EventValueR\neventValueB\x04\x80\xb5\x18\x01\x12x\n\x1bregulatorEve\
    ntAndStatusANCR\x18\x02\x20\x01(\x0b2,.regulatormodule.RegulatorEventAnd\
    StatusANCRR\x1bregulatorEventAndStatusANCRB\x08\x90\xb5\x18\x01\x88\xb5\
    \x18\x01:\0\"\xc7\x02\n\x15RegulatorEventProfile\x12P\n\x10eventMessageI\
    nfo\x18\x01\x20\x01(\x0b2\x1e.commonmodule.EventMessageInfoR\x10eventMes\
    sageInfoB\x04\x80\xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.co\
    mmonmodule.IEDR\x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12Q\n\x0ere\
    gulatorEvent\x18\x03\x20\x01(\x0b2\x1f.regulatormodule.RegulatorEventR\
    \x0eregulatorEventB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12T\n\x0fregula\
    torSystem\x18\x04\x20\x01(\x0b2\x20.regulatormodule.RegulatorSystemR\x0f\
    regulatorSystemB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\
    \x01\"\xd4\x02\n\x10RegulatorReading\x12\x86\x01\n\"conductingEquipmentT\
    erminalReading\x18\x01\x20\x01(\x0b20.commonmodule.ConductingEquipmentTe\
    rminalReadingR\"conductingEquipmentTerminalReadingB\x04\x80\xb5\x18\x01\
    \x127\n\tphaseMMTN\x18\x02\x20\x01(\x0b2\x17.commonmodule.PhaseMMTNR\tph\
    aseMMTNB\0\x12=\n\x0breadingMMTR\x18\x03\x20\x01(\x0b2\x19.commonmodule.\
    ReadingMMTRR\x0breadingMMTRB\0\x12=\n\x0breadingMMXU\x18\x04\x20\x01(\
    \x0b2\x19.commonmodule.ReadingMMXUR\x0breadingMMXUB\0:\0\"\xd9\x02\n\x17\
    RegulatorReadingProfile\x12V\n\x12readingMessageInfo\x18\x01\x20\x01(\
    \x0b2\x20.commonmodule.ReadingMessageInfoR\x12readingMessageInfoB\x04\
    \x80\xb5\x18\x01\x12-\n\x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IE\
    DR\x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12[\n\x10regulatorReadin\
    g\x18\x03\x20\x03(\x0b2!.regulatormodule.RegulatorReadingR\x10regulatorR\
    eadingB\x0c\x88\xb5\x18\x01\x90\xb5\x18\x01\x98\xb5\x18\x02\x12T\n\x0fre\
    gulatorSystem\x18\x04\x20\x01(\x0b2\x20.regulatormodule.RegulatorSystemR\
    \x0fregulatorSystemB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\
    \x18\x01\"\xd0\x01\n\x0fRegulatorStatus\x12A\n\x0bstatusValue\x18\x01\
    \x20\x01(\x0b2\x19.commonmodule.StatusValueR\x0bstatusValueB\x04\x80\xb5\
    \x18\x01\x12x\n\x1bregulatorEventAndStatusANCR\x18\x02\x20\x01(\x0b2,.re\
    gulatormodule.RegulatorEventAndStatusANCRR\x1bregulatorEventAndStatusANC\
    RB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xce\x02\n\x16RegulatorStatus\
    Profile\x12S\n\x11statusMessageInfo\x18\x01\x20\x01(\x0b2\x1f.commonmodu\
    le.StatusMessageInfoR\x11statusMessageInfoB\x04\x80\xb5\x18\x01\x12-\n\
    \x03ied\x18\x02\x20\x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x90\xb5\
    \x18\x01\x88\xb5\x18\x01\x12T\n\x0fregulatorStatus\x18\x03\x20\x01(\x0b2\
    \x20.regulatormodule.RegulatorStatusR\x0fregulatorStatusB\x08\x88\xb5\
    \x18\x01\x90\xb5\x18\x01\x12T\n\x0fregulatorSystem\x18\x04\x20\x01(\x0b2\
    \x20.regulatormodule.RegulatorSystemR\x0fregulatorSystemB\x08\x88\xb5\
    \x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
