// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `breakermodule/breakermodule.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerDiscreteControlXCBR {
    // message fields
    logicalNodeForControl: ::protobuf::SingularPtrField<super::commonmodule::LogicalNodeForControl>,
    Pos: ::protobuf::SingularPtrField<super::commonmodule::ControlDPC>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerDiscreteControlXCBR {
    fn default() -> &'a BreakerDiscreteControlXCBR {
        <BreakerDiscreteControlXCBR as ::protobuf::Message>::default_instance()
    }
}

impl BreakerDiscreteControlXCBR {
    pub fn new() -> BreakerDiscreteControlXCBR {
        ::std::default::Default::default()
    }

    // .commonmodule.LogicalNodeForControl logicalNodeForControl = 1;


    pub fn get_logicalNodeForControl(&self) -> &super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.as_ref().unwrap_or_else(|| <super::commonmodule::LogicalNodeForControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_logicalNodeForControl(&mut self) {
        self.logicalNodeForControl.clear();
    }

    pub fn has_logicalNodeForControl(&self) -> bool {
        self.logicalNodeForControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logicalNodeForControl(&mut self, v: super::commonmodule::LogicalNodeForControl) {
        self.logicalNodeForControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logicalNodeForControl(&mut self) -> &mut super::commonmodule::LogicalNodeForControl {
        if self.logicalNodeForControl.is_none() {
            self.logicalNodeForControl.set_default();
        }
        self.logicalNodeForControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_logicalNodeForControl(&mut self) -> super::commonmodule::LogicalNodeForControl {
        self.logicalNodeForControl.take().unwrap_or_else(|| super::commonmodule::LogicalNodeForControl::new())
    }

    // .commonmodule.ControlDPC Pos = 2;


    pub fn get_Pos(&self) -> &super::commonmodule::ControlDPC {
        self.Pos.as_ref().unwrap_or_else(|| <super::commonmodule::ControlDPC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Pos(&mut self) {
        self.Pos.clear();
    }

    pub fn has_Pos(&self) -> bool {
        self.Pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Pos(&mut self, v: super::commonmodule::ControlDPC) {
        self.Pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Pos(&mut self) -> &mut super::commonmodule::ControlDPC {
        if self.Pos.is_none() {
            self.Pos.set_default();
        }
        self.Pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_Pos(&mut self) -> super::commonmodule::ControlDPC {
        self.Pos.take().unwrap_or_else(|| super::commonmodule::ControlDPC::new())
    }
}

impl ::protobuf::Message for BreakerDiscreteControlXCBR {
    fn is_initialized(&self) -> bool {
        for v in &self.logicalNodeForControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logicalNodeForControl)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.logicalNodeForControl.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Pos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerDiscreteControlXCBR {
        BreakerDiscreteControlXCBR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::LogicalNodeForControl>>(
                "logicalNodeForControl",
                |m: &BreakerDiscreteControlXCBR| { &m.logicalNodeForControl },
                |m: &mut BreakerDiscreteControlXCBR| { &mut m.logicalNodeForControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlDPC>>(
                "Pos",
                |m: &BreakerDiscreteControlXCBR| { &m.Pos },
                |m: &mut BreakerDiscreteControlXCBR| { &mut m.Pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerDiscreteControlXCBR>(
                "BreakerDiscreteControlXCBR",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerDiscreteControlXCBR {
        static instance: ::protobuf::rt::LazyV2<BreakerDiscreteControlXCBR> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerDiscreteControlXCBR::new)
    }
}

impl ::protobuf::Clear for BreakerDiscreteControlXCBR {
    fn clear(&mut self) {
        self.logicalNodeForControl.clear();
        self.Pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerDiscreteControlXCBR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerDiscreteControlXCBR {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerDiscreteControl {
    // message fields
    controlValue: ::protobuf::SingularPtrField<super::commonmodule::ControlValue>,
    check: ::protobuf::SingularPtrField<super::commonmodule::CheckConditions>,
    breakerDiscreteControlXCBR: ::protobuf::SingularPtrField<BreakerDiscreteControlXCBR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerDiscreteControl {
    fn default() -> &'a BreakerDiscreteControl {
        <BreakerDiscreteControl as ::protobuf::Message>::default_instance()
    }
}

impl BreakerDiscreteControl {
    pub fn new() -> BreakerDiscreteControl {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlValue controlValue = 1;


    pub fn get_controlValue(&self) -> &super::commonmodule::ControlValue {
        self.controlValue.as_ref().unwrap_or_else(|| <super::commonmodule::ControlValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlValue(&mut self) {
        self.controlValue.clear();
    }

    pub fn has_controlValue(&self) -> bool {
        self.controlValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlValue(&mut self, v: super::commonmodule::ControlValue) {
        self.controlValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlValue(&mut self) -> &mut super::commonmodule::ControlValue {
        if self.controlValue.is_none() {
            self.controlValue.set_default();
        }
        self.controlValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlValue(&mut self) -> super::commonmodule::ControlValue {
        self.controlValue.take().unwrap_or_else(|| super::commonmodule::ControlValue::new())
    }

    // .commonmodule.CheckConditions check = 2;


    pub fn get_check(&self) -> &super::commonmodule::CheckConditions {
        self.check.as_ref().unwrap_or_else(|| <super::commonmodule::CheckConditions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_check(&mut self) {
        self.check.clear();
    }

    pub fn has_check(&self) -> bool {
        self.check.is_some()
    }

    // Param is passed by value, moved
    pub fn set_check(&mut self, v: super::commonmodule::CheckConditions) {
        self.check = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_check(&mut self) -> &mut super::commonmodule::CheckConditions {
        if self.check.is_none() {
            self.check.set_default();
        }
        self.check.as_mut().unwrap()
    }

    // Take field
    pub fn take_check(&mut self) -> super::commonmodule::CheckConditions {
        self.check.take().unwrap_or_else(|| super::commonmodule::CheckConditions::new())
    }

    // .breakermodule.BreakerDiscreteControlXCBR breakerDiscreteControlXCBR = 3;


    pub fn get_breakerDiscreteControlXCBR(&self) -> &BreakerDiscreteControlXCBR {
        self.breakerDiscreteControlXCBR.as_ref().unwrap_or_else(|| <BreakerDiscreteControlXCBR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breakerDiscreteControlXCBR(&mut self) {
        self.breakerDiscreteControlXCBR.clear();
    }

    pub fn has_breakerDiscreteControlXCBR(&self) -> bool {
        self.breakerDiscreteControlXCBR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breakerDiscreteControlXCBR(&mut self, v: BreakerDiscreteControlXCBR) {
        self.breakerDiscreteControlXCBR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breakerDiscreteControlXCBR(&mut self) -> &mut BreakerDiscreteControlXCBR {
        if self.breakerDiscreteControlXCBR.is_none() {
            self.breakerDiscreteControlXCBR.set_default();
        }
        self.breakerDiscreteControlXCBR.as_mut().unwrap()
    }

    // Take field
    pub fn take_breakerDiscreteControlXCBR(&mut self) -> BreakerDiscreteControlXCBR {
        self.breakerDiscreteControlXCBR.take().unwrap_or_else(|| BreakerDiscreteControlXCBR::new())
    }
}

impl ::protobuf::Message for BreakerDiscreteControl {
    fn is_initialized(&self) -> bool {
        for v in &self.controlValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.check {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breakerDiscreteControlXCBR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.check)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breakerDiscreteControlXCBR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breakerDiscreteControlXCBR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.check.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breakerDiscreteControlXCBR.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerDiscreteControl {
        BreakerDiscreteControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlValue>>(
                "controlValue",
                |m: &BreakerDiscreteControl| { &m.controlValue },
                |m: &mut BreakerDiscreteControl| { &mut m.controlValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::CheckConditions>>(
                "check",
                |m: &BreakerDiscreteControl| { &m.check },
                |m: &mut BreakerDiscreteControl| { &mut m.check },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BreakerDiscreteControlXCBR>>(
                "breakerDiscreteControlXCBR",
                |m: &BreakerDiscreteControl| { &m.breakerDiscreteControlXCBR },
                |m: &mut BreakerDiscreteControl| { &mut m.breakerDiscreteControlXCBR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerDiscreteControl>(
                "BreakerDiscreteControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerDiscreteControl {
        static instance: ::protobuf::rt::LazyV2<BreakerDiscreteControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerDiscreteControl::new)
    }
}

impl ::protobuf::Clear for BreakerDiscreteControl {
    fn clear(&mut self) {
        self.controlValue.clear();
        self.check.clear();
        self.breakerDiscreteControlXCBR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerDiscreteControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerDiscreteControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Breaker {
    // message fields
    conductingEquipment: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipment>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Breaker {
    fn default() -> &'a Breaker {
        <Breaker as ::protobuf::Message>::default_instance()
    }
}

impl Breaker {
    pub fn new() -> Breaker {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipment conductingEquipment = 1;


    pub fn get_conductingEquipment(&self) -> &super::commonmodule::ConductingEquipment {
        self.conductingEquipment.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipment(&mut self) {
        self.conductingEquipment.clear();
    }

    pub fn has_conductingEquipment(&self) -> bool {
        self.conductingEquipment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipment(&mut self, v: super::commonmodule::ConductingEquipment) {
        self.conductingEquipment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipment(&mut self) -> &mut super::commonmodule::ConductingEquipment {
        if self.conductingEquipment.is_none() {
            self.conductingEquipment.set_default();
        }
        self.conductingEquipment.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipment(&mut self) -> super::commonmodule::ConductingEquipment {
        self.conductingEquipment.take().unwrap_or_else(|| super::commonmodule::ConductingEquipment::new())
    }
}

impl ::protobuf::Message for Breaker {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipment {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipment.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Breaker {
        Breaker::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipment>>(
                "conductingEquipment",
                |m: &Breaker| { &m.conductingEquipment },
                |m: &mut Breaker| { &mut m.conductingEquipment },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Breaker>(
                "Breaker",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Breaker {
        static instance: ::protobuf::rt::LazyV2<Breaker> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Breaker::new)
    }
}

impl ::protobuf::Clear for Breaker {
    fn clear(&mut self) {
        self.conductingEquipment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Breaker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Breaker {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerDiscreteControlProfile {
    // message fields
    controlMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ControlMessageInfo>,
    breaker: ::protobuf::SingularPtrField<Breaker>,
    breakerDiscreteControl: ::protobuf::SingularPtrField<BreakerDiscreteControl>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerDiscreteControlProfile {
    fn default() -> &'a BreakerDiscreteControlProfile {
        <BreakerDiscreteControlProfile as ::protobuf::Message>::default_instance()
    }
}

impl BreakerDiscreteControlProfile {
    pub fn new() -> BreakerDiscreteControlProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ControlMessageInfo controlMessageInfo = 1;


    pub fn get_controlMessageInfo(&self) -> &super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ControlMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_controlMessageInfo(&mut self) {
        self.controlMessageInfo.clear();
    }

    pub fn has_controlMessageInfo(&self) -> bool {
        self.controlMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_controlMessageInfo(&mut self, v: super::commonmodule::ControlMessageInfo) {
        self.controlMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_controlMessageInfo(&mut self) -> &mut super::commonmodule::ControlMessageInfo {
        if self.controlMessageInfo.is_none() {
            self.controlMessageInfo.set_default();
        }
        self.controlMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_controlMessageInfo(&mut self) -> super::commonmodule::ControlMessageInfo {
        self.controlMessageInfo.take().unwrap_or_else(|| super::commonmodule::ControlMessageInfo::new())
    }

    // .breakermodule.Breaker breaker = 2;


    pub fn get_breaker(&self) -> &Breaker {
        self.breaker.as_ref().unwrap_or_else(|| <Breaker as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breaker(&mut self) {
        self.breaker.clear();
    }

    pub fn has_breaker(&self) -> bool {
        self.breaker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breaker(&mut self, v: Breaker) {
        self.breaker = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breaker(&mut self) -> &mut Breaker {
        if self.breaker.is_none() {
            self.breaker.set_default();
        }
        self.breaker.as_mut().unwrap()
    }

    // Take field
    pub fn take_breaker(&mut self) -> Breaker {
        self.breaker.take().unwrap_or_else(|| Breaker::new())
    }

    // .breakermodule.BreakerDiscreteControl breakerDiscreteControl = 3;


    pub fn get_breakerDiscreteControl(&self) -> &BreakerDiscreteControl {
        self.breakerDiscreteControl.as_ref().unwrap_or_else(|| <BreakerDiscreteControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breakerDiscreteControl(&mut self) {
        self.breakerDiscreteControl.clear();
    }

    pub fn has_breakerDiscreteControl(&self) -> bool {
        self.breakerDiscreteControl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breakerDiscreteControl(&mut self, v: BreakerDiscreteControl) {
        self.breakerDiscreteControl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breakerDiscreteControl(&mut self) -> &mut BreakerDiscreteControl {
        if self.breakerDiscreteControl.is_none() {
            self.breakerDiscreteControl.set_default();
        }
        self.breakerDiscreteControl.as_mut().unwrap()
    }

    // Take field
    pub fn take_breakerDiscreteControl(&mut self) -> BreakerDiscreteControl {
        self.breakerDiscreteControl.take().unwrap_or_else(|| BreakerDiscreteControl::new())
    }

    // .commonmodule.IED ied = 4;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }
}

impl ::protobuf::Message for BreakerDiscreteControlProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.controlMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breaker {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breakerDiscreteControl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.controlMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breaker)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breakerDiscreteControl)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breakerDiscreteControl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.controlMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breakerDiscreteControl.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerDiscreteControlProfile {
        BreakerDiscreteControlProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ControlMessageInfo>>(
                "controlMessageInfo",
                |m: &BreakerDiscreteControlProfile| { &m.controlMessageInfo },
                |m: &mut BreakerDiscreteControlProfile| { &mut m.controlMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Breaker>>(
                "breaker",
                |m: &BreakerDiscreteControlProfile| { &m.breaker },
                |m: &mut BreakerDiscreteControlProfile| { &mut m.breaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BreakerDiscreteControl>>(
                "breakerDiscreteControl",
                |m: &BreakerDiscreteControlProfile| { &m.breakerDiscreteControl },
                |m: &mut BreakerDiscreteControlProfile| { &mut m.breakerDiscreteControl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &BreakerDiscreteControlProfile| { &m.ied },
                |m: &mut BreakerDiscreteControlProfile| { &mut m.ied },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerDiscreteControlProfile>(
                "BreakerDiscreteControlProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerDiscreteControlProfile {
        static instance: ::protobuf::rt::LazyV2<BreakerDiscreteControlProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerDiscreteControlProfile::new)
    }
}

impl ::protobuf::Clear for BreakerDiscreteControlProfile {
    fn clear(&mut self) {
        self.controlMessageInfo.clear();
        self.breaker.clear();
        self.breakerDiscreteControl.clear();
        self.ied.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerDiscreteControlProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerDiscreteControlProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerEvent {
    // message fields
    eventValue: ::protobuf::SingularPtrField<super::commonmodule::EventValue>,
    statusAndEventXCBR: ::protobuf::SingularPtrField<super::commonmodule::StatusAndEventXCBR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerEvent {
    fn default() -> &'a BreakerEvent {
        <BreakerEvent as ::protobuf::Message>::default_instance()
    }
}

impl BreakerEvent {
    pub fn new() -> BreakerEvent {
        ::std::default::Default::default()
    }

    // .commonmodule.EventValue eventValue = 1;


    pub fn get_eventValue(&self) -> &super::commonmodule::EventValue {
        self.eventValue.as_ref().unwrap_or_else(|| <super::commonmodule::EventValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventValue(&mut self) {
        self.eventValue.clear();
    }

    pub fn has_eventValue(&self) -> bool {
        self.eventValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventValue(&mut self, v: super::commonmodule::EventValue) {
        self.eventValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventValue(&mut self) -> &mut super::commonmodule::EventValue {
        if self.eventValue.is_none() {
            self.eventValue.set_default();
        }
        self.eventValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventValue(&mut self) -> super::commonmodule::EventValue {
        self.eventValue.take().unwrap_or_else(|| super::commonmodule::EventValue::new())
    }

    // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;


    pub fn get_statusAndEventXCBR(&self) -> &super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.as_ref().unwrap_or_else(|| <super::commonmodule::StatusAndEventXCBR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusAndEventXCBR(&mut self) {
        self.statusAndEventXCBR.clear();
    }

    pub fn has_statusAndEventXCBR(&self) -> bool {
        self.statusAndEventXCBR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusAndEventXCBR(&mut self, v: super::commonmodule::StatusAndEventXCBR) {
        self.statusAndEventXCBR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusAndEventXCBR(&mut self) -> &mut super::commonmodule::StatusAndEventXCBR {
        if self.statusAndEventXCBR.is_none() {
            self.statusAndEventXCBR.set_default();
        }
        self.statusAndEventXCBR.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusAndEventXCBR(&mut self) -> super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.take().unwrap_or_else(|| super::commonmodule::StatusAndEventXCBR::new())
    }
}

impl ::protobuf::Message for BreakerEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.eventValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.statusAndEventXCBR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusAndEventXCBR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerEvent {
        BreakerEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventValue>>(
                "eventValue",
                |m: &BreakerEvent| { &m.eventValue },
                |m: &mut BreakerEvent| { &mut m.eventValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusAndEventXCBR>>(
                "statusAndEventXCBR",
                |m: &BreakerEvent| { &m.statusAndEventXCBR },
                |m: &mut BreakerEvent| { &mut m.statusAndEventXCBR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerEvent>(
                "BreakerEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerEvent {
        static instance: ::protobuf::rt::LazyV2<BreakerEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerEvent::new)
    }
}

impl ::protobuf::Clear for BreakerEvent {
    fn clear(&mut self) {
        self.eventValue.clear();
        self.statusAndEventXCBR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerEventProfile {
    // message fields
    eventMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::EventMessageInfo>,
    breaker: ::protobuf::SingularPtrField<Breaker>,
    breakerEvent: ::protobuf::SingularPtrField<BreakerEvent>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerEventProfile {
    fn default() -> &'a BreakerEventProfile {
        <BreakerEventProfile as ::protobuf::Message>::default_instance()
    }
}

impl BreakerEventProfile {
    pub fn new() -> BreakerEventProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.EventMessageInfo eventMessageInfo = 1;


    pub fn get_eventMessageInfo(&self) -> &super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::EventMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eventMessageInfo(&mut self) {
        self.eventMessageInfo.clear();
    }

    pub fn has_eventMessageInfo(&self) -> bool {
        self.eventMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eventMessageInfo(&mut self, v: super::commonmodule::EventMessageInfo) {
        self.eventMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventMessageInfo(&mut self) -> &mut super::commonmodule::EventMessageInfo {
        if self.eventMessageInfo.is_none() {
            self.eventMessageInfo.set_default();
        }
        self.eventMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_eventMessageInfo(&mut self) -> super::commonmodule::EventMessageInfo {
        self.eventMessageInfo.take().unwrap_or_else(|| super::commonmodule::EventMessageInfo::new())
    }

    // .breakermodule.Breaker breaker = 2;


    pub fn get_breaker(&self) -> &Breaker {
        self.breaker.as_ref().unwrap_or_else(|| <Breaker as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breaker(&mut self) {
        self.breaker.clear();
    }

    pub fn has_breaker(&self) -> bool {
        self.breaker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breaker(&mut self, v: Breaker) {
        self.breaker = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breaker(&mut self) -> &mut Breaker {
        if self.breaker.is_none() {
            self.breaker.set_default();
        }
        self.breaker.as_mut().unwrap()
    }

    // Take field
    pub fn take_breaker(&mut self) -> Breaker {
        self.breaker.take().unwrap_or_else(|| Breaker::new())
    }

    // .breakermodule.BreakerEvent breakerEvent = 3;


    pub fn get_breakerEvent(&self) -> &BreakerEvent {
        self.breakerEvent.as_ref().unwrap_or_else(|| <BreakerEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breakerEvent(&mut self) {
        self.breakerEvent.clear();
    }

    pub fn has_breakerEvent(&self) -> bool {
        self.breakerEvent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breakerEvent(&mut self, v: BreakerEvent) {
        self.breakerEvent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breakerEvent(&mut self) -> &mut BreakerEvent {
        if self.breakerEvent.is_none() {
            self.breakerEvent.set_default();
        }
        self.breakerEvent.as_mut().unwrap()
    }

    // Take field
    pub fn take_breakerEvent(&mut self) -> BreakerEvent {
        self.breakerEvent.take().unwrap_or_else(|| BreakerEvent::new())
    }

    // .commonmodule.IED ied = 4;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }
}

impl ::protobuf::Message for BreakerEventProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.eventMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breaker {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breakerEvent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eventMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breaker)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breakerEvent)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breakerEvent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eventMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breakerEvent.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerEventProfile {
        BreakerEventProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::EventMessageInfo>>(
                "eventMessageInfo",
                |m: &BreakerEventProfile| { &m.eventMessageInfo },
                |m: &mut BreakerEventProfile| { &mut m.eventMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Breaker>>(
                "breaker",
                |m: &BreakerEventProfile| { &m.breaker },
                |m: &mut BreakerEventProfile| { &mut m.breaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BreakerEvent>>(
                "breakerEvent",
                |m: &BreakerEventProfile| { &m.breakerEvent },
                |m: &mut BreakerEventProfile| { &mut m.breakerEvent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &BreakerEventProfile| { &m.ied },
                |m: &mut BreakerEventProfile| { &mut m.ied },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerEventProfile>(
                "BreakerEventProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerEventProfile {
        static instance: ::protobuf::rt::LazyV2<BreakerEventProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerEventProfile::new)
    }
}

impl ::protobuf::Clear for BreakerEventProfile {
    fn clear(&mut self) {
        self.eventMessageInfo.clear();
        self.breaker.clear();
        self.breakerEvent.clear();
        self.ied.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerEventProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerEventProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerReading {
    // message fields
    conductingEquipmentTerminalReading: ::protobuf::SingularPtrField<super::commonmodule::ConductingEquipmentTerminalReading>,
    diffReadingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    phaseMMTN: ::protobuf::SingularPtrField<super::commonmodule::PhaseMMTN>,
    readingMMTR: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMTR>,
    readingMMXU: ::protobuf::SingularPtrField<super::commonmodule::ReadingMMXU>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerReading {
    fn default() -> &'a BreakerReading {
        <BreakerReading as ::protobuf::Message>::default_instance()
    }
}

impl BreakerReading {
    pub fn new() -> BreakerReading {
        ::std::default::Default::default()
    }

    // .commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1;


    pub fn get_conductingEquipmentTerminalReading(&self) -> &super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.as_ref().unwrap_or_else(|| <super::commonmodule::ConductingEquipmentTerminalReading as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conductingEquipmentTerminalReading(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
    }

    pub fn has_conductingEquipmentTerminalReading(&self) -> bool {
        self.conductingEquipmentTerminalReading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conductingEquipmentTerminalReading(&mut self, v: super::commonmodule::ConductingEquipmentTerminalReading) {
        self.conductingEquipmentTerminalReading = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conductingEquipmentTerminalReading(&mut self) -> &mut super::commonmodule::ConductingEquipmentTerminalReading {
        if self.conductingEquipmentTerminalReading.is_none() {
            self.conductingEquipmentTerminalReading.set_default();
        }
        self.conductingEquipmentTerminalReading.as_mut().unwrap()
    }

    // Take field
    pub fn take_conductingEquipmentTerminalReading(&mut self) -> super::commonmodule::ConductingEquipmentTerminalReading {
        self.conductingEquipmentTerminalReading.take().unwrap_or_else(|| super::commonmodule::ConductingEquipmentTerminalReading::new())
    }

    // .commonmodule.ReadingMMXU diffReadingMMXU = 2;


    pub fn get_diffReadingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.diffReadingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_diffReadingMMXU(&mut self) {
        self.diffReadingMMXU.clear();
    }

    pub fn has_diffReadingMMXU(&self) -> bool {
        self.diffReadingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_diffReadingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.diffReadingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diffReadingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.diffReadingMMXU.is_none() {
            self.diffReadingMMXU.set_default();
        }
        self.diffReadingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_diffReadingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.diffReadingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }

    // .commonmodule.PhaseMMTN phaseMMTN = 3;


    pub fn get_phaseMMTN(&self) -> &super::commonmodule::PhaseMMTN {
        self.phaseMMTN.as_ref().unwrap_or_else(|| <super::commonmodule::PhaseMMTN as ::protobuf::Message>::default_instance())
    }
    pub fn clear_phaseMMTN(&mut self) {
        self.phaseMMTN.clear();
    }

    pub fn has_phaseMMTN(&self) -> bool {
        self.phaseMMTN.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phaseMMTN(&mut self, v: super::commonmodule::PhaseMMTN) {
        self.phaseMMTN = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phaseMMTN(&mut self) -> &mut super::commonmodule::PhaseMMTN {
        if self.phaseMMTN.is_none() {
            self.phaseMMTN.set_default();
        }
        self.phaseMMTN.as_mut().unwrap()
    }

    // Take field
    pub fn take_phaseMMTN(&mut self) -> super::commonmodule::PhaseMMTN {
        self.phaseMMTN.take().unwrap_or_else(|| super::commonmodule::PhaseMMTN::new())
    }

    // .commonmodule.ReadingMMTR readingMMTR = 4;


    pub fn get_readingMMTR(&self) -> &super::commonmodule::ReadingMMTR {
        self.readingMMTR.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMTR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMTR(&mut self) {
        self.readingMMTR.clear();
    }

    pub fn has_readingMMTR(&self) -> bool {
        self.readingMMTR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMTR(&mut self, v: super::commonmodule::ReadingMMTR) {
        self.readingMMTR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMTR(&mut self) -> &mut super::commonmodule::ReadingMMTR {
        if self.readingMMTR.is_none() {
            self.readingMMTR.set_default();
        }
        self.readingMMTR.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMTR(&mut self) -> super::commonmodule::ReadingMMTR {
        self.readingMMTR.take().unwrap_or_else(|| super::commonmodule::ReadingMMTR::new())
    }

    // .commonmodule.ReadingMMXU readingMMXU = 5;


    pub fn get_readingMMXU(&self) -> &super::commonmodule::ReadingMMXU {
        self.readingMMXU.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMMXU as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMMXU(&mut self) {
        self.readingMMXU.clear();
    }

    pub fn has_readingMMXU(&self) -> bool {
        self.readingMMXU.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMMXU(&mut self, v: super::commonmodule::ReadingMMXU) {
        self.readingMMXU = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMMXU(&mut self) -> &mut super::commonmodule::ReadingMMXU {
        if self.readingMMXU.is_none() {
            self.readingMMXU.set_default();
        }
        self.readingMMXU.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMMXU(&mut self) -> super::commonmodule::ReadingMMXU {
        self.readingMMXU.take().unwrap_or_else(|| super::commonmodule::ReadingMMXU::new())
    }
}

impl ::protobuf::Message for BreakerReading {
    fn is_initialized(&self) -> bool {
        for v in &self.conductingEquipmentTerminalReading {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.diffReadingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.phaseMMTN {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMTR {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.readingMMXU {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conductingEquipmentTerminalReading)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.diffReadingMMXU)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.phaseMMTN)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMTR)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMMXU)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.diffReadingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.conductingEquipmentTerminalReading.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.diffReadingMMXU.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.phaseMMTN.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMTR.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.readingMMXU.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerReading {
        BreakerReading::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ConductingEquipmentTerminalReading>>(
                "conductingEquipmentTerminalReading",
                |m: &BreakerReading| { &m.conductingEquipmentTerminalReading },
                |m: &mut BreakerReading| { &mut m.conductingEquipmentTerminalReading },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "diffReadingMMXU",
                |m: &BreakerReading| { &m.diffReadingMMXU },
                |m: &mut BreakerReading| { &mut m.diffReadingMMXU },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::PhaseMMTN>>(
                "phaseMMTN",
                |m: &BreakerReading| { &m.phaseMMTN },
                |m: &mut BreakerReading| { &mut m.phaseMMTN },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMTR>>(
                "readingMMTR",
                |m: &BreakerReading| { &m.readingMMTR },
                |m: &mut BreakerReading| { &mut m.readingMMTR },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMMXU>>(
                "readingMMXU",
                |m: &BreakerReading| { &m.readingMMXU },
                |m: &mut BreakerReading| { &mut m.readingMMXU },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerReading>(
                "BreakerReading",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerReading {
        static instance: ::protobuf::rt::LazyV2<BreakerReading> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerReading::new)
    }
}

impl ::protobuf::Clear for BreakerReading {
    fn clear(&mut self) {
        self.conductingEquipmentTerminalReading.clear();
        self.diffReadingMMXU.clear();
        self.phaseMMTN.clear();
        self.readingMMTR.clear();
        self.readingMMXU.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerReading {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerReading {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerReadingProfile {
    // message fields
    readingMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::ReadingMessageInfo>,
    breaker: ::protobuf::SingularPtrField<Breaker>,
    breakerReading: ::protobuf::RepeatedField<BreakerReading>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerReadingProfile {
    fn default() -> &'a BreakerReadingProfile {
        <BreakerReadingProfile as ::protobuf::Message>::default_instance()
    }
}

impl BreakerReadingProfile {
    pub fn new() -> BreakerReadingProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.ReadingMessageInfo readingMessageInfo = 1;


    pub fn get_readingMessageInfo(&self) -> &super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::ReadingMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_readingMessageInfo(&mut self) {
        self.readingMessageInfo.clear();
    }

    pub fn has_readingMessageInfo(&self) -> bool {
        self.readingMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_readingMessageInfo(&mut self, v: super::commonmodule::ReadingMessageInfo) {
        self.readingMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_readingMessageInfo(&mut self) -> &mut super::commonmodule::ReadingMessageInfo {
        if self.readingMessageInfo.is_none() {
            self.readingMessageInfo.set_default();
        }
        self.readingMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_readingMessageInfo(&mut self) -> super::commonmodule::ReadingMessageInfo {
        self.readingMessageInfo.take().unwrap_or_else(|| super::commonmodule::ReadingMessageInfo::new())
    }

    // .breakermodule.Breaker breaker = 2;


    pub fn get_breaker(&self) -> &Breaker {
        self.breaker.as_ref().unwrap_or_else(|| <Breaker as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breaker(&mut self) {
        self.breaker.clear();
    }

    pub fn has_breaker(&self) -> bool {
        self.breaker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breaker(&mut self, v: Breaker) {
        self.breaker = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breaker(&mut self) -> &mut Breaker {
        if self.breaker.is_none() {
            self.breaker.set_default();
        }
        self.breaker.as_mut().unwrap()
    }

    // Take field
    pub fn take_breaker(&mut self) -> Breaker {
        self.breaker.take().unwrap_or_else(|| Breaker::new())
    }

    // repeated .breakermodule.BreakerReading breakerReading = 3;


    pub fn get_breakerReading(&self) -> &[BreakerReading] {
        &self.breakerReading
    }
    pub fn clear_breakerReading(&mut self) {
        self.breakerReading.clear();
    }

    // Param is passed by value, moved
    pub fn set_breakerReading(&mut self, v: ::protobuf::RepeatedField<BreakerReading>) {
        self.breakerReading = v;
    }

    // Mutable pointer to the field.
    pub fn mut_breakerReading(&mut self) -> &mut ::protobuf::RepeatedField<BreakerReading> {
        &mut self.breakerReading
    }

    // Take field
    pub fn take_breakerReading(&mut self) -> ::protobuf::RepeatedField<BreakerReading> {
        ::std::mem::replace(&mut self.breakerReading, ::protobuf::RepeatedField::new())
    }

    // .commonmodule.IED ied = 4;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }
}

impl ::protobuf::Message for BreakerReadingProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.readingMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breaker {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breakerReading {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.readingMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breaker)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.breakerReading)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.breakerReading {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.readingMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.breakerReading {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerReadingProfile {
        BreakerReadingProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::ReadingMessageInfo>>(
                "readingMessageInfo",
                |m: &BreakerReadingProfile| { &m.readingMessageInfo },
                |m: &mut BreakerReadingProfile| { &mut m.readingMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Breaker>>(
                "breaker",
                |m: &BreakerReadingProfile| { &m.breaker },
                |m: &mut BreakerReadingProfile| { &mut m.breaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BreakerReading>>(
                "breakerReading",
                |m: &BreakerReadingProfile| { &m.breakerReading },
                |m: &mut BreakerReadingProfile| { &mut m.breakerReading },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &BreakerReadingProfile| { &m.ied },
                |m: &mut BreakerReadingProfile| { &mut m.ied },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerReadingProfile>(
                "BreakerReadingProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerReadingProfile {
        static instance: ::protobuf::rt::LazyV2<BreakerReadingProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerReadingProfile::new)
    }
}

impl ::protobuf::Clear for BreakerReadingProfile {
    fn clear(&mut self) {
        self.readingMessageInfo.clear();
        self.breaker.clear();
        self.breakerReading.clear();
        self.ied.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerReadingProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerReadingProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerStatus {
    // message fields
    statusValue: ::protobuf::SingularPtrField<super::commonmodule::StatusValue>,
    statusAndEventXCBR: ::protobuf::SingularPtrField<super::commonmodule::StatusAndEventXCBR>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerStatus {
    fn default() -> &'a BreakerStatus {
        <BreakerStatus as ::protobuf::Message>::default_instance()
    }
}

impl BreakerStatus {
    pub fn new() -> BreakerStatus {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusValue statusValue = 1;


    pub fn get_statusValue(&self) -> &super::commonmodule::StatusValue {
        self.statusValue.as_ref().unwrap_or_else(|| <super::commonmodule::StatusValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusValue(&mut self) {
        self.statusValue.clear();
    }

    pub fn has_statusValue(&self) -> bool {
        self.statusValue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusValue(&mut self, v: super::commonmodule::StatusValue) {
        self.statusValue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusValue(&mut self) -> &mut super::commonmodule::StatusValue {
        if self.statusValue.is_none() {
            self.statusValue.set_default();
        }
        self.statusValue.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusValue(&mut self) -> super::commonmodule::StatusValue {
        self.statusValue.take().unwrap_or_else(|| super::commonmodule::StatusValue::new())
    }

    // .commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;


    pub fn get_statusAndEventXCBR(&self) -> &super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.as_ref().unwrap_or_else(|| <super::commonmodule::StatusAndEventXCBR as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusAndEventXCBR(&mut self) {
        self.statusAndEventXCBR.clear();
    }

    pub fn has_statusAndEventXCBR(&self) -> bool {
        self.statusAndEventXCBR.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusAndEventXCBR(&mut self, v: super::commonmodule::StatusAndEventXCBR) {
        self.statusAndEventXCBR = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusAndEventXCBR(&mut self) -> &mut super::commonmodule::StatusAndEventXCBR {
        if self.statusAndEventXCBR.is_none() {
            self.statusAndEventXCBR.set_default();
        }
        self.statusAndEventXCBR.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusAndEventXCBR(&mut self) -> super::commonmodule::StatusAndEventXCBR {
        self.statusAndEventXCBR.take().unwrap_or_else(|| super::commonmodule::StatusAndEventXCBR::new())
    }
}

impl ::protobuf::Message for BreakerStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.statusValue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.statusAndEventXCBR {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusValue)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusAndEventXCBR)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusValue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusValue.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.statusAndEventXCBR.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerStatus {
        BreakerStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusValue>>(
                "statusValue",
                |m: &BreakerStatus| { &m.statusValue },
                |m: &mut BreakerStatus| { &mut m.statusValue },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusAndEventXCBR>>(
                "statusAndEventXCBR",
                |m: &BreakerStatus| { &m.statusAndEventXCBR },
                |m: &mut BreakerStatus| { &mut m.statusAndEventXCBR },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerStatus>(
                "BreakerStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerStatus {
        static instance: ::protobuf::rt::LazyV2<BreakerStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerStatus::new)
    }
}

impl ::protobuf::Clear for BreakerStatus {
    fn clear(&mut self) {
        self.statusValue.clear();
        self.statusAndEventXCBR.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BreakerStatusProfile {
    // message fields
    statusMessageInfo: ::protobuf::SingularPtrField<super::commonmodule::StatusMessageInfo>,
    breaker: ::protobuf::SingularPtrField<Breaker>,
    breakerStatus: ::protobuf::SingularPtrField<BreakerStatus>,
    ied: ::protobuf::SingularPtrField<super::commonmodule::IED>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakerStatusProfile {
    fn default() -> &'a BreakerStatusProfile {
        <BreakerStatusProfile as ::protobuf::Message>::default_instance()
    }
}

impl BreakerStatusProfile {
    pub fn new() -> BreakerStatusProfile {
        ::std::default::Default::default()
    }

    // .commonmodule.StatusMessageInfo statusMessageInfo = 1;


    pub fn get_statusMessageInfo(&self) -> &super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.as_ref().unwrap_or_else(|| <super::commonmodule::StatusMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_statusMessageInfo(&mut self) {
        self.statusMessageInfo.clear();
    }

    pub fn has_statusMessageInfo(&self) -> bool {
        self.statusMessageInfo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_statusMessageInfo(&mut self, v: super::commonmodule::StatusMessageInfo) {
        self.statusMessageInfo = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_statusMessageInfo(&mut self) -> &mut super::commonmodule::StatusMessageInfo {
        if self.statusMessageInfo.is_none() {
            self.statusMessageInfo.set_default();
        }
        self.statusMessageInfo.as_mut().unwrap()
    }

    // Take field
    pub fn take_statusMessageInfo(&mut self) -> super::commonmodule::StatusMessageInfo {
        self.statusMessageInfo.take().unwrap_or_else(|| super::commonmodule::StatusMessageInfo::new())
    }

    // .breakermodule.Breaker breaker = 2;


    pub fn get_breaker(&self) -> &Breaker {
        self.breaker.as_ref().unwrap_or_else(|| <Breaker as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breaker(&mut self) {
        self.breaker.clear();
    }

    pub fn has_breaker(&self) -> bool {
        self.breaker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breaker(&mut self, v: Breaker) {
        self.breaker = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breaker(&mut self) -> &mut Breaker {
        if self.breaker.is_none() {
            self.breaker.set_default();
        }
        self.breaker.as_mut().unwrap()
    }

    // Take field
    pub fn take_breaker(&mut self) -> Breaker {
        self.breaker.take().unwrap_or_else(|| Breaker::new())
    }

    // .breakermodule.BreakerStatus breakerStatus = 3;


    pub fn get_breakerStatus(&self) -> &BreakerStatus {
        self.breakerStatus.as_ref().unwrap_or_else(|| <BreakerStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_breakerStatus(&mut self) {
        self.breakerStatus.clear();
    }

    pub fn has_breakerStatus(&self) -> bool {
        self.breakerStatus.is_some()
    }

    // Param is passed by value, moved
    pub fn set_breakerStatus(&mut self, v: BreakerStatus) {
        self.breakerStatus = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_breakerStatus(&mut self) -> &mut BreakerStatus {
        if self.breakerStatus.is_none() {
            self.breakerStatus.set_default();
        }
        self.breakerStatus.as_mut().unwrap()
    }

    // Take field
    pub fn take_breakerStatus(&mut self) -> BreakerStatus {
        self.breakerStatus.take().unwrap_or_else(|| BreakerStatus::new())
    }

    // .commonmodule.IED ied = 4;


    pub fn get_ied(&self) -> &super::commonmodule::IED {
        self.ied.as_ref().unwrap_or_else(|| <super::commonmodule::IED as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ied(&mut self) {
        self.ied.clear();
    }

    pub fn has_ied(&self) -> bool {
        self.ied.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ied(&mut self, v: super::commonmodule::IED) {
        self.ied = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ied(&mut self) -> &mut super::commonmodule::IED {
        if self.ied.is_none() {
            self.ied.set_default();
        }
        self.ied.as_mut().unwrap()
    }

    // Take field
    pub fn take_ied(&mut self) -> super::commonmodule::IED {
        self.ied.take().unwrap_or_else(|| super::commonmodule::IED::new())
    }
}

impl ::protobuf::Message for BreakerStatusProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.statusMessageInfo {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breaker {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.breakerStatus {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ied {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.statusMessageInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breaker)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.breakerStatus)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ied)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.breakerStatus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ied.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.statusMessageInfo.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breaker.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.breakerStatus.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ied.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakerStatusProfile {
        BreakerStatusProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::StatusMessageInfo>>(
                "statusMessageInfo",
                |m: &BreakerStatusProfile| { &m.statusMessageInfo },
                |m: &mut BreakerStatusProfile| { &mut m.statusMessageInfo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Breaker>>(
                "breaker",
                |m: &BreakerStatusProfile| { &m.breaker },
                |m: &mut BreakerStatusProfile| { &mut m.breaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BreakerStatus>>(
                "breakerStatus",
                |m: &BreakerStatusProfile| { &m.breakerStatus },
                |m: &mut BreakerStatusProfile| { &mut m.breakerStatus },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::commonmodule::IED>>(
                "ied",
                |m: &BreakerStatusProfile| { &m.ied },
                |m: &mut BreakerStatusProfile| { &mut m.ied },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakerStatusProfile>(
                "BreakerStatusProfile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakerStatusProfile {
        static instance: ::protobuf::rt::LazyV2<BreakerStatusProfile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakerStatusProfile::new)
    }
}

impl ::protobuf::Clear for BreakerStatusProfile {
    fn clear(&mut self) {
        self.statusMessageInfo.clear();
        self.breaker.clear();
        self.breakerStatus.clear();
        self.ied.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakerStatusProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakerStatusProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!breakermodule/breakermodule.proto\x12\rbreakermodule\"\xb5\x01\n\x1aB\
    reakerDiscreteControlXCBR\x12_\n\x15logicalNodeForControl\x18\x01\x20\
    \x01(\x0b2#.commonmodule.LogicalNodeForControlR\x15logicalNodeForControl\
    B\x04\x80\xb5\x18\x01\x124\n\x03Pos\x18\x02\x20\x01(\x0b2\x18.commonmodu\
    le.ControlDPCR\x03PosB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\x8c\x02\
    \n\x16BreakerDiscreteControl\x12D\n\x0ccontrolValue\x18\x01\x20\x01(\x0b\
    2\x1a.commonmodule.ControlValueR\x0ccontrolValueB\x04\x80\xb5\x18\x01\
    \x125\n\x05check\x18\x02\x20\x01(\x0b2\x1d.commonmodule.CheckConditionsR\
    \x05checkB\0\x12s\n\x1abreakerDiscreteControlXCBR\x18\x03\x20\x01(\x0b2)\
    .breakermodule.BreakerDiscreteControlXCBRR\x1abreakerDiscreteControlXCBR\
    B\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\0\"f\n\x07Breaker\x12Y\n\x13condu\
    ctingEquipment\x18\x01\x20\x01(\x0b2!.commonmodule.ConductingEquipmentR\
    \x13conductingEquipmentB\x04\x80\xb5\x18\x01:\0\"\xd1\x02\n\x1dBreakerDi\
    screteControlProfile\x12V\n\x12controlMessageInfo\x18\x01\x20\x01(\x0b2\
    \x20.commonmodule.ControlMessageInfoR\x12controlMessageInfoB\x04\x80\xb5\
    \x18\x01\x12:\n\x07breaker\x18\x02\x20\x01(\x0b2\x16.breakermodule.Break\
    erR\x07breakerB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12g\n\x16breakerDis\
    creteControl\x18\x03\x20\x01(\x0b2%.breakermodule.BreakerDiscreteControl\
    R\x16breakerDiscreteControlB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12-\n\
    \x03ied\x18\x04\x20\x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x88\xb5\
    \x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\xac\x01\n\x0cBreakerEven\
    t\x12>\n\neventValue\x18\x01\x20\x01(\x0b2\x18.commonmodule.EventValueR\
    \neventValueB\x04\x80\xb5\x18\x01\x12Z\n\x12statusAndEventXCBR\x18\x02\
    \x20\x01(\x0b2\x20.commonmodule.StatusAndEventXCBRR\x12statusAndEventXCB\
    RB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xa3\x02\n\x13BreakerEventPro\
    file\x12P\n\x10eventMessageInfo\x18\x01\x20\x01(\x0b2\x1e.commonmodule.E\
    ventMessageInfoR\x10eventMessageInfoB\x04\x80\xb5\x18\x01\x12:\n\x07brea\
    ker\x18\x02\x20\x01(\x0b2\x16.breakermodule.BreakerR\x07breakerB\x08\x88\
    \xb5\x18\x01\x90\xb5\x18\x01\x12I\n\x0cbreakerEvent\x18\x03\x20\x01(\x0b\
    2\x1b.breakermodule.BreakerEventR\x0cbreakerEventB\x08\x88\xb5\x18\x01\
    \x90\xb5\x18\x01\x12-\n\x03ied\x18\x04\x20\x01(\x0b2\x11.commonmodule.IE\
    DR\x03iedB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\
    \x99\x03\n\x0eBreakerReading\x12\x86\x01\n\"conductingEquipmentTerminalR\
    eading\x18\x01\x20\x01(\x0b20.commonmodule.ConductingEquipmentTerminalRe\
    adingR\"conductingEquipmentTerminalReadingB\x04\x80\xb5\x18\x01\x12E\n\
    \x0fdiffReadingMMXU\x18\x02\x20\x01(\x0b2\x19.commonmodule.ReadingMMXUR\
    \x0fdiffReadingMMXUB\0\x127\n\tphaseMMTN\x18\x03\x20\x01(\x0b2\x17.commo\
    nmodule.PhaseMMTNR\tphaseMMTNB\0\x12=\n\x0breadingMMTR\x18\x04\x20\x01(\
    \x0b2\x19.commonmodule.ReadingMMTRR\x0breadingMMTRB\0\x12=\n\x0breadingM\
    MXU\x18\x05\x20\x01(\x0b2\x19.commonmodule.ReadingMMXUR\x0breadingMMXUB\
    \0:\0\"\xb5\x02\n\x15BreakerReadingProfile\x12V\n\x12readingMessageInfo\
    \x18\x01\x20\x01(\x0b2\x20.commonmodule.ReadingMessageInfoR\x12readingMe\
    ssageInfoB\x04\x80\xb5\x18\x01\x12:\n\x07breaker\x18\x02\x20\x01(\x0b2\
    \x16.breakermodule.BreakerR\x07breakerB\x08\x90\xb5\x18\x01\x88\xb5\x18\
    \x01\x12S\n\x0ebreakerReading\x18\x03\x20\x03(\x0b2\x1d.breakermodule.Br\
    eakerReadingR\x0ebreakerReadingB\x0c\x98\xb5\x18\x02\x88\xb5\x18\x01\x90\
    \xb5\x18\x01\x12-\n\x03ied\x18\x04\x20\x01(\x0b2\x11.commonmodule.IEDR\
    \x03iedB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\x04\xc0\xf3\x18\x01\"\xb0\
    \x01\n\rBreakerStatus\x12A\n\x0bstatusValue\x18\x01\x20\x01(\x0b2\x19.co\
    mmonmodule.StatusValueR\x0bstatusValueB\x04\x80\xb5\x18\x01\x12Z\n\x12st\
    atusAndEventXCBR\x18\x02\x20\x01(\x0b2\x20.commonmodule.StatusAndEventXC\
    BRR\x12statusAndEventXCBRB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01:\0\"\xaa\
    \x02\n\x14BreakerStatusProfile\x12S\n\x11statusMessageInfo\x18\x01\x20\
    \x01(\x0b2\x1f.commonmodule.StatusMessageInfoR\x11statusMessageInfoB\x04\
    \x80\xb5\x18\x01\x12:\n\x07breaker\x18\x02\x20\x01(\x0b2\x16.breakermodu\
    le.BreakerR\x07breakerB\x08\x88\xb5\x18\x01\x90\xb5\x18\x01\x12L\n\rbrea\
    kerStatus\x18\x03\x20\x01(\x0b2\x1c.breakermodule.BreakerStatusR\rbreake\
    rStatusB\x08\x90\xb5\x18\x01\x88\xb5\x18\x01\x12-\n\x03ied\x18\x04\x20\
    \x01(\x0b2\x11.commonmodule.IEDR\x03iedB\x08\x90\xb5\x18\x01\x88\xb5\x18\
    \x01:\x04\xc0\xf3\x18\x01B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
